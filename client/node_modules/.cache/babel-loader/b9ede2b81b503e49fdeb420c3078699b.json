{"ast":null,"code":"/* eslint-env browser */\nconst perf = typeof performance === 'undefined' ? null : performance;\nconst isoCrypto = typeof crypto === 'undefined' ? null : crypto;\n/**\n * @type {function(number):ArrayBuffer}\n */\n\nconst cryptoRandomBuffer = isoCrypto !== null ? len => {\n  // browser\n  const buf = new ArrayBuffer(len);\n  const arr = new Uint8Array(buf);\n  isoCrypto.getRandomValues(arr);\n  return buf;\n} : len => {\n  // polyfill\n  const buf = new ArrayBuffer(len);\n  const arr = new Uint8Array(buf);\n\n  for (let i = 0; i < len; i++) {\n    arr[i] = Math.ceil(Math.random() * 0xFFFFFFFF >>> 0);\n  }\n\n  return buf;\n};\nexports.performance = perf;\nexports.cryptoRandomBuffer = cryptoRandomBuffer;","map":{"version":3,"sources":["/Users/meeopp/Development/Others/editor-yjs/client/node_modules/isomorphic.js/iso-browser.js"],"names":["perf","performance","isoCrypto","crypto","cryptoRandomBuffer","len","buf","ArrayBuffer","arr","Uint8Array","getRandomValues","i","Math","ceil","random","exports"],"mappings":"AAAA;AACA,MAAMA,IAAI,GAAG,OAAOC,WAAP,KAAuB,WAAvB,GAAqC,IAArC,GAA4CA,WAAzD;AAEA,MAAMC,SAAS,GAAG,OAAOC,MAAP,KAAkB,WAAlB,GAAgC,IAAhC,GAAuCA,MAAzD;AAEA;;;;AAGA,MAAMC,kBAAkB,GAAGF,SAAS,KAAK,IAAd,GACvBG,GAAG,IAAI;AACP;AACA,QAAMC,GAAG,GAAG,IAAIC,WAAJ,CAAgBF,GAAhB,CAAZ;AACA,QAAMG,GAAG,GAAG,IAAIC,UAAJ,CAAeH,GAAf,CAAZ;AACAJ,EAAAA,SAAS,CAACQ,eAAV,CAA0BF,GAA1B;AACA,SAAOF,GAAP;AACD,CAPwB,GAQvBD,GAAG,IAAI;AACP;AACA,QAAMC,GAAG,GAAG,IAAIC,WAAJ,CAAgBF,GAAhB,CAAZ;AACA,QAAMG,GAAG,GAAG,IAAIC,UAAJ,CAAeH,GAAf,CAAZ;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAApB,EAAyBM,CAAC,EAA1B,EAA8B;AAC5BH,IAAAA,GAAG,CAACG,CAAD,CAAH,GAASC,IAAI,CAACC,IAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,UAAjB,KAAiC,CAA3C,CAAT;AACD;;AACD,SAAOR,GAAP;AACD,CAhBH;AAkBAS,OAAO,CAACd,WAAR,GAAsBD,IAAtB;AACAe,OAAO,CAACX,kBAAR,GAA6BA,kBAA7B","sourcesContent":["/* eslint-env browser */\nconst perf = typeof performance === 'undefined' ? null : performance\n\nconst isoCrypto = typeof crypto === 'undefined' ? null : crypto\n\n/**\n * @type {function(number):ArrayBuffer}\n */\nconst cryptoRandomBuffer = isoCrypto !== null\n  ? len => {\n    // browser\n    const buf = new ArrayBuffer(len)\n    const arr = new Uint8Array(buf)\n    isoCrypto.getRandomValues(arr)\n    return buf\n  }\n  : len => {\n    // polyfill\n    const buf = new ArrayBuffer(len)\n    const arr = new Uint8Array(buf)\n    for (let i = 0; i < len; i++) {\n      arr[i] = Math.ceil((Math.random() * 0xFFFFFFFF) >>> 0)\n    }\n    return buf\n  }\n\nexports.performance = perf\nexports.cryptoRandomBuffer = cryptoRandomBuffer\n"]},"metadata":{},"sourceType":"script"}