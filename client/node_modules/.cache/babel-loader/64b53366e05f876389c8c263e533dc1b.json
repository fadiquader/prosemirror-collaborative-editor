{"ast":null,"code":"import { appendTo, last } from 'lib0/array.js';\nimport { floor, min, max } from 'lib0/math.js';\nimport { setIfUndefined, any, create as create$2, copy } from 'lib0/map.js';\nimport { writeVarUint, createEncoder, toUint8Array, writeUint8, writeVarString, writeVarUint8Array, writeAny } from 'lib0/encoding.js';\nimport { readVarUint, createDecoder, readUint8, readVarString, readVarUint8Array, readAny } from 'lib0/decoding.js';\nimport { Observable } from 'lib0/observable.js';\nimport { uint32 } from 'lib0/random.js';\nimport { BITS5, BIT8, BIT7, BIT6 } from 'lib0/binary.js';\nimport { callAll } from 'lib0/function.js';\nimport { unexpectedCase, methodUnimplemented, create as create$1 } from 'lib0/error.js';\nimport { create } from 'lib0/set.js';\nimport { print, ORANGE, BOLD, UNBOLD, RED } from 'lib0/logging.js';\nimport { getUnixTime } from 'lib0/time.js';\nimport { iteratorFilter, iteratorMap } from 'lib0/iterator.js';\nimport { equalFlat } from 'lib0/object.js';\nimport { copyUint8Array } from 'lib0/buffer.js';\n\nclass DeleteItem {\n  /**\n   * @param {number} clock\n   * @param {number} len\n   */\n  constructor(clock, len) {\n    /**\n     * @type {number}\n     */\n    this.clock = clock;\n    /**\n     * @type {number}\n     */\n\n    this.len = len;\n  }\n\n}\n/**\n * We no longer maintain a DeleteStore. DeleteSet is a temporary object that is created when needed.\n * - When created in a transaction, it must only be accessed after sorting, and merging\n *   - This DeleteSet is send to other clients\n * - We do not create a DeleteSet when we send a sync message. The DeleteSet message is created directly from StructStore\n * - We read a DeleteSet as part of a sync/update message. In this case the DeleteSet is already sorted and merged.\n */\n\n\nclass DeleteSet {\n  constructor() {\n    /**\n     * @type {Map<number,Array<DeleteItem>>}\n     */\n    this.clients = new Map();\n  }\n\n}\n/**\n * Iterate over all structs that the DeleteSet gc's.\n *\n * @param {Transaction} transaction\n * @param {DeleteSet} ds\n * @param {function(GC|Item):void} f\n *\n * @function\n */\n\n\nconst iterateDeletedStructs = (transaction, ds, f) => ds.clients.forEach((deletes, clientid) => {\n  const structs =\n  /** @type {Array<GC|Item>} */\n  transaction.doc.store.clients.get(clientid);\n\n  for (let i = 0; i < deletes.length; i++) {\n    const del = deletes[i];\n    iterateStructs(transaction, structs, del.clock, del.len, f);\n  }\n});\n/**\n * @param {Array<DeleteItem>} dis\n * @param {number} clock\n * @return {number|null}\n *\n * @private\n * @function\n */\n\n\nconst findIndexDS = (dis, clock) => {\n  let left = 0;\n  let right = dis.length - 1;\n\n  while (left <= right) {\n    const midindex = floor((left + right) / 2);\n    const mid = dis[midindex];\n    const midclock = mid.clock;\n\n    if (midclock <= clock) {\n      if (clock < midclock + mid.len) {\n        return midindex;\n      }\n\n      left = midindex + 1;\n    } else {\n      right = midindex - 1;\n    }\n  }\n\n  return null;\n};\n/**\n * @param {DeleteSet} ds\n * @param {ID} id\n * @return {boolean}\n *\n * @private\n * @function\n */\n\n\nconst isDeleted = (ds, id) => {\n  const dis = ds.clients.get(id.client);\n  return dis !== undefined && findIndexDS(dis, id.clock) !== null;\n};\n/**\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\n\n\nconst sortAndMergeDeleteSet = ds => {\n  ds.clients.forEach(dels => {\n    dels.sort((a, b) => a.clock - b.clock); // merge items without filtering or splicing the array\n    // i is the current pointer\n    // j refers to the current insert position for the pointed item\n    // try to merge dels[i] into dels[j-1] or set dels[j]=dels[i]\n\n    let i, j;\n\n    for (i = 1, j = 1; i < dels.length; i++) {\n      const left = dels[j - 1];\n      const right = dels[i];\n\n      if (left.clock + left.len === right.clock) {\n        left.len += right.len;\n      } else {\n        if (j < i) {\n          dels[j] = right;\n        }\n\n        j++;\n      }\n    }\n\n    dels.length = j;\n  });\n};\n/**\n * @param {Array<DeleteSet>} dss\n * @return {DeleteSet} A fresh DeleteSet\n */\n\n\nconst mergeDeleteSets = dss => {\n  const merged = new DeleteSet();\n\n  for (let dssI = 0; dssI < dss.length; dssI++) {\n    dss[dssI].clients.forEach((delsLeft, client) => {\n      if (!merged.clients.has(client)) {\n        // Write all missing keys from current ds and all following.\n        // If merged already contains `client` current ds has already been added.\n\n        /**\n         * @type {Array<DeleteItem>}\n         */\n        const dels = delsLeft.slice();\n\n        for (let i = dssI + 1; i < dss.length; i++) {\n          appendTo(dels, dss[i].clients.get(client) || []);\n        }\n\n        merged.clients.set(client, dels);\n      }\n    });\n  }\n\n  sortAndMergeDeleteSet(merged);\n  return merged;\n};\n/**\n * @param {DeleteSet} ds\n * @param {ID} id\n * @param {number} length\n *\n * @private\n * @function\n */\n\n\nconst addToDeleteSet = (ds, id, length) => {\n  setIfUndefined(ds.clients, id.client, () => []).push(new DeleteItem(id.clock, length));\n};\n\nconst createDeleteSet = () => new DeleteSet();\n/**\n * @param {StructStore} ss\n * @return {DeleteSet} Merged and sorted DeleteSet\n *\n * @private\n * @function\n */\n\n\nconst createDeleteSetFromStructStore = ss => {\n  const ds = createDeleteSet();\n  ss.clients.forEach((structs, client) => {\n    /**\n     * @type {Array<DeleteItem>}\n     */\n    const dsitems = [];\n\n    for (let i = 0; i < structs.length; i++) {\n      const struct = structs[i];\n\n      if (struct.deleted) {\n        const clock = struct.id.clock;\n        let len = struct.length;\n\n        if (i + 1 < structs.length) {\n          for (let next = structs[i + 1]; i + 1 < structs.length && next.id.clock === clock + len && next.deleted; next = structs[++i + 1]) {\n            len += next.length;\n          }\n        }\n\n        dsitems.push(new DeleteItem(clock, len));\n      }\n    }\n\n    if (dsitems.length > 0) {\n      ds.clients.set(client, dsitems);\n    }\n  });\n  return ds;\n};\n/**\n * @param {encoding.Encoder} encoder\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\n\n\nconst writeDeleteSet = (encoder, ds) => {\n  writeVarUint(encoder, ds.clients.size);\n  ds.clients.forEach((dsitems, client) => {\n    writeVarUint(encoder, client);\n    const len = dsitems.length;\n    writeVarUint(encoder, len);\n\n    for (let i = 0; i < len; i++) {\n      const item = dsitems[i];\n      writeVarUint(encoder, item.clock);\n      writeVarUint(encoder, item.len);\n    }\n  });\n};\n/**\n * @param {decoding.Decoder} decoder\n * @return {DeleteSet}\n *\n * @private\n * @function\n */\n\n\nconst readDeleteSet = decoder => {\n  const ds = new DeleteSet();\n  const numClients = readVarUint(decoder);\n\n  for (let i = 0; i < numClients; i++) {\n    const client = readVarUint(decoder);\n    const numberOfDeletes = readVarUint(decoder);\n\n    for (let i = 0; i < numberOfDeletes; i++) {\n      addToDeleteSet(ds, createID(client, readVarUint(decoder)), readVarUint(decoder));\n    }\n  }\n\n  return ds;\n};\n/**\n * @param {decoding.Decoder} decoder\n * @param {Transaction} transaction\n * @param {StructStore} store\n *\n * @private\n * @function\n */\n\n\nconst readAndApplyDeleteSet = (decoder, transaction, store) => {\n  const unappliedDS = new DeleteSet();\n  const numClients = readVarUint(decoder);\n\n  for (let i = 0; i < numClients; i++) {\n    const client = readVarUint(decoder);\n    const numberOfDeletes = readVarUint(decoder);\n    const structs = store.clients.get(client) || [];\n    const state = getState(store, client);\n\n    for (let i = 0; i < numberOfDeletes; i++) {\n      const clock = readVarUint(decoder);\n      const len = readVarUint(decoder);\n\n      if (clock < state) {\n        if (state < clock + len) {\n          addToDeleteSet(unappliedDS, createID(client, state), clock + len - state);\n        }\n\n        let index = findIndexSS(structs, clock);\n        /**\n         * We can ignore the case of GC and Delete structs, because we are going to skip them\n         * @type {Item}\n         */\n        // @ts-ignore\n\n        let struct = structs[index]; // split the first item if necessary\n\n        if (!struct.deleted && struct.id.clock < clock) {\n          structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock));\n          index++; // increase we now want to use the next struct\n        }\n\n        while (index < structs.length) {\n          // @ts-ignore\n          struct = structs[index++];\n\n          if (struct.id.clock < clock + len) {\n            if (!struct.deleted) {\n              if (clock + len < struct.id.clock + struct.length) {\n                structs.splice(index, 0, splitItem(transaction, struct, clock + len - struct.id.clock));\n              }\n\n              struct.delete(transaction);\n            }\n          } else {\n            break;\n          }\n        }\n      } else {\n        addToDeleteSet(unappliedDS, createID(client, clock), len);\n      }\n    }\n  }\n\n  if (unappliedDS.clients.size > 0) {\n    // TODO: no need for encoding+decoding ds anymore\n    const unappliedDSEncoder = createEncoder();\n    writeDeleteSet(unappliedDSEncoder, unappliedDS);\n    store.pendingDeleteReaders.push(createDecoder(toUint8Array(unappliedDSEncoder)));\n  }\n};\n/**\n * @module Y\n */\n\n\nconst generateNewClientId = uint32;\n/**\n * A Yjs instance handles the state of shared data.\n * @extends Observable<string>\n */\n\nclass Doc extends Observable {\n  /**\n   * @param {Object} conf configuration\n   * @param {boolean} [conf.gc] Disable garbage collection (default: gc=true)\n   * @param {function(Item):boolean} [conf.gcFilter] Will be called before an Item is garbage collected. Return false to keep the Item.\n   */\n  constructor({\n    gc = true,\n    gcFilter = () => true\n  } = {}) {\n    super();\n    this.gc = gc;\n    this.gcFilter = gcFilter;\n    this.clientID = generateNewClientId();\n    /**\n     * @type {Map<string, AbstractType<YEvent>>}\n     */\n\n    this.share = new Map();\n    this.store = new StructStore();\n    /**\n     * @type {Transaction | null}\n     */\n\n    this._transaction = null;\n    /**\n     * @type {Array<Transaction>}\n     */\n\n    this._transactionCleanups = [];\n  }\n  /**\n   * Changes that happen inside of a transaction are bundled. This means that\n   * the observer fires _after_ the transaction is finished and that all changes\n   * that happened inside of the transaction are sent as one message to the\n   * other peers.\n   *\n   * @param {function(Transaction):void} f The function that should be executed as a transaction\n   * @param {any} [origin] Origin of who started the transaction. Will be stored on transaction.origin\n   *\n   * @public\n   */\n\n\n  transact(f, origin = null) {\n    transact(this, f, origin);\n  }\n  /**\n   * Define a shared data type.\n   *\n   * Multiple calls of `y.get(name, TypeConstructor)` yield the same result\n   * and do not overwrite each other. I.e.\n   * `y.define(name, Y.Array) === y.define(name, Y.Array)`\n   *\n   * After this method is called, the type is also available on `y.share.get(name)`.\n   *\n   * *Best Practices:*\n   * Define all types right after the Yjs instance is created and store them in a separate object.\n   * Also use the typed methods `getText(name)`, `getArray(name)`, ..\n   *\n   * @example\n   *   const y = new Y(..)\n   *   const appState = {\n   *     document: y.getText('document')\n   *     comments: y.getArray('comments')\n   *   }\n   *\n   * @param {string} name\n   * @param {Function} TypeConstructor The constructor of the type definition. E.g. Y.Text, Y.Array, Y.Map, ...\n   * @return {AbstractType<any>} The created type. Constructed with TypeConstructor\n   *\n   * @public\n   */\n\n\n  get(name, TypeConstructor = AbstractType) {\n    const type = setIfUndefined(this.share, name, () => {\n      // @ts-ignore\n      const t = new TypeConstructor();\n\n      t._integrate(this, null);\n\n      return t;\n    });\n    const Constr = type.constructor;\n\n    if (TypeConstructor !== AbstractType && Constr !== TypeConstructor) {\n      if (Constr === AbstractType) {\n        // @ts-ignore\n        const t = new TypeConstructor();\n        t._map = type._map;\n\n        type._map.forEach(\n        /** @param {Item?} n */\n        n => {\n          for (; n !== null; n = n.left) {\n            // @ts-ignore\n            n.parent = t;\n          }\n        });\n\n        t._start = type._start;\n\n        for (let n = t._start; n !== null; n = n.right) {\n          n.parent = t;\n        }\n\n        t._length = type._length;\n        this.share.set(name, t);\n\n        t._integrate(this, null);\n\n        return t;\n      } else {\n        throw new Error(`Type with the name ${name} has already been defined with a different constructor`);\n      }\n    }\n\n    return type;\n  }\n  /**\n   * @template T\n   * @param {string} name\n   * @return {YArray<T>}\n   *\n   * @public\n   */\n\n\n  getArray(name) {\n    // @ts-ignore\n    return this.get(name, YArray);\n  }\n  /**\n   * @param {string} name\n   * @return {YText}\n   *\n   * @public\n   */\n\n\n  getText(name) {\n    // @ts-ignore\n    return this.get(name, YText);\n  }\n  /**\n   * @param {string} name\n   * @return {YMap<any>}\n   *\n   * @public\n   */\n\n\n  getMap(name) {\n    // @ts-ignore\n    return this.get(name, YMap);\n  }\n  /**\n   * @param {string} name\n   * @return {YXmlFragment}\n   *\n   * @public\n   */\n\n\n  getXmlFragment(name) {\n    // @ts-ignore\n    return this.get(name, YXmlFragment);\n  }\n  /**\n   * Emit `destroy` event and unregister all event handlers.\n   */\n\n\n  destroy() {\n    this.emit('destroyed', [true]);\n    super.destroy();\n  }\n  /**\n   * @param {string} eventName\n   * @param {function} f\n   */\n\n\n  on(eventName, f) {\n    super.on(eventName, f);\n  }\n  /**\n   * @param {string} eventName\n   * @param {function} f\n   */\n\n\n  off(eventName, f) {\n    super.off(eventName, f);\n  }\n\n}\n/**\n * @param {encoding.Encoder} encoder\n * @param {Array<GC|Item>} structs All structs by `client`\n * @param {number} client\n * @param {number} clock write structs starting with `ID(client,clock)`\n *\n * @function\n */\n\n\nconst writeStructs = (encoder, structs, client, clock) => {\n  // write first id\n  const startNewStructs = findIndexSS(structs, clock); // write # encoded structs\n\n  writeVarUint(encoder, structs.length - startNewStructs);\n  writeID(encoder, createID(client, clock));\n  const firstStruct = structs[startNewStructs]; // write first struct with an offset\n\n  firstStruct.write(encoder, clock - firstStruct.id.clock);\n\n  for (let i = startNewStructs + 1; i < structs.length; i++) {\n    structs[i].write(encoder, 0);\n  }\n};\n/**\n * @param {encoding.Encoder} encoder\n * @param {StructStore} store\n * @param {Map<number,number>} _sm\n *\n * @private\n * @function\n */\n\n\nconst writeClientsStructs = (encoder, store, _sm) => {\n  // we filter all valid _sm entries into sm\n  const sm = new Map();\n\n  _sm.forEach((clock, client) => {\n    // only write if new structs are available\n    if (getState(store, client) > clock) {\n      sm.set(client, clock);\n    }\n  });\n\n  getStateVector(store).forEach((clock, client) => {\n    if (!_sm.has(client)) {\n      sm.set(client, 0);\n    }\n  }); // write # states that were updated\n\n  writeVarUint(encoder, sm.size); // Write items with higher client ids first\n  // This heavily improves the conflict algorithm.\n\n  Array.from(sm.entries()).sort((a, b) => b[0] - a[0]).forEach(([client, clock]) => {\n    // @ts-ignore\n    writeStructs(encoder, store.clients.get(client), client, clock);\n  });\n};\n/**\n * @param {decoding.Decoder} decoder The decoder object to read data from.\n * @param {Map<number,Array<GC|Item>>} clientRefs\n * @param {Doc} doc\n * @return {Map<number,Array<GC|Item>>}\n *\n * @private\n * @function\n */\n\n\nconst readClientsStructRefs = (decoder, clientRefs, doc) => {\n  const numOfStateUpdates = readVarUint(decoder);\n\n  for (let i = 0; i < numOfStateUpdates; i++) {\n    const numberOfStructs = readVarUint(decoder);\n    const nextID = readID(decoder);\n    const nextIdClient = nextID.client;\n    let nextIdClock = nextID.clock;\n    /**\n     * @type {Array<GC|Item>}\n     */\n\n    const refs = [];\n    clientRefs.set(nextIdClient, refs);\n\n    for (let i = 0; i < numberOfStructs; i++) {\n      const info = readUint8(decoder);\n      const id = createID(nextIdClient, nextIdClock);\n      const struct = (BITS5 & info) === 0 ? new GC(id, readVarUint(decoder)) : readItem(decoder, id, info, doc);\n      refs.push(struct);\n      nextIdClock += struct.length;\n    }\n  }\n\n  return clientRefs;\n};\n/**\n * Resume computing structs generated by struct readers.\n *\n * While there is something to do, we integrate structs in this order\n * 1. top element on stack, if stack is not empty\n * 2. next element from current struct reader (if empty, use next struct reader)\n *\n * If struct causally depends on another struct (ref.missing), we put next reader of\n * `ref.id.client` on top of stack.\n *\n * At some point we find a struct that has no causal dependencies,\n * then we start emptying the stack.\n *\n * It is not possible to have circles: i.e. struct1 (from client1) depends on struct2 (from client2)\n * depends on struct3 (from client1). Therefore the max stack size is eqaul to `structReaders.length`.\n *\n * This method is implemented in a way so that we can resume computation if this update\n * causally depends on another update.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n *\n * @private\n * @function\n */\n\n\nconst resumeStructIntegration = (transaction, store) => {\n  const stack = store.pendingStack;\n  const clientsStructRefs = store.pendingClientsStructRefs; // iterate over all struct readers until we are done\n\n  while (stack.length !== 0 || clientsStructRefs.size !== 0) {\n    if (stack.length === 0) {\n      // take any first struct from clientsStructRefs and put it on the stack\n      const [client, structRefs] = clientsStructRefs.entries().next().value;\n      stack.push(structRefs.refs[structRefs.i++]);\n\n      if (structRefs.refs.length === structRefs.i) {\n        clientsStructRefs.delete(client);\n      }\n    }\n\n    const ref = stack[stack.length - 1];\n    const refID = ref.id;\n    const client = refID.client;\n    const refClock = refID.clock;\n    const localClock = getState(store, client);\n    const offset = refClock < localClock ? localClock - refClock : 0;\n    const missing = ref.getMissing(transaction, store);\n\n    if (refClock + offset !== localClock) {\n      // A previous message from this client is missing\n      // check if there is a pending structRef with a smaller clock and switch them\n      const structRefs = clientsStructRefs.get(client);\n\n      if (structRefs !== undefined) {\n        const r = structRefs.refs[structRefs.i];\n\n        if (r.id.clock < refClock) {\n          // put ref with smaller clock on stack instead and continue\n          structRefs.refs[structRefs.i] = ref;\n          stack[stack.length - 1] = r; // sort the set because this approach might bring the list out of order\n\n          structRefs.refs = structRefs.refs.slice(structRefs.i).sort((r1, r2) => r1.id.clock - r2.id.clock);\n          structRefs.i = 0;\n          continue;\n        }\n      } // wait until missing struct is available\n\n\n      return;\n    }\n\n    if (missing) {\n      const client = missing.client; // get the struct reader that has the missing struct\n\n      const structRefs = clientsStructRefs.get(client);\n\n      if (structRefs === undefined) {\n        // This update message causally depends on another update message.\n        return;\n      }\n\n      stack.push(structRefs.refs[structRefs.i++]);\n\n      if (structRefs.i === structRefs.refs.length) {\n        clientsStructRefs.delete(client);\n      }\n    } else {\n      if (offset < ref.length) {\n        ref.integrate(transaction, offset);\n      }\n\n      stack.pop();\n    }\n  }\n};\n/**\n * @param {Transaction} transaction\n * @param {StructStore} store\n *\n * @private\n * @function\n */\n\n\nconst tryResumePendingDeleteReaders = (transaction, store) => {\n  const pendingReaders = store.pendingDeleteReaders;\n  store.pendingDeleteReaders = [];\n\n  for (let i = 0; i < pendingReaders.length; i++) {\n    readAndApplyDeleteSet(pendingReaders[i], transaction, store);\n  }\n};\n/**\n * @param {encoding.Encoder} encoder\n * @param {Transaction} transaction\n *\n * @private\n * @function\n */\n\n\nconst writeStructsFromTransaction = (encoder, transaction) => writeClientsStructs(encoder, transaction.doc.store, transaction.beforeState);\n/**\n * @param {StructStore} store\n * @param {Map<number, Array<GC|Item>>} clientsStructsRefs\n *\n * @private\n * @function\n */\n\n\nconst mergeReadStructsIntoPendingReads = (store, clientsStructsRefs) => {\n  const pendingClientsStructRefs = store.pendingClientsStructRefs;\n\n  for (const [client, structRefs] of clientsStructsRefs) {\n    const pendingStructRefs = pendingClientsStructRefs.get(client);\n\n    if (pendingStructRefs === undefined) {\n      pendingClientsStructRefs.set(client, {\n        refs: structRefs,\n        i: 0\n      });\n    } else {\n      // merge into existing structRefs\n      const merged = pendingStructRefs.i > 0 ? pendingStructRefs.refs.slice(pendingStructRefs.i) : pendingStructRefs.refs;\n\n      for (let i = 0; i < structRefs.length; i++) {\n        merged.push(structRefs[i]);\n      }\n\n      pendingStructRefs.i = 0;\n      pendingStructRefs.refs = merged.sort((r1, r2) => r1.id.clock - r2.id.clock);\n    }\n  }\n};\n/**\n * Read the next Item in a Decoder and fill this Item with the read data.\n *\n * This is called when data is received from a remote peer.\n *\n * @param {decoding.Decoder} decoder The decoder object to read data from.\n * @param {Transaction} transaction\n * @param {StructStore} store\n *\n * @private\n * @function\n */\n\n\nconst readStructs = (decoder, transaction, store) => {\n  const clientsStructRefs = new Map();\n  readClientsStructRefs(decoder, clientsStructRefs, transaction.doc);\n  mergeReadStructsIntoPendingReads(store, clientsStructRefs);\n  resumeStructIntegration(transaction, store);\n  tryResumePendingDeleteReaders(transaction, store);\n};\n/**\n * Read and apply a document update.\n *\n * This function has the same effect as `applyUpdate` but accepts an decoder.\n *\n * @param {decoding.Decoder} decoder\n * @param {Doc} ydoc\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */\n\n\nconst readUpdate = (decoder, ydoc, transactionOrigin) => transact(ydoc, transaction => {\n  readStructs(decoder, transaction, ydoc.store);\n  readAndApplyDeleteSet(decoder, transaction, ydoc.store);\n}, transactionOrigin, false);\n/**\n * Apply a document update created by, for example, `y.on('update', update => ..)` or `update = encodeStateAsUpdate()`.\n *\n * This function has the same effect as `readUpdate` but accepts an Uint8Array instead of a Decoder.\n *\n * @param {Doc} ydoc\n * @param {Uint8Array} update\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */\n\n\nconst applyUpdate = (ydoc, update, transactionOrigin) => readUpdate(createDecoder(update), ydoc, transactionOrigin);\n/**\n * Write all the document as a single update message. If you specify the state of the remote client (`targetStateVector`) it will\n * only write the operations that are missing.\n *\n * @param {encoding.Encoder} encoder\n * @param {Doc} doc\n * @param {Map<number,number>} [targetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n *\n * @function\n */\n\n\nconst writeStateAsUpdate = (encoder, doc, targetStateVector = new Map()) => {\n  writeClientsStructs(encoder, doc.store, targetStateVector);\n  writeDeleteSet(encoder, createDeleteSetFromStructStore(doc.store));\n};\n/**\n * Write all the document as a single update message that can be applied on the remote document. If you specify the state of the remote client (`targetState`) it will\n * only write the operations that are missing.\n *\n * Use `writeStateAsUpdate` instead if you are working with lib0/encoding.js#Encoder\n *\n * @param {Doc} doc\n * @param {Uint8Array} [encodedTargetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n * @return {Uint8Array}\n *\n * @function\n */\n\n\nconst encodeStateAsUpdate = (doc, encodedTargetStateVector) => {\n  const encoder = createEncoder();\n  const targetStateVector = encodedTargetStateVector == null ? new Map() : decodeStateVector(encodedTargetStateVector);\n  writeStateAsUpdate(encoder, doc, targetStateVector);\n  return toUint8Array(encoder);\n};\n/**\n * Read state vector from Decoder and return as Map\n *\n * @param {decoding.Decoder} decoder\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\n\n\nconst readStateVector = decoder => {\n  const ss = new Map();\n  const ssLength = readVarUint(decoder);\n\n  for (let i = 0; i < ssLength; i++) {\n    const client = readVarUint(decoder);\n    const clock = readVarUint(decoder);\n    ss.set(client, clock);\n  }\n\n  return ss;\n};\n/**\n * Read decodedState and return State as Map.\n *\n * @param {Uint8Array} decodedState\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\n\n\nconst decodeStateVector = decodedState => readStateVector(createDecoder(decodedState));\n/**\n * Write State Vector to `lib0/encoding.js#Encoder`.\n *\n * @param {encoding.Encoder} encoder\n * @param {Map<number,number>} sv\n * @function\n */\n\n\nconst writeStateVector = (encoder, sv) => {\n  writeVarUint(encoder, sv.size);\n  sv.forEach((clock, client) => {\n    writeVarUint(encoder, client);\n    writeVarUint(encoder, clock);\n  });\n  return encoder;\n};\n/**\n * Write State Vector to `lib0/encoding.js#Encoder`.\n *\n * @param {encoding.Encoder} encoder\n * @param {Doc} doc\n *\n * @function\n */\n\n\nconst writeDocumentStateVector = (encoder, doc) => writeStateVector(encoder, getStateVector(doc.store));\n/**\n * Encode State as Uint8Array.\n *\n * @param {Doc} doc\n * @return {Uint8Array}\n *\n * @function\n */\n\n\nconst encodeStateVector = doc => {\n  const encoder = createEncoder();\n  writeDocumentStateVector(encoder, doc);\n  return toUint8Array(encoder);\n};\n/**\n * General event handler implementation.\n *\n * @template ARG0, ARG1\n *\n * @private\n */\n\n\nclass EventHandler {\n  constructor() {\n    /**\n     * @type {Array<function(ARG0, ARG1):void>}\n     */\n    this.l = [];\n  }\n\n}\n/**\n * @template ARG0,ARG1\n * @returns {EventHandler<ARG0,ARG1>}\n *\n * @private\n * @function\n */\n\n\nconst createEventHandler = () => new EventHandler();\n/**\n * Adds an event listener that is called when\n * {@link EventHandler#callEventListeners} is called.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler.\n *\n * @private\n * @function\n */\n\n\nconst addEventHandlerListener = (eventHandler, f) => eventHandler.l.push(f);\n/**\n * Removes an event listener.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler that was added with\n *                     {@link EventHandler#addEventListener}\n *\n * @private\n * @function\n */\n\n\nconst removeEventHandlerListener = (eventHandler, f) => {\n  eventHandler.l = eventHandler.l.filter(g => f !== g);\n};\n/**\n * Call all event listeners that were added via\n * {@link EventHandler#addEventListener}.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {ARG0} arg0\n * @param {ARG1} arg1\n *\n * @private\n * @function\n */\n\n\nconst callEventHandlerListeners = (eventHandler, arg0, arg1) => callAll(eventHandler.l, [arg0, arg1]);\n\nclass ID {\n  /**\n   * @param {number} client client id\n   * @param {number} clock unique per client id, continuous number\n   */\n  constructor(client, clock) {\n    /**\n     * Client id\n     * @type {number}\n     */\n    this.client = client;\n    /**\n     * unique per client id, continuous number\n     * @type {number}\n     */\n\n    this.clock = clock;\n  }\n\n}\n/**\n * @param {ID | null} a\n * @param {ID | null} b\n * @return {boolean}\n *\n * @function\n */\n\n\nconst compareIDs = (a, b) => a === b || a !== null && b !== null && a.client === b.client && a.clock === b.clock;\n/**\n * @param {number} client\n * @param {number} clock\n *\n * @private\n * @function\n */\n\n\nconst createID = (client, clock) => new ID(client, clock);\n/**\n * @param {encoding.Encoder} encoder\n * @param {ID} id\n *\n * @private\n * @function\n */\n\n\nconst writeID = (encoder, id) => {\n  writeVarUint(encoder, id.client);\n  writeVarUint(encoder, id.clock);\n};\n/**\n * Read ID.\n * * If first varUint read is 0xFFFFFF a RootID is returned.\n * * Otherwise an ID is returned\n *\n * @param {decoding.Decoder} decoder\n * @return {ID}\n *\n * @private\n * @function\n */\n\n\nconst readID = decoder => createID(readVarUint(decoder), readVarUint(decoder));\n/**\n * The top types are mapped from y.share.get(keyname) => type.\n * `type` does not store any information about the `keyname`.\n * This function finds the correct `keyname` for `type` and throws otherwise.\n *\n * @param {AbstractType<any>} type\n * @return {string}\n *\n * @private\n * @function\n */\n\n\nconst findRootTypeKey = type => {\n  // @ts-ignore _y must be defined, otherwise unexpected case\n  for (const [key, value] of type.doc.share) {\n    if (value === type) {\n      return key;\n    }\n  }\n\n  throw unexpectedCase();\n};\n/**\n * Check if `parent` is a parent of `child`.\n *\n * @param {AbstractType<any>} parent\n * @param {Item|null} child\n * @return {Boolean} Whether `parent` is a parent of `child`.\n *\n * @private\n * @function\n */\n\n\nconst isParentOf = (parent, child) => {\n  while (child !== null) {\n    if (child.parent === parent) {\n      return true;\n    }\n\n    child =\n    /** @type {AbstractType<any>} */\n    child.parent._item;\n  }\n\n  return false;\n};\n\nclass PermanentUserData {\n  /**\n   * @param {Doc} doc\n   * @param {YMap<any>} [storeType]\n   */\n  constructor(doc, storeType = doc.getMap('users')) {\n    /**\n     * @type {Map<string,DeleteSet>}\n     */\n    const dss = new Map();\n    this.yusers = storeType;\n    this.doc = doc;\n    /**\n     * Maps from clientid to userDescription\n     *\n     * @type {Map<number,string>}\n     */\n\n    this.clients = new Map();\n    this.dss = dss;\n    /**\n     * @param {YMap<any>} user\n     * @param {string} userDescription\n     */\n\n    const initUser = (user, userDescription) => {\n      /**\n       * @type {YArray<Uint8Array>}\n       */\n      const ds = user.get('ds');\n      const ids = user.get('ids');\n\n      const addClientId =\n      /** @param {number} clientid */\n      clientid => this.clients.set(clientid, userDescription);\n\n      ds.observe(\n      /** @param {YArrayEvent<any>} event */\n      event => {\n        event.changes.added.forEach(item => {\n          item.content.getContent().forEach(encodedDs => {\n            if (encodedDs instanceof Uint8Array) {\n              this.dss.set(userDescription, mergeDeleteSets([this.dss.get(userDescription) || createDeleteSet(), readDeleteSet(createDecoder(encodedDs))]));\n            }\n          });\n        });\n      });\n      this.dss.set(userDescription, mergeDeleteSets(ds.map(encodedDs => readDeleteSet(createDecoder(encodedDs)))));\n      ids.observe(\n      /** @param {YArrayEvent<any>} event */\n      event => event.changes.added.forEach(item => item.content.getContent().forEach(addClientId)));\n      ids.forEach(addClientId);\n    }; // observe users\n\n\n    storeType.observe(event => {\n      event.keysChanged.forEach(userDescription => initUser(storeType.get(userDescription), userDescription));\n    }); // add intial data\n\n    storeType.forEach(initUser);\n  }\n  /**\n   * @param {Doc} doc\n   * @param {number} clientid\n   * @param {string} userDescription\n   * @param {Object} [conf]\n   * @param {function(Transaction, DeleteSet):boolean} [conf.filter]\n   */\n\n\n  setUserMapping(doc, clientid, userDescription, {\n    filter = () => true\n  } = {}) {\n    const users = this.yusers;\n    let user = users.get(userDescription);\n\n    if (!user) {\n      user = new YMap();\n      user.set('ids', new YArray());\n      user.set('ds', new YArray());\n      users.set(userDescription, user);\n    }\n\n    user.get('ids').push([clientid]);\n    users.observe(event => {\n      setTimeout(() => {\n        const userOverwrite = users.get(userDescription);\n\n        if (userOverwrite !== user) {\n          // user was overwritten, port all data over to the next user object\n          // @todo Experiment with Y.Sets here\n          user = userOverwrite; // @todo iterate over old type\n\n          this.clients.forEach((_userDescription, clientid) => {\n            if (userDescription === _userDescription) {\n              user.get('ids').push([clientid]);\n            }\n          });\n          const encoder = createEncoder();\n          const ds = this.dss.get(userDescription);\n\n          if (ds) {\n            writeDeleteSet(encoder, ds);\n            user.get('ds').push([toUint8Array(encoder)]);\n          }\n        }\n      }, 0);\n    });\n    doc.on('afterTransaction',\n    /** @param {Transaction} transaction */\n    transaction => {\n      setTimeout(() => {\n        const yds = user.get('ds');\n        const ds = transaction.deleteSet;\n\n        if (transaction.local && ds.clients.size > 0 && filter(transaction, ds)) {\n          const encoder = createEncoder();\n          writeDeleteSet(encoder, ds);\n          yds.push([toUint8Array(encoder)]);\n        }\n      });\n    });\n  }\n  /**\n   * @param {number} clientid\n   * @return {any}\n   */\n\n\n  getUserByClientId(clientid) {\n    return this.clients.get(clientid) || null;\n  }\n  /**\n   * @param {ID} id\n   * @return {string | null}\n   */\n\n\n  getUserByDeletedId(id) {\n    for (const [userDescription, ds] of this.dss) {\n      if (isDeleted(ds, id)) {\n        return userDescription;\n      }\n    }\n\n    return null;\n  }\n\n}\n/**\n * A relative position is based on the Yjs model and is not affected by document changes.\n * E.g. If you place a relative position before a certain character, it will always point to this character.\n * If you place a relative position at the end of a type, it will always point to the end of the type.\n *\n * A numeric position is often unsuited for user selections, because it does not change when content is inserted\n * before or after.\n *\n * ```Insert(0, 'x')('a|bc') = 'xa|bc'``` Where | is the relative position.\n *\n * One of the properties must be defined.\n *\n * @example\n *   // Current cursor position is at position 10\n *   const relativePosition = createRelativePositionFromIndex(yText, 10)\n *   // modify yText\n *   yText.insert(0, 'abc')\n *   yText.delete(3, 10)\n *   // Compute the cursor position\n *   const absolutePosition = createAbsolutePositionFromRelativePosition(y, relativePosition)\n *   absolutePosition.type === yText // => true\n *   console.log('cursor location is ' + absolutePosition.index) // => cursor location is 3\n *\n */\n\n\nclass RelativePosition {\n  /**\n   * @param {ID|null} type\n   * @param {string|null} tname\n   * @param {ID|null} item\n   */\n  constructor(type, tname, item) {\n    /**\n     * @type {ID|null}\n     */\n    this.type = type;\n    /**\n     * @type {string|null}\n     */\n\n    this.tname = tname;\n    /**\n     * @type {ID | null}\n     */\n\n    this.item = item;\n  }\n\n}\n/**\n * @param {any} json\n * @return {RelativePosition}\n *\n * @function\n */\n\n\nconst createRelativePositionFromJSON = json => new RelativePosition(json.type == null ? null : createID(json.type.client, json.type.clock), json.tname || null, json.item == null ? null : createID(json.item.client, json.item.clock));\n\nclass AbsolutePosition {\n  /**\n   * @param {AbstractType<any>} type\n   * @param {number} index\n   */\n  constructor(type, index) {\n    /**\n     * @type {AbstractType<any>}\n     */\n    this.type = type;\n    /**\n     * @type {number}\n     */\n\n    this.index = index;\n  }\n\n}\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n *\n * @function\n */\n\n\nconst createAbsolutePosition = (type, index) => new AbsolutePosition(type, index);\n/**\n * @param {AbstractType<any>} type\n * @param {ID|null} item\n *\n * @function\n */\n\n\nconst createRelativePosition = (type, item) => {\n  let typeid = null;\n  let tname = null;\n\n  if (type._item === null) {\n    tname = findRootTypeKey(type);\n  } else {\n    typeid = createID(type._item.id.client, type._item.id.clock);\n  }\n\n  return new RelativePosition(typeid, tname, item);\n};\n/**\n * Create a relativePosition based on a absolute position.\n *\n * @param {AbstractType<any>} type The base type (e.g. YText or YArray).\n * @param {number} index The absolute position.\n * @return {RelativePosition}\n *\n * @function\n */\n\n\nconst createRelativePositionFromTypeIndex = (type, index) => {\n  let t = type._start;\n\n  while (t !== null) {\n    if (!t.deleted && t.countable) {\n      if (t.length > index) {\n        // case 1: found position somewhere in the linked list\n        return createRelativePosition(type, createID(t.id.client, t.id.clock + index));\n      }\n\n      index -= t.length;\n    }\n\n    t = t.right;\n  }\n\n  return createRelativePosition(type, null);\n};\n/**\n * @param {encoding.Encoder} encoder\n * @param {RelativePosition} rpos\n *\n * @function\n */\n\n\nconst writeRelativePosition = (encoder, rpos) => {\n  const {\n    type,\n    tname,\n    item\n  } = rpos;\n\n  if (item !== null) {\n    writeVarUint(encoder, 0);\n    writeID(encoder, item);\n  } else if (tname !== null) {\n    // case 2: found position at the end of the list and type is stored in y.share\n    writeUint8(encoder, 1);\n    writeVarString(encoder, tname);\n  } else if (type !== null) {\n    // case 3: found position at the end of the list and type is attached to an item\n    writeUint8(encoder, 2);\n    writeID(encoder, type);\n  } else {\n    throw unexpectedCase();\n  }\n\n  return encoder;\n};\n/**\n * @param {decoding.Decoder} decoder\n * @return {RelativePosition|null}\n *\n * @function\n */\n\n\nconst readRelativePosition = decoder => {\n  let type = null;\n  let tname = null;\n  let itemID = null;\n\n  switch (readVarUint(decoder)) {\n    case 0:\n      // case 1: found position somewhere in the linked list\n      itemID = readID(decoder);\n      break;\n\n    case 1:\n      // case 2: found position at the end of the list and type is stored in y.share\n      tname = readVarString(decoder);\n      break;\n\n    case 2:\n      {\n        // case 3: found position at the end of the list and type is attached to an item\n        type = readID(decoder);\n      }\n  }\n\n  return new RelativePosition(type, tname, itemID);\n};\n/**\n * @param {RelativePosition} rpos\n * @param {Doc} doc\n * @return {AbsolutePosition|null}\n *\n * @function\n */\n\n\nconst createAbsolutePositionFromRelativePosition = (rpos, doc) => {\n  const store = doc.store;\n  const rightID = rpos.item;\n  const typeID = rpos.type;\n  const tname = rpos.tname;\n  let type = null;\n  let index = 0;\n\n  if (rightID !== null) {\n    if (getState(store, rightID.client) <= rightID.clock) {\n      return null;\n    }\n\n    const res = followRedone(store, rightID);\n    const right = res.item;\n\n    if (!(right instanceof Item)) {\n      return null;\n    }\n\n    type =\n    /** @type {AbstractType<any>} */\n    right.parent;\n\n    if (type._item === null || !type._item.deleted) {\n      index = right.deleted || !right.countable ? 0 : res.diff;\n      let n = right.left;\n\n      while (n !== null) {\n        if (!n.deleted && n.countable) {\n          index += n.length;\n        }\n\n        n = n.left;\n      }\n    }\n  } else {\n    if (tname !== null) {\n      type = doc.get(tname);\n    } else if (typeID !== null) {\n      if (getState(store, typeID.client) <= typeID.clock) {\n        // type does not exist yet\n        return null;\n      }\n\n      const {\n        item\n      } = followRedone(store, typeID);\n\n      if (item instanceof Item && item.content instanceof ContentType) {\n        type = item.content.type;\n      } else {\n        // struct is garbage collected\n        return null;\n      }\n    } else {\n      throw unexpectedCase();\n    }\n\n    index = type._length;\n  }\n\n  return createAbsolutePosition(type, index);\n};\n/**\n * @param {RelativePosition|null} a\n * @param {RelativePosition|null} b\n *\n * @function\n */\n\n\nconst compareRelativePositions = (a, b) => a === b || a !== null && b !== null && a.tname === b.tname && compareIDs(a.item, b.item) && compareIDs(a.type, b.type);\n\nclass Snapshot {\n  /**\n   * @param {DeleteSet} ds\n   * @param {Map<number,number>} sv state map\n   */\n  constructor(ds, sv) {\n    /**\n     * @type {DeleteSet}\n     */\n    this.ds = ds;\n    /**\n     * State Map\n     * @type {Map<number,number>}\n     */\n\n    this.sv = sv;\n  }\n\n}\n/**\n * @param {Snapshot} snap1\n * @param {Snapshot} snap2\n * @return {boolean}\n */\n\n\nconst equalSnapshots = (snap1, snap2) => {\n  const ds1 = snap1.ds.clients;\n  const ds2 = snap2.ds.clients;\n  const sv1 = snap1.sv;\n  const sv2 = snap2.sv;\n\n  if (sv1.size !== sv2.size || ds1.size !== ds2.size) {\n    return false;\n  }\n\n  for (const [key, value] of sv1) {\n    if (sv2.get(key) !== value) {\n      return false;\n    }\n  }\n\n  for (const [client, dsitems1] of ds1) {\n    const dsitems2 = ds2.get(client) || [];\n\n    if (dsitems1.length !== dsitems2.length) {\n      return false;\n    }\n\n    for (let i = 0; i < dsitems1.length; i++) {\n      const dsitem1 = dsitems1[i];\n      const dsitem2 = dsitems2[i];\n\n      if (dsitem1.clock !== dsitem2.clock || dsitem1.len !== dsitem2.len) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n/**\n * @param {Snapshot} snapshot\n * @return {Uint8Array}\n */\n\n\nconst encodeSnapshot = snapshot => {\n  const encoder = createEncoder();\n  writeDeleteSet(encoder, snapshot.ds);\n  writeStateVector(encoder, snapshot.sv);\n  return toUint8Array(encoder);\n};\n/**\n * @param {Uint8Array} buf\n * @return {Snapshot}\n */\n\n\nconst decodeSnapshot = buf => {\n  const decoder = createDecoder(buf);\n  return new Snapshot(readDeleteSet(decoder), readStateVector(decoder));\n};\n/**\n * @param {DeleteSet} ds\n * @param {Map<number,number>} sm\n * @return {Snapshot}\n */\n\n\nconst createSnapshot = (ds, sm) => new Snapshot(ds, sm);\n\nconst emptySnapshot = createSnapshot(createDeleteSet(), new Map());\n/**\n * @param {Doc} doc\n * @return {Snapshot}\n */\n\nconst snapshot = doc => createSnapshot(createDeleteSetFromStructStore(doc.store), getStateVector(doc.store));\n/**\n * @param {Item} item\n * @param {Snapshot|undefined} snapshot\n *\n * @protected\n * @function\n */\n\n\nconst isVisible = (item, snapshot) => snapshot === undefined ? !item.deleted : snapshot.sv.has(item.id.client) && (snapshot.sv.get(item.id.client) || 0) > item.id.clock && !isDeleted(snapshot.ds, item.id);\n/**\n * @param {Transaction} transaction\n * @param {Snapshot} snapshot\n */\n\n\nconst splitSnapshotAffectedStructs = (transaction, snapshot) => {\n  const meta = setIfUndefined(transaction.meta, splitSnapshotAffectedStructs, create);\n  const store = transaction.doc.store; // check if we already split for this snapshot\n\n  if (!meta.has(snapshot)) {\n    snapshot.sv.forEach((clock, client) => {\n      if (clock < getState(store, client)) {\n        getItemCleanStart(transaction, createID(client, clock));\n      }\n    });\n    iterateDeletedStructs(transaction, snapshot.ds, item => {});\n    meta.add(snapshot);\n  }\n};\n\nclass StructStore {\n  constructor() {\n    /**\n     * @type {Map<number,Array<GC|Item>>}\n     */\n    this.clients = new Map();\n    /**\n     * Store incompleted struct reads here\n     * `i` denotes to the next read operation\n     * We could shift the array of refs instead, but shift is incredible\n     * slow in Chrome for arrays with more than 100k elements\n     * @see tryResumePendingStructRefs\n     * @type {Map<number,{i:number,refs:Array<GC|Item>}>}\n     */\n\n    this.pendingClientsStructRefs = new Map();\n    /**\n     * Stack of pending structs waiting for struct dependencies\n     * Maximum length of stack is structReaders.size\n     * @type {Array<GC|Item>}\n     */\n\n    this.pendingStack = [];\n    /**\n     * @type {Array<decoding.Decoder>}\n     */\n\n    this.pendingDeleteReaders = [];\n  }\n\n}\n/**\n * Return the states as a Map<client,clock>.\n * Note that clock refers to the next expected clock id.\n *\n * @param {StructStore} store\n * @return {Map<number,number>}\n *\n * @public\n * @function\n */\n\n\nconst getStateVector = store => {\n  const sm = new Map();\n  store.clients.forEach((structs, client) => {\n    const struct = structs[structs.length - 1];\n    sm.set(client, struct.id.clock + struct.length);\n  });\n  return sm;\n};\n/**\n * @param {StructStore} store\n * @param {number} client\n * @return {number}\n *\n * @public\n * @function\n */\n\n\nconst getState = (store, client) => {\n  const structs = store.clients.get(client);\n\n  if (structs === undefined) {\n    return 0;\n  }\n\n  const lastStruct = structs[structs.length - 1];\n  return lastStruct.id.clock + lastStruct.length;\n};\n/**\n * @param {StructStore} store\n * @param {GC|Item} struct\n *\n * @private\n * @function\n */\n\n\nconst addStruct = (store, struct) => {\n  let structs = store.clients.get(struct.id.client);\n\n  if (structs === undefined) {\n    structs = [];\n    store.clients.set(struct.id.client, structs);\n  } else {\n    const lastStruct = structs[structs.length - 1];\n\n    if (lastStruct.id.clock + lastStruct.length !== struct.id.clock) {\n      throw unexpectedCase();\n    }\n  }\n\n  structs.push(struct);\n};\n/**\n * Perform a binary search on a sorted array\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n * @return {number}\n *\n * @private\n * @function\n */\n\n\nconst findIndexSS = (structs, clock) => {\n  let left = 0;\n  let right = structs.length - 1;\n  let mid = structs[right];\n  let midclock = mid.id.clock;\n\n  if (mid.id.clock === clock) {\n    return right;\n  } // @todo does it even make sense to pivot the search?\n  // If a good split misses, it might actually increase the time to find the correct item.\n  // Currently, the only advantage is that search with pivoting might find the item on the first try.\n\n\n  let midindex = floor(clock / (midclock + mid.length - 1) * right); // pivoting the search\n\n  while (left <= right) {\n    mid = structs[midindex];\n    midclock = mid.id.clock;\n\n    if (midclock <= clock) {\n      if (clock < midclock + mid.length) {\n        return midindex;\n      }\n\n      left = midindex + 1;\n    } else {\n      right = midindex - 1;\n    }\n\n    midindex = floor((left + right) / 2);\n  } // Always check state before looking for a struct in StructStore\n  // Therefore the case of not finding a struct is unexpected\n\n\n  throw unexpectedCase();\n};\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {GC|Item}\n *\n * @private\n * @function\n */\n\n\nconst find = (store, id) => {\n  /**\n   * @type {Array<GC|Item>}\n   */\n  // @ts-ignore\n  const structs = store.clients.get(id.client);\n  return structs[findIndexSS(structs, id.clock)];\n};\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n * @private\n * @function\n */\n\n\nconst getItem =\n/** @type {function(StructStore,ID):Item} */\nfind;\n/**\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n */\n\nconst findIndexCleanStart = (transaction, structs, clock) => {\n  const index = findIndexSS(structs, clock);\n  const struct = structs[index];\n\n  if (struct.id.clock < clock && struct instanceof Item) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock));\n    return index + 1;\n  }\n\n  return index;\n};\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\n\n\nconst getItemCleanStart = (transaction, id) => {\n  const structs =\n  /** @type {Array<Item>} */\n  transaction.doc.store.clients.get(id.client);\n  return structs[findIndexCleanStart(transaction, structs, id.clock)];\n};\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\n\n\nconst getItemCleanEnd = (transaction, store, id) => {\n  /**\n   * @type {Array<Item>}\n   */\n  // @ts-ignore\n  const structs = store.clients.get(id.client);\n  const index = findIndexSS(structs, id.clock);\n  const struct = structs[index];\n\n  if (id.clock !== struct.id.clock + struct.length - 1 && struct.constructor !== GC) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, id.clock - struct.id.clock + 1));\n  }\n\n  return struct;\n};\n/**\n * Replace `item` with `newitem` in store\n * @param {StructStore} store\n * @param {GC|Item} struct\n * @param {GC|Item} newStruct\n *\n * @private\n * @function\n */\n\n\nconst replaceStruct = (store, struct, newStruct) => {\n  const structs =\n  /** @type {Array<GC|Item>} */\n  store.clients.get(struct.id.client);\n  structs[findIndexSS(structs, struct.id.clock)] = newStruct;\n};\n/**\n * Iterate over a range of structs\n *\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clockStart Inclusive start\n * @param {number} len\n * @param {function(GC|Item):void} f\n *\n * @function\n */\n\n\nconst iterateStructs = (transaction, structs, clockStart, len, f) => {\n  if (len === 0) {\n    return;\n  }\n\n  const clockEnd = clockStart + len;\n  let index = findIndexCleanStart(transaction, structs, clockStart);\n  let struct;\n\n  do {\n    struct = structs[index++];\n\n    if (clockEnd < struct.id.clock + struct.length) {\n      findIndexCleanStart(transaction, structs, clockEnd);\n    }\n\n    f(struct);\n  } while (index < structs.length && structs[index].id.clock < clockEnd);\n};\n/**\n * A transaction is created for every change on the Yjs model. It is possible\n * to bundle changes on the Yjs model in a single transaction to\n * minimize the number on messages sent and the number of observer calls.\n * If possible the user of this library should bundle as many changes as\n * possible. Here is an example to illustrate the advantages of bundling:\n *\n * @example\n * const map = y.define('map', YMap)\n * // Log content when change is triggered\n * map.observe(() => {\n *   console.log('change triggered')\n * })\n * // Each change on the map type triggers a log message:\n * map.set('a', 0) // => \"change triggered\"\n * map.set('b', 0) // => \"change triggered\"\n * // When put in a transaction, it will trigger the log after the transaction:\n * y.transact(() => {\n *   map.set('a', 1)\n *   map.set('b', 1)\n * }) // => \"change triggered\"\n *\n * @public\n */\n\n\nclass Transaction {\n  /**\n   * @param {Doc} doc\n   * @param {any} origin\n   * @param {boolean} local\n   */\n  constructor(doc, origin, local) {\n    /**\n     * The Yjs instance.\n     * @type {Doc}\n     */\n    this.doc = doc;\n    /**\n     * Describes the set of deleted items by ids\n     * @type {DeleteSet}\n     */\n\n    this.deleteSet = new DeleteSet();\n    /**\n     * Holds the state before the transaction started.\n     * @type {Map<Number,Number>}\n     */\n\n    this.beforeState = getStateVector(doc.store);\n    /**\n     * Holds the state after the transaction.\n     * @type {Map<Number,Number>}\n     */\n\n    this.afterState = new Map();\n    /**\n     * All types that were directly modified (property added or child\n     * inserted/deleted). New types are not included in this Set.\n     * Maps from type to parentSubs (`item.parentSub = null` for YArray)\n     * @type {Map<AbstractType<YEvent>,Set<String|null>>}\n     */\n\n    this.changed = new Map();\n    /**\n     * Stores the events for the types that observe also child elements.\n     * It is mainly used by `observeDeep`.\n     * @type {Map<AbstractType<YEvent>,Array<YEvent>>}\n     */\n\n    this.changedParentTypes = new Map();\n    /**\n     * @type {Array<AbstractStruct>}\n     */\n\n    this._mergeStructs = [];\n    /**\n     * @type {any}\n     */\n\n    this.origin = origin;\n    /**\n     * Stores meta information on the transaction\n     * @type {Map<any,any>}\n     */\n\n    this.meta = new Map();\n    /**\n     * Whether this change originates from this doc.\n     * @type {boolean}\n     */\n\n    this.local = local;\n  }\n\n}\n/**\n * @param {Transaction} transaction\n */\n\n\nconst computeUpdateMessageFromTransaction = transaction => {\n  if (transaction.deleteSet.clients.size === 0 && !any(transaction.afterState, (clock, client) => transaction.beforeState.get(client) !== clock)) {\n    return null;\n  }\n\n  const encoder = createEncoder();\n  sortAndMergeDeleteSet(transaction.deleteSet);\n  writeStructsFromTransaction(encoder, transaction);\n  writeDeleteSet(encoder, transaction.deleteSet);\n  return encoder;\n};\n/**\n * If `type.parent` was added in current transaction, `type` technically\n * did not change, it was just added and we should not fire events for `type`.\n *\n * @param {Transaction} transaction\n * @param {AbstractType<YEvent>} type\n * @param {string|null} parentSub\n */\n\n\nconst addChangedTypeToTransaction = (transaction, type, parentSub) => {\n  const item = type._item;\n\n  if (item === null || item.id.clock < (transaction.beforeState.get(item.id.client) || 0) && !item.deleted) {\n    setIfUndefined(transaction.changed, type, create).add(parentSub);\n  }\n};\n/**\n * @param {Array<AbstractStruct>} structs\n * @param {number} pos\n */\n\n\nconst tryToMergeWithLeft = (structs, pos) => {\n  const left = structs[pos - 1];\n  const right = structs[pos];\n\n  if (left.deleted === right.deleted && left.constructor === right.constructor) {\n    if (left.mergeWith(right)) {\n      structs.splice(pos, 1);\n\n      if (right instanceof Item && right.parentSub !== null &&\n      /** @type {AbstractType<any>} */\n      right.parent._map.get(right.parentSub) === right) {\n        /** @type {AbstractType<any>} */\n        right.parent._map.set(right.parentSub,\n        /** @type {Item} */\n        left);\n      }\n    }\n  }\n};\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\n\n\nconst tryGcDeleteSet = (ds, store, gcFilter) => {\n  for (const [client, deleteItems] of ds.clients) {\n    const structs =\n    /** @type {Array<GC|Item>} */\n    store.clients.get(client);\n\n    for (let di = deleteItems.length - 1; di >= 0; di--) {\n      const deleteItem = deleteItems[di];\n      const endDeleteItemClock = deleteItem.clock + deleteItem.len;\n\n      for (let si = findIndexSS(structs, deleteItem.clock), struct = structs[si]; si < structs.length && struct.id.clock < endDeleteItemClock; struct = structs[++si]) {\n        const struct = structs[si];\n\n        if (deleteItem.clock + deleteItem.len <= struct.id.clock) {\n          break;\n        }\n\n        if (struct instanceof Item && struct.deleted && !struct.keep && gcFilter(struct)) {\n          struct.gc(store, false);\n        }\n      }\n    }\n  }\n};\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n */\n\n\nconst tryMergeDeleteSet = (ds, store) => {\n  // try to merge deleted / gc'd items\n  // merge from right to left for better efficiecy and so we don't miss any merge targets\n  for (const [client, deleteItems] of ds.clients) {\n    const structs =\n    /** @type {Array<GC|Item>} */\n    store.clients.get(client);\n\n    for (let di = deleteItems.length - 1; di >= 0; di--) {\n      const deleteItem = deleteItems[di]; // start with merging the item next to the last deleted item\n\n      const mostRightIndexToCheck = min(structs.length - 1, 1 + findIndexSS(structs, deleteItem.clock + deleteItem.len - 1));\n\n      for (let si = mostRightIndexToCheck, struct = structs[si]; si > 0 && struct.id.clock >= deleteItem.clock; struct = structs[--si]) {\n        tryToMergeWithLeft(structs, si);\n      }\n    }\n  }\n};\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\n\n\nconst tryGc = (ds, store, gcFilter) => {\n  tryGcDeleteSet(ds, store, gcFilter);\n  tryMergeDeleteSet(ds, store);\n};\n/**\n * @param {Array<Transaction>} transactionCleanups\n * @param {number} i\n */\n\n\nconst cleanupTransactions = (transactionCleanups, i) => {\n  if (i < transactionCleanups.length) {\n    const transaction = transactionCleanups[i];\n    const doc = transaction.doc;\n    const store = doc.store;\n    const ds = transaction.deleteSet;\n    const mergeStructs = transaction._mergeStructs;\n\n    try {\n      sortAndMergeDeleteSet(ds);\n      transaction.afterState = getStateVector(transaction.doc.store);\n      doc._transaction = null;\n      doc.emit('beforeObserverCalls', [transaction, doc]);\n      /**\n       * An array of event callbacks.\n       *\n       * Each callback is called even if the other ones throw errors.\n       *\n       * @type {Array<function():void>}\n       */\n\n      const fs = []; // observe events on changed types\n\n      transaction.changed.forEach((subs, itemtype) => fs.push(() => {\n        if (itemtype._item === null || !itemtype._item.deleted) {\n          itemtype._callObserver(transaction, subs);\n        }\n      }));\n      fs.push(() => {\n        // deep observe events\n        transaction.changedParentTypes.forEach((events, type) => fs.push(() => {\n          // We need to think about the possibility that the user transforms the\n          // Y.Doc in the event.\n          if (type._item === null || !type._item.deleted) {\n            events = events.filter(event => event.target._item === null || !event.target._item.deleted);\n            events.forEach(event => {\n              event.currentTarget = type;\n            }); // We don't need to check for events.length\n            // because we know it has at least one element\n\n            callEventHandlerListeners(type._dEH, events, transaction);\n          }\n        }));\n        fs.push(() => doc.emit('afterTransaction', [transaction, doc]));\n      });\n      callAll(fs, []);\n    } finally {\n      // Replace deleted items with ItemDeleted / GC.\n      // This is where content is actually remove from the Yjs Doc.\n      if (doc.gc) {\n        tryGcDeleteSet(ds, store, doc.gcFilter);\n      }\n\n      tryMergeDeleteSet(ds, store); // on all affected store.clients props, try to merge\n\n      for (const [client, clock] of transaction.afterState) {\n        const beforeClock = transaction.beforeState.get(client) || 0;\n\n        if (beforeClock !== clock) {\n          const structs =\n          /** @type {Array<GC|Item>} */\n          store.clients.get(client); // we iterate from right to left so we can safely remove entries\n\n          const firstChangePos = max(findIndexSS(structs, beforeClock), 1);\n\n          for (let i = structs.length - 1; i >= firstChangePos; i--) {\n            tryToMergeWithLeft(structs, i);\n          }\n        }\n      } // try to merge mergeStructs\n      // @todo: it makes more sense to transform mergeStructs to a DS, sort it, and merge from right to left\n      //        but at the moment DS does not handle duplicates\n\n\n      for (let i = 0; i < mergeStructs.length; i++) {\n        const {\n          client,\n          clock\n        } = mergeStructs[i].id;\n        const structs =\n        /** @type {Array<GC|Item>} */\n        store.clients.get(client);\n        const replacedStructPos = findIndexSS(structs, clock);\n\n        if (replacedStructPos + 1 < structs.length) {\n          tryToMergeWithLeft(structs, replacedStructPos + 1);\n        }\n\n        if (replacedStructPos > 0) {\n          tryToMergeWithLeft(structs, replacedStructPos);\n        }\n      }\n\n      if (!transaction.local && transaction.afterState.get(doc.clientID) !== transaction.beforeState.get(doc.clientID)) {\n        doc.clientID = generateNewClientId();\n        print(ORANGE, BOLD, '[yjs] ', UNBOLD, RED, 'Changed the client-id because another client seems to be using it.');\n      } // @todo Merge all the transactions into one and provide send the data as a single update message\n\n\n      doc.emit('afterTransactionCleanup', [transaction, doc]);\n\n      if (doc._observers.has('update')) {\n        const updateMessage = computeUpdateMessageFromTransaction(transaction);\n\n        if (updateMessage !== null) {\n          doc.emit('update', [toUint8Array(updateMessage), transaction.origin, doc]);\n        }\n      }\n\n      if (transactionCleanups.length <= i + 1) {\n        doc._transactionCleanups = [];\n      } else {\n        cleanupTransactions(transactionCleanups, i + 1);\n      }\n    }\n  }\n};\n/**\n * Implements the functionality of `y.transact(()=>{..})`\n *\n * @param {Doc} doc\n * @param {function(Transaction):void} f\n * @param {any} [origin=true]\n *\n * @function\n */\n\n\nconst transact = (doc, f, origin = null, local = true) => {\n  const transactionCleanups = doc._transactionCleanups;\n  let initialCall = false;\n\n  if (doc._transaction === null) {\n    initialCall = true;\n    doc._transaction = new Transaction(doc, origin, local);\n    transactionCleanups.push(doc._transaction);\n    doc.emit('beforeTransaction', [doc._transaction, doc]);\n  }\n\n  try {\n    f(doc._transaction);\n  } finally {\n    if (initialCall && transactionCleanups[0] === doc._transaction) {\n      // The first transaction ended, now process observer calls.\n      // Observer call may create new transactions for which we need to call the observers and do cleanup.\n      // We don't want to nest these calls, so we execute these calls one after\n      // another.\n      // Also we need to ensure that all cleanups are called, even if the\n      // observes throw errors.\n      // This file is full of hacky try {} finally {} blocks to ensure that an\n      // event can throw errors and also that the cleanup is called.\n      cleanupTransactions(transactionCleanups, 0);\n    }\n  }\n};\n\nclass StackItem {\n  /**\n   * @param {DeleteSet} ds\n   * @param {Map<number,number>} beforeState\n   * @param {Map<number,number>} afterState\n   */\n  constructor(ds, beforeState, afterState) {\n    this.ds = ds;\n    this.beforeState = beforeState;\n    this.afterState = afterState;\n    /**\n     * Use this to save and restore metadata like selection range\n     */\n\n    this.meta = new Map();\n  }\n\n}\n/**\n * @param {UndoManager} undoManager\n * @param {Array<StackItem>} stack\n * @param {string} eventType\n * @return {StackItem?}\n */\n\n\nconst popStackItem = (undoManager, stack, eventType) => {\n  /**\n   * Whether a change happened\n   * @type {StackItem?}\n   */\n  let result = null;\n  const doc = undoManager.doc;\n  const scope = undoManager.scope;\n  transact(doc, transaction => {\n    while (stack.length > 0 && result === null) {\n      const store = doc.store;\n      const stackItem =\n      /** @type {StackItem} */\n      stack.pop();\n      /**\n       * @type {Set<Item>}\n       */\n\n      const itemsToRedo = new Set();\n      /**\n       * @type {Array<Item>}\n       */\n\n      const itemsToDelete = [];\n      let performedChange = false;\n      stackItem.afterState.forEach((endClock, client) => {\n        const startClock = stackItem.beforeState.get(client) || 0;\n        const len = endClock - startClock; // @todo iterateStructs should not need the structs parameter\n\n        const structs =\n        /** @type {Array<GC|Item>} */\n        store.clients.get(client);\n\n        if (startClock !== endClock) {\n          // make sure structs don't overlap with the range of created operations [stackItem.start, stackItem.start + stackItem.end)\n          // this must be executed before deleted structs are iterated.\n          getItemCleanStart(transaction, createID(client, startClock));\n\n          if (endClock < getState(doc.store, client)) {\n            getItemCleanStart(transaction, createID(client, endClock));\n          }\n\n          iterateStructs(transaction, structs, startClock, len, struct => {\n            if (struct instanceof Item) {\n              if (struct.redone !== null) {\n                let {\n                  item,\n                  diff\n                } = followRedone(store, struct.id);\n\n                if (diff > 0) {\n                  item = getItemCleanStart(transaction, createID(item.id.client, item.id.clock + diff));\n                }\n\n                if (item.length > len) {\n                  getItemCleanStart(transaction, createID(item.id.client, endClock));\n                }\n\n                struct = item;\n              }\n\n              if (!struct.deleted && scope.some(type => isParentOf(type,\n              /** @type {Item} */\n              struct))) {\n                itemsToDelete.push(struct);\n              }\n            }\n          });\n        }\n      });\n      iterateDeletedStructs(transaction, stackItem.ds, struct => {\n        const id = struct.id;\n        const clock = id.clock;\n        const client = id.client;\n        const startClock = stackItem.beforeState.get(client) || 0;\n        const endClock = stackItem.afterState.get(client) || 0;\n\n        if (struct instanceof Item && scope.some(type => isParentOf(type, struct)) && // Never redo structs in [stackItem.start, stackItem.start + stackItem.end) because they were created and deleted in the same capture interval.\n        !(clock >= startClock && clock < endClock)) {\n          itemsToRedo.add(struct);\n        }\n      });\n      itemsToRedo.forEach(struct => {\n        performedChange = redoItem(transaction, struct, itemsToRedo) !== null || performedChange;\n      }); // We want to delete in reverse order so that children are deleted before\n      // parents, so we have more information available when items are filtered.\n\n      for (let i = itemsToDelete.length - 1; i >= 0; i--) {\n        const item = itemsToDelete[i];\n\n        if (undoManager.deleteFilter(item)) {\n          item.delete(transaction);\n          performedChange = true;\n        }\n      }\n\n      result = stackItem;\n\n      if (result != null) {\n        undoManager.emit('stack-item-popped', [{\n          stackItem: result,\n          type: eventType\n        }, undoManager]);\n      }\n    }\n  }, undoManager);\n  return result;\n};\n/**\n * @typedef {Object} UndoManagerOptions\n * @property {number} [UndoManagerOptions.captureTimeout=500]\n * @property {function(Item):boolean} [UndoManagerOptions.deleteFilter=()=>true] Sometimes\n * it is necessary to filter whan an Undo/Redo operation can delete. If this\n * filter returns false, the type/item won't be deleted even it is in the\n * undo/redo scope.\n * @property {Set<any>} [UndoManagerOptions.trackedOrigins=new Set([null])]\n */\n\n/**\n * Fires 'stack-item-added' event when a stack item was added to either the undo- or\n * the redo-stack. You may store additional stack information via the\n * metadata property on `event.stackItem.meta` (it is a `Map` of metadata properties).\n * Fires 'stack-item-popped' event when a stack item was popped from either the\n * undo- or the redo-stack. You may restore the saved stack information from `event.stackItem.meta`.\n *\n * @extends {Observable<'stack-item-added'|'stack-item-popped'>}\n */\n\n\nclass UndoManager extends Observable {\n  /**\n   * @param {AbstractType<any>|Array<AbstractType<any>>} typeScope Accepts either a single type, or an array of types\n   * @param {UndoManagerOptions} options\n   */\n  constructor(typeScope, {\n    captureTimeout,\n    deleteFilter = () => true,\n    trackedOrigins = new Set([null])\n  } = {}) {\n    if (captureTimeout == null) {\n      captureTimeout = 500;\n    }\n\n    super();\n    this.scope = typeScope instanceof Array ? typeScope : [typeScope];\n    this.deleteFilter = deleteFilter;\n    trackedOrigins.add(this);\n    this.trackedOrigins = trackedOrigins;\n    /**\n     * @type {Array<StackItem>}\n     */\n\n    this.undoStack = [];\n    /**\n     * @type {Array<StackItem>}\n     */\n\n    this.redoStack = [];\n    /**\n     * Whether the client is currently undoing (calling UndoManager.undo)\n     *\n     * @type {boolean}\n     */\n\n    this.undoing = false;\n    this.redoing = false;\n    this.doc =\n    /** @type {Doc} */\n    this.scope[0].doc;\n    this.lastChange = 0;\n    this.doc.on('afterTransaction',\n    /** @param {Transaction} transaction */\n    transaction => {\n      // Only track certain transactions\n      if (!this.scope.some(type => transaction.changedParentTypes.has(type)) || !this.trackedOrigins.has(transaction.origin) && (!transaction.origin || !this.trackedOrigins.has(transaction.origin.constructor))) {\n        return;\n      }\n\n      const undoing = this.undoing;\n      const redoing = this.redoing;\n      const stack = undoing ? this.redoStack : this.undoStack;\n\n      if (undoing) {\n        this.stopCapturing(); // next undo should not be appended to last stack item\n      } else if (!redoing) {\n        // neither undoing nor redoing: delete redoStack\n        this.redoStack = [];\n      }\n\n      const beforeState = transaction.beforeState;\n      const afterState = transaction.afterState;\n      const now = getUnixTime();\n\n      if (now - this.lastChange < captureTimeout && stack.length > 0 && !undoing && !redoing) {\n        // append change to last stack op\n        const lastOp = stack[stack.length - 1];\n        lastOp.ds = mergeDeleteSets([lastOp.ds, transaction.deleteSet]);\n        lastOp.afterState = afterState;\n      } else {\n        // create a new stack op\n        stack.push(new StackItem(transaction.deleteSet, beforeState, afterState));\n      }\n\n      if (!undoing && !redoing) {\n        this.lastChange = now;\n      } // make sure that deleted structs are not gc'd\n\n\n      iterateDeletedStructs(transaction, transaction.deleteSet,\n      /** @param {Item|GC} item */\n      item => {\n        if (item instanceof Item && this.scope.some(type => isParentOf(type, item))) {\n          keepItem(item, true);\n        }\n      });\n      this.emit('stack-item-added', [{\n        stackItem: stack[stack.length - 1],\n        origin: transaction.origin,\n        type: undoing ? 'redo' : 'undo'\n      }, this]);\n    });\n  }\n\n  clear() {\n    this.doc.transact(transaction => {\n      /**\n       * @param {StackItem} stackItem\n       */\n      const clearItem = stackItem => {\n        iterateDeletedStructs(transaction, stackItem.ds, item => {\n          if (item instanceof Item && this.scope.some(type => isParentOf(type, item))) {\n            keepItem(item, false);\n          }\n        });\n      };\n\n      this.undoStack.forEach(clearItem);\n      this.redoStack.forEach(clearItem);\n    });\n    this.undoStack = [];\n    this.redoStack = [];\n  }\n  /**\n   * UndoManager merges Undo-StackItem if they are created within time-gap\n   * smaller than `options.captureTimeout`. Call `um.stopCapturing()` so that the next\n   * StackItem won't be merged.\n   *\n   *\n   * @example\n   *     // without stopCapturing\n   *     ytext.insert(0, 'a')\n   *     ytext.insert(1, 'b')\n   *     um.undo()\n   *     ytext.toString() // => '' (note that 'ab' was removed)\n   *     // with stopCapturing\n   *     ytext.insert(0, 'a')\n   *     um.stopCapturing()\n   *     ytext.insert(0, 'b')\n   *     um.undo()\n   *     ytext.toString() // => 'a' (note that only 'b' was removed)\n   *\n   */\n\n\n  stopCapturing() {\n    this.lastChange = 0;\n  }\n  /**\n   * Undo last changes on type.\n   *\n   * @return {StackItem?} Returns StackItem if a change was applied\n   */\n\n\n  undo() {\n    this.undoing = true;\n    let res;\n\n    try {\n      res = popStackItem(this, this.undoStack, 'undo');\n    } finally {\n      this.undoing = false;\n    }\n\n    return res;\n  }\n  /**\n   * Redo last undo operation.\n   *\n   * @return {StackItem?} Returns StackItem if a change was applied\n   */\n\n\n  redo() {\n    this.redoing = true;\n    let res;\n\n    try {\n      res = popStackItem(this, this.redoStack, 'redo');\n    } finally {\n      this.redoing = false;\n    }\n\n    return res;\n  }\n\n}\n/**\n * YEvent describes the changes on a YType.\n */\n\n\nclass YEvent {\n  /**\n   * @param {AbstractType<any>} target The changed type.\n   * @param {Transaction} transaction\n   */\n  constructor(target, transaction) {\n    /**\n     * The type on which this event was created on.\n     * @type {AbstractType<any>}\n     */\n    this.target = target;\n    /**\n     * The current target on which the observe callback is called.\n     * @type {AbstractType<any>}\n     */\n\n    this.currentTarget = target;\n    /**\n     * The transaction that triggered this event.\n     * @type {Transaction}\n     */\n\n    this.transaction = transaction;\n    /**\n     * @type {Object|null}\n     */\n\n    this._changes = null;\n  }\n  /**\n   * Computes the path from `y` to the changed type.\n   *\n   * The following property holds:\n   * @example\n   *   let type = y\n   *   event.path.forEach(dir => {\n   *     type = type.get(dir)\n   *   })\n   *   type === event.target // => true\n   */\n\n\n  get path() {\n    // @ts-ignore _item is defined because target is integrated\n    return getPathTo(this.currentTarget, this.target);\n  }\n  /**\n   * Check if a struct is deleted by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */\n\n\n  deletes(struct) {\n    return isDeleted(this.transaction.deleteSet, struct.id);\n  }\n  /**\n   * Check if a struct is added by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */\n\n\n  adds(struct) {\n    return struct.id.clock >= (this.transaction.beforeState.get(struct.id.client) || 0);\n  }\n  /**\n   * @return {{added:Set<Item>,deleted:Set<Item>,delta:Array<{insert:Array<any>}|{delete:number}|{retain:number}>}}\n   */\n\n\n  get changes() {\n    let changes = this._changes;\n\n    if (changes === null) {\n      const target = this.target;\n      const added = create();\n      const deleted = create();\n      /**\n       * @type {Array<{insert:Array<any>}|{delete:number}|{retain:number}>}\n       */\n\n      const delta = [];\n      /**\n       * @type {Map<string,{ action: 'add' | 'update' | 'delete', oldValue: any}>}\n       */\n\n      const keys = new Map();\n      changes = {\n        added,\n        deleted,\n        delta,\n        keys\n      };\n      const changed =\n      /** @type Set<string|null> */\n      this.transaction.changed.get(target);\n\n      if (changed.has(null)) {\n        /**\n         * @type {any}\n         */\n        let lastOp = null;\n\n        const packOp = () => {\n          if (lastOp) {\n            delta.push(lastOp);\n          }\n        };\n\n        for (let item = target._start; item !== null; item = item.right) {\n          if (item.deleted) {\n            if (this.deletes(item) && !this.adds(item)) {\n              if (lastOp === null || lastOp.delete === undefined) {\n                packOp();\n                lastOp = {\n                  delete: 0\n                };\n              }\n\n              lastOp.delete += item.length;\n              deleted.add(item);\n            } // else nop\n\n          } else {\n            if (this.adds(item)) {\n              if (lastOp === null || lastOp.insert === undefined) {\n                packOp();\n                lastOp = {\n                  insert: []\n                };\n              }\n\n              lastOp.insert = lastOp.insert.concat(item.content.getContent());\n              added.add(item);\n            } else {\n              if (lastOp === null || lastOp.retain === undefined) {\n                packOp();\n                lastOp = {\n                  retain: 0\n                };\n              }\n\n              lastOp.retain += item.length;\n            }\n          }\n        }\n\n        if (lastOp !== null && lastOp.retain === undefined) {\n          packOp();\n        }\n      }\n\n      changed.forEach(key => {\n        if (key !== null) {\n          const item =\n          /** @type {Item} */\n          target._map.get(key);\n          /**\n           * @type {'delete' | 'add' | 'update'}\n           */\n\n\n          let action;\n          let oldValue;\n\n          if (this.adds(item)) {\n            let prev = item.left;\n\n            while (prev !== null && this.adds(prev)) {\n              prev = prev.left;\n            }\n\n            if (this.deletes(item)) {\n              if (prev !== null && this.deletes(prev)) {\n                action = 'delete';\n                oldValue = last(prev.content.getContent());\n              } else {\n                return;\n              }\n            } else {\n              if (prev !== null && this.deletes(prev)) {\n                action = 'update';\n                oldValue = last(prev.content.getContent());\n              } else {\n                action = 'add';\n                oldValue = undefined;\n              }\n            }\n          } else {\n            if (this.deletes(item)) {\n              action = 'delete';\n              oldValue = last(\n              /** @type {Item} */\n              item.content.getContent());\n            } else {\n              return; // nop\n            }\n          }\n\n          keys.set(key, {\n            action,\n            oldValue\n          });\n        }\n      });\n      this._changes = changes;\n    }\n\n    return (\n      /** @type {any} */\n      changes\n    );\n  }\n\n}\n/**\n * Compute the path from this type to the specified target.\n *\n * @example\n *   // `child` should be accessible via `type.get(path[0]).get(path[1])..`\n *   const path = type.getPathTo(child)\n *   // assuming `type instanceof YArray`\n *   console.log(path) // might look like => [2, 'key1']\n *   child === type.get(path[0]).get(path[1])\n *\n * @param {AbstractType<any>} parent\n * @param {AbstractType<any>} child target\n * @return {Array<string|number>} Path to the target\n *\n * @private\n * @function\n */\n\n\nconst getPathTo = (parent, child) => {\n  const path = [];\n\n  while (child._item !== null && child !== parent) {\n    if (child._item.parentSub !== null) {\n      // parent is map-ish\n      path.unshift(child._item.parentSub);\n    } else {\n      // parent is array-ish\n      let i = 0;\n      let c =\n      /** @type {AbstractType<any>} */\n      child._item.parent._start;\n\n      while (c !== child._item && c !== null) {\n        if (!c.deleted) {\n          i++;\n        }\n\n        c = c.right;\n      }\n\n      path.unshift(i);\n    }\n\n    child =\n    /** @type {AbstractType<any>} */\n    child._item.parent;\n  }\n\n  return path;\n};\n/**\n * Accumulate all (list) children of a type and return them as an Array.\n *\n * @param {AbstractType<any>} t\n * @return {Array<Item>}\n */\n\n\nconst getTypeChildren = t => {\n  let s = t._start;\n  const arr = [];\n\n  while (s) {\n    arr.push(s);\n    s = s.right;\n  }\n\n  return arr;\n};\n/**\n * Call event listeners with an event. This will also add an event to all\n * parents (for `.observeDeep` handlers).\n *\n * @template EventType\n * @param {AbstractType<EventType>} type\n * @param {Transaction} transaction\n * @param {EventType} event\n */\n\n\nconst callTypeObservers = (type, transaction, event) => {\n  const changedType = type;\n  const changedParentTypes = transaction.changedParentTypes;\n\n  while (true) {\n    // @ts-ignore\n    setIfUndefined(changedParentTypes, type, () => []).push(event);\n\n    if (type._item === null) {\n      break;\n    }\n\n    type =\n    /** @type {AbstractType<any>} */\n    type._item.parent;\n  }\n\n  callEventHandlerListeners(changedType._eH, event, transaction);\n};\n/**\n * @template EventType\n * Abstract Yjs Type class\n */\n\n\nclass AbstractType {\n  constructor() {\n    /**\n     * @type {Item|null}\n     */\n    this._item = null;\n    /**\n     * @type {Map<string,Item>}\n     */\n\n    this._map = new Map();\n    /**\n     * @type {Item|null}\n     */\n\n    this._start = null;\n    /**\n     * @type {Doc|null}\n     */\n\n    this.doc = null;\n    this._length = 0;\n    /**\n     * Event handlers\n     * @type {EventHandler<EventType,Transaction>}\n     */\n\n    this._eH = createEventHandler();\n    /**\n     * Deep event handlers\n     * @type {EventHandler<Array<YEvent>,Transaction>}\n     */\n\n    this._dEH = createEventHandler();\n  }\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item|null} item\n   */\n\n\n  _integrate(y, item) {\n    this.doc = y;\n    this._item = item;\n  }\n  /**\n   * @return {AbstractType<EventType>}\n   */\n\n\n  _copy() {\n    throw methodUnimplemented();\n  }\n  /**\n   * @param {encoding.Encoder} encoder\n   */\n\n\n  _write(encoder) {}\n  /**\n   * The first non-deleted item\n   */\n\n\n  get _first() {\n    let n = this._start;\n\n    while (n !== null && n.deleted) {\n      n = n.right;\n    }\n\n    return n;\n  }\n  /**\n   * Creates YEvent and calls all type observers.\n   * Must be implemented by each type.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n\n\n  _callObserver(transaction, parentSubs) {}\n  /* skip if no type is specified */\n\n  /**\n   * Observe all events that are created on this type.\n   *\n   * @param {function(EventType, Transaction):void} f Observer function\n   */\n\n\n  observe(f) {\n    addEventHandlerListener(this._eH, f);\n  }\n  /**\n   * Observe all events that are created by this type and its children.\n   *\n   * @param {function(Array<YEvent>,Transaction):void} f Observer function\n   */\n\n\n  observeDeep(f) {\n    addEventHandlerListener(this._dEH, f);\n  }\n  /**\n   * Unregister an observer function.\n   *\n   * @param {function(EventType,Transaction):void} f Observer function\n   */\n\n\n  unobserve(f) {\n    removeEventHandlerListener(this._eH, f);\n  }\n  /**\n   * Unregister an observer function.\n   *\n   * @param {function(Array<YEvent>,Transaction):void} f Observer function\n   */\n\n\n  unobserveDeep(f) {\n    removeEventHandlerListener(this._dEH, f);\n  }\n  /**\n   * @abstract\n   * @return {any}\n   */\n\n\n  toJSON() {}\n\n}\n/**\n * @param {AbstractType<any>} type\n * @return {Array<any>}\n *\n * @private\n * @function\n */\n\n\nconst typeListToArray = type => {\n  const cs = [];\n  let n = type._start;\n\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent();\n\n      for (let i = 0; i < c.length; i++) {\n        cs.push(c[i]);\n      }\n    }\n\n    n = n.right;\n  }\n\n  return cs;\n};\n/**\n * @param {AbstractType<any>} type\n * @param {Snapshot} snapshot\n * @return {Array<any>}\n *\n * @private\n * @function\n */\n\n\nconst typeListToArraySnapshot = (type, snapshot) => {\n  const cs = [];\n  let n = type._start;\n\n  while (n !== null) {\n    if (n.countable && isVisible(n, snapshot)) {\n      const c = n.content.getContent();\n\n      for (let i = 0; i < c.length; i++) {\n        cs.push(c[i]);\n      }\n    }\n\n    n = n.right;\n  }\n\n  return cs;\n};\n/**\n * Executes a provided function on once on overy element of this YArray.\n *\n * @param {AbstractType<any>} type\n * @param {function(any,number,any):void} f A function to execute on every element of this YArray.\n *\n * @private\n * @function\n */\n\n\nconst typeListForEach = (type, f) => {\n  let index = 0;\n  let n = type._start;\n\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent();\n\n      for (let i = 0; i < c.length; i++) {\n        f(c[i], index++, type);\n      }\n    }\n\n    n = n.right;\n  }\n};\n/**\n * @template C,R\n * @param {AbstractType<any>} type\n * @param {function(C,number,AbstractType<any>):R} f\n * @return {Array<R>}\n *\n * @private\n * @function\n */\n\n\nconst typeListMap = (type, f) => {\n  /**\n   * @type {Array<any>}\n   */\n  const result = [];\n  typeListForEach(type, (c, i) => {\n    result.push(f(c, i, type));\n  });\n  return result;\n};\n/**\n * @param {AbstractType<any>} type\n * @return {IterableIterator<any>}\n *\n * @private\n * @function\n */\n\n\nconst typeListCreateIterator = type => {\n  let n = type._start;\n  /**\n   * @type {Array<any>|null}\n   */\n\n  let currentContent = null;\n  let currentContentIndex = 0;\n  return {\n    [Symbol.iterator]() {\n      return this;\n    },\n\n    next: () => {\n      // find some content\n      if (currentContent === null) {\n        while (n !== null && n.deleted) {\n          n = n.right;\n        } // check if we reached the end, no need to check currentContent, because it does not exist\n\n\n        if (n === null) {\n          return {\n            done: true,\n            value: undefined\n          };\n        } // we found n, so we can set currentContent\n\n\n        currentContent = n.content.getContent();\n        currentContentIndex = 0;\n        n = n.right; // we used the content of n, now iterate to next\n      }\n\n      const value = currentContent[currentContentIndex++]; // check if we need to empty currentContent\n\n      if (currentContent.length <= currentContentIndex) {\n        currentContent = null;\n      }\n\n      return {\n        done: false,\n        value\n      };\n    }\n  };\n};\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @return {any}\n *\n * @private\n * @function\n */\n\n\nconst typeListGet = (type, index) => {\n  for (let n = type._start; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        return n.content.getContent()[index];\n      }\n\n      index -= n.length;\n    }\n  }\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {Item?} referenceItem\n * @param {Array<Object<string,any>|Array<any>|boolean|number|string|Uint8Array>} content\n *\n * @private\n * @function\n */\n\n\nconst typeListInsertGenericsAfter = (transaction, parent, referenceItem, content) => {\n  let left = referenceItem;\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  const store = doc.store;\n  const right = referenceItem === null ? parent._start : referenceItem.right;\n  /**\n   * @type {Array<Object|Array<any>|number>}\n   */\n\n  let jsonContent = [];\n\n  const packJsonContent = () => {\n    if (jsonContent.length > 0) {\n      left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentAny(jsonContent));\n      left.integrate(transaction, 0);\n      jsonContent = [];\n    }\n  };\n\n  content.forEach(c => {\n    switch (c.constructor) {\n      case Number:\n      case Object:\n      case Boolean:\n      case Array:\n      case String:\n        jsonContent.push(c);\n        break;\n\n      default:\n        packJsonContent();\n\n        switch (c.constructor) {\n          case Uint8Array:\n          case ArrayBuffer:\n            left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentBinary(new Uint8Array(\n            /** @type {Uint8Array} */\n            c)));\n            left.integrate(transaction, 0);\n            break;\n\n          default:\n            if (c instanceof AbstractType) {\n              left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentType(c));\n              left.integrate(transaction, 0);\n            } else {\n              throw new Error('Unexpected content type in insert operation');\n            }\n\n        }\n\n    }\n  });\n  packJsonContent();\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {Array<Object<string,any>|Array<any>|number|string|Uint8Array>} content\n *\n * @private\n * @function\n */\n\n\nconst typeListInsertGenerics = (transaction, parent, index, content) => {\n  if (index === 0) {\n    return typeListInsertGenericsAfter(transaction, parent, null, content);\n  }\n\n  let n = parent._start;\n\n  for (; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index <= n.length) {\n        if (index < n.length) {\n          // insert in-between\n          getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index));\n        }\n\n        break;\n      }\n\n      index -= n.length;\n    }\n  }\n\n  return typeListInsertGenericsAfter(transaction, parent, n, content);\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {number} length\n *\n * @private\n * @function\n */\n\n\nconst typeListDelete = (transaction, parent, index, length) => {\n  if (length === 0) {\n    return;\n  }\n\n  let n = parent._start; // compute the first item to be deleted\n\n  for (; n !== null && index > 0; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index));\n      }\n\n      index -= n.length;\n    }\n  } // delete all items until done\n\n\n  while (length > 0 && n !== null) {\n    if (!n.deleted) {\n      if (length < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + length));\n      }\n\n      n.delete(transaction);\n      length -= n.length;\n    }\n\n    n = n.right;\n  }\n\n  if (length > 0) {\n    throw create$1('array length exceeded');\n  }\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n *\n * @private\n * @function\n */\n\n\nconst typeMapDelete = (transaction, parent, key) => {\n  const c = parent._map.get(key);\n\n  if (c !== undefined) {\n    c.delete(transaction);\n  }\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Object|number|Array<any>|string|Uint8Array|AbstractType<any>} value\n *\n * @private\n * @function\n */\n\n\nconst typeMapSet = (transaction, parent, key, value) => {\n  const left = parent._map.get(key) || null;\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  let content;\n\n  if (value == null) {\n    content = new ContentAny([value]);\n  } else {\n    switch (value.constructor) {\n      case Number:\n      case Object:\n      case Boolean:\n      case Array:\n      case String:\n        content = new ContentAny([value]);\n        break;\n\n      case Uint8Array:\n        content = new ContentBinary(\n        /** @type {Uint8Array} */\n        value);\n        break;\n\n      default:\n        if (value instanceof AbstractType) {\n          content = new ContentType(value);\n        } else {\n          throw new Error('Unexpected content type');\n        }\n\n    }\n  }\n\n  new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, null, null, parent, key, content).integrate(transaction, 0);\n};\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {Object<string,any>|number|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\n\n\nconst typeMapGet = (parent, key) => {\n  const val = parent._map.get(key);\n\n  return val !== undefined && !val.deleted ? val.content.getContent()[val.length - 1] : undefined;\n};\n/**\n * @param {AbstractType<any>} parent\n * @return {Object<string,Object<string,any>|number|Array<any>|string|Uint8Array|AbstractType<any>|undefined>}\n *\n * @private\n * @function\n */\n\n\nconst typeMapGetAll = parent => {\n  /**\n   * @type {Object<string,any>}\n   */\n  const res = {};\n\n  for (const [key, value] of parent._map) {\n    if (!value.deleted) {\n      res[key] = value.content.getContent()[value.length - 1];\n    }\n  }\n\n  return res;\n};\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {boolean}\n *\n * @private\n * @function\n */\n\n\nconst typeMapHas = (parent, key) => {\n  const val = parent._map.get(key);\n\n  return val !== undefined && !val.deleted;\n};\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Snapshot} snapshot\n * @return {Object<string,any>|number|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\n\n\nconst typeMapGetSnapshot = (parent, key, snapshot) => {\n  let v = parent._map.get(key) || null;\n\n  while (v !== null && (!snapshot.sv.has(v.id.client) || v.id.clock >= (snapshot.sv.get(v.id.client) || 0))) {\n    v = v.left;\n  }\n\n  return v !== null && isVisible(v, snapshot) ? v.content.getContent()[v.length - 1] : undefined;\n};\n/**\n * @param {Map<string,Item>} map\n * @return {IterableIterator<Array<any>>}\n *\n * @private\n * @function\n */\n\n\nconst createMapIterator = map => iteratorFilter(map.entries(),\n/** @param {any} entry */\nentry => !entry[1].deleted);\n/**\n * @module YArray\n */\n\n/**\n * Event that describes the changes on a YArray\n * @template T\n */\n\n\nclass YArrayEvent extends YEvent {\n  /**\n   * @param {YArray<T>} yarray The changed type\n   * @param {Transaction} transaction The transaction object\n   */\n  constructor(yarray, transaction) {\n    super(yarray, transaction);\n    this._transaction = transaction;\n  }\n\n}\n/**\n * A shared Array implementation.\n * @template T\n * @extends AbstractType<YArrayEvent<T>>\n * @implements {Iterable<T>}\n */\n\n\nclass YArray extends AbstractType {\n  constructor() {\n    super();\n    /**\n     * @type {Array<any>?}\n     * @private\n     */\n\n    this._prelimContent = [];\n  }\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n\n\n  _integrate(y, item) {\n    super._integrate(y, item);\n\n    this.insert(0,\n    /** @type {Array<any>} */\n    this._prelimContent);\n    this._prelimContent = null;\n  }\n\n  _copy() {\n    return new YArray();\n  }\n\n  get length() {\n    return this._prelimContent === null ? this._length : this._prelimContent.length;\n  }\n  /**\n   * Creates YArrayEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n\n\n  _callObserver(transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YArrayEvent(this, transaction));\n  }\n  /**\n   * Inserts new content at an index.\n   *\n   * Important: This function expects an array of content. Not just a content\n   * object. The reason for this \"weirdness\" is that inserting several elements\n   * is very efficient when it is done as a single operation.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  yarray.insert(0, ['a'])\n   *  // Insert numbers 1, 2 at position 1\n   *  yarray.insert(1, [1, 2])\n   *\n   * @param {number} index The index to insert content at.\n   * @param {Array<T>} content The array of content\n   */\n\n\n  insert(index, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListInsertGenerics(transaction, this, index, content);\n      });\n    } else {\n      /** @type {Array<any>} */\n      this._prelimContent.splice(index, 0, ...content);\n    }\n  }\n  /**\n   * Appends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to append.\n   */\n\n\n  push(content) {\n    this.insert(this.length, content);\n  }\n  /**\n   * Preppends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to preppend.\n   */\n\n\n  unshift(content) {\n    this.insert(0, content);\n  }\n  /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} length The number of elements to remove. Defaults to 1.\n   */\n\n\n  delete(index, length = 1) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListDelete(transaction, this, index, length);\n      });\n    } else {\n      /** @type {Array<any>} */\n      this._prelimContent.splice(index, length);\n    }\n  }\n  /**\n   * Returns the i-th element from a YArray.\n   *\n   * @param {number} index The index of the element to return from the YArray\n   * @return {T}\n   */\n\n\n  get(index) {\n    return typeListGet(this, index);\n  }\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<T>}\n   */\n\n\n  toArray() {\n    return typeListToArray(this);\n  }\n  /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Array<any>}\n   */\n\n\n  toJSON() {\n    return this.map(c => c instanceof AbstractType ? c.toJSON() : c);\n  }\n  /**\n   * Returns an Array with the result of calling a provided function on every\n   * element of this YArray.\n   *\n   * @template T,M\n   * @param {function(T,number,YArray<T>):M} f Function that produces an element of the new Array\n   * @return {Array<M>} A new array with each element being the result of the\n   *                 callback function\n   */\n\n\n  map(f) {\n    return typeListMap(this,\n    /** @type {any} */\n    f);\n  }\n  /**\n   * Executes a provided function on once on overy element of this YArray.\n   *\n   * @param {function(T,number,YArray<T>):void} f A function to execute on every element of this YArray.\n   */\n\n\n  forEach(f) {\n    typeListForEach(this, f);\n  }\n  /**\n   * @return {IterableIterator<T>}\n   */\n\n\n  [Symbol.iterator]() {\n    return typeListCreateIterator(this);\n  }\n  /**\n   * @param {encoding.Encoder} encoder\n   */\n\n\n  _write(encoder) {\n    writeVarUint(encoder, YArrayRefID);\n  }\n\n}\n/**\n * @param {decoding.Decoder} decoder\n *\n * @private\n * @function\n */\n\n\nconst readYArray = decoder => new YArray();\n/**\n * @template T\n * Event that describes the changes on a YMap.\n */\n\n\nclass YMapEvent extends YEvent {\n  /**\n   * @param {YMap<T>} ymap The YArray that changed.\n   * @param {Transaction} transaction\n   * @param {Set<any>} subs The keys that changed.\n   */\n  constructor(ymap, transaction, subs) {\n    super(ymap, transaction);\n    this.keysChanged = subs;\n  }\n\n}\n/**\n * @template T number|string|Object|Array|Uint8Array\n * A shared Map implementation.\n *\n * @extends AbstractType<YMapEvent<T>>\n * @implements {Iterable<T>}\n */\n\n\nclass YMap extends AbstractType {\n  /**\n   *\n   * @param {Iterable<readonly [string, any]>=} entries - an optional iterable to initialize the YMap\n   */\n  constructor(entries) {\n    super();\n    /**\n     * @type {Map<string,any>?}\n     * @private\n     */\n\n    this._prelimContent = null;\n\n    if (entries === undefined) {\n      this._prelimContent = new Map();\n    } else {\n      this._prelimContent = new Map(entries);\n    }\n  }\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n\n\n  _integrate(y, item) {\n    super._integrate(y, item);\n\n    for (const [key, value] of\n    /** @type {Map<string, any>} */\n    this._prelimContent) {\n      this.set(key, value);\n    }\n\n    this._prelimContent = null;\n  }\n\n  _copy() {\n    return new YMap();\n  }\n  /**\n   * Creates YMapEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n\n\n  _callObserver(transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YMapEvent(this, transaction, parentSubs));\n  }\n  /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Object<string,T>}\n   */\n\n\n  toJSON() {\n    /**\n     * @type {Object<string,T>}\n     */\n    const map = {};\n\n    for (const [key, item] of this._map) {\n      if (!item.deleted) {\n        const v = item.content.getContent()[item.length - 1];\n        map[key] = v instanceof AbstractType ? v.toJSON() : v;\n      }\n    }\n\n    return map;\n  }\n  /**\n   * Returns the size of the YMap (count of key/value pairs)\n   *\n   * @return {number}\n   */\n\n\n  get size() {\n    return [...createMapIterator(this._map)].length;\n  }\n  /**\n   * Returns the keys for each element in the YMap Type.\n   *\n   * @return {IterableIterator<string>}\n   */\n\n\n  keys() {\n    return iteratorMap(createMapIterator(this._map),\n    /** @param {any} v */\n    v => v[0]);\n  }\n  /**\n   * Returns the keys for each element in the YMap Type.\n   *\n   * @return {IterableIterator<string>}\n   */\n\n\n  values() {\n    return iteratorMap(createMapIterator(this._map),\n    /** @param {any} v */\n    v => v[1].content.getContent()[v[1].length - 1]);\n  }\n  /**\n   * Returns an Iterator of [key, value] pairs\n   *\n   * @return {IterableIterator<any>}\n   */\n\n\n  entries() {\n    return iteratorMap(createMapIterator(this._map),\n    /** @param {any} v */\n    v => [v[0], v[1].content.getContent()[v[1].length - 1]]);\n  }\n  /**\n   * Executes a provided function on once on every key-value pair.\n   *\n   * @param {function(T,string,YMap<T>):void} f A function to execute on every element of this YArray.\n   */\n\n\n  forEach(f) {\n    /**\n     * @type {Object<string,T>}\n     */\n    const map = {};\n\n    for (const [key, item] of this._map) {\n      if (!item.deleted) {\n        f(item.content.getContent()[item.length - 1], key, this);\n      }\n    }\n\n    return map;\n  }\n  /**\n   * @return {IterableIterator<T>}\n   */\n\n\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n  /**\n   * Remove a specified element from this YMap.\n   *\n   * @param {string} key The key of the element to remove.\n   */\n\n\n  delete(key) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, key);\n      });\n    } else {\n      /** @type {Map<string, any>} */\n      this._prelimContent.delete(key);\n    }\n  }\n  /**\n   * Adds or updates an element with a specified key and value.\n   *\n   * @param {string} key The key of the element to add to this YMap\n   * @param {T} value The value of the element to add\n   */\n\n\n  set(key, value) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, key, value);\n      });\n    } else {\n      /** @type {Map<string, any>} */\n      this._prelimContent.set(key, value);\n    }\n\n    return value;\n  }\n  /**\n   * Returns a specified element from this YMap.\n   *\n   * @param {string} key\n   * @return {T|undefined}\n   */\n\n\n  get(key) {\n    return (\n      /** @type {any} */\n      typeMapGet(this, key)\n    );\n  }\n  /**\n   * Returns a boolean indicating whether the specified key exists or not.\n   *\n   * @param {string} key The key to test.\n   * @return {boolean}\n   */\n\n\n  has(key) {\n    return typeMapHas(this, key);\n  }\n  /**\n   * @param {encoding.Encoder} encoder\n   */\n\n\n  _write(encoder) {\n    writeVarUint(encoder, YMapRefID);\n  }\n\n}\n/**\n * @param {decoding.Decoder} decoder\n *\n * @private\n * @function\n */\n\n\nconst readYMap = decoder => new YMap();\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\n\n\nconst equalAttrs = (a, b) => a === b || typeof a === 'object' && typeof b === 'object' && a && b && equalFlat(a, b);\n\nclass ItemListPosition {\n  /**\n   * @param {Item|null} left\n   * @param {Item|null} right\n   */\n  constructor(left, right) {\n    this.left = left;\n    this.right = right;\n  }\n\n}\n\nclass ItemTextListPosition extends ItemListPosition {\n  /**\n   * @param {Item|null} left\n   * @param {Item|null} right\n   * @param {Map<string,any>} currentAttributes\n   */\n  constructor(left, right, currentAttributes) {\n    super(left, right);\n    this.currentAttributes = currentAttributes;\n  }\n\n}\n/**\n * @param {Transaction} transaction\n * @param {Map<string,any>} currentAttributes\n * @param {Item|null} left\n * @param {Item|null} right\n * @param {number} count\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\n\n\nconst findNextPosition = (transaction, currentAttributes, left, right, count) => {\n  while (right !== null && count > 0) {\n    switch (right.content.constructor) {\n      case ContentEmbed:\n      case ContentString:\n        if (!right.deleted) {\n          if (count < right.length) {\n            // split right\n            getItemCleanStart(transaction, createID(right.id.client, right.id.clock + count));\n          }\n\n          count -= right.length;\n        }\n\n        break;\n\n      case ContentFormat:\n        if (!right.deleted) {\n          updateCurrentAttributes(currentAttributes,\n          /** @type {ContentFormat} */\n          right.content);\n        }\n\n        break;\n    }\n\n    left = right;\n    right = right.right;\n  }\n\n  return new ItemTextListPosition(left, right, currentAttributes);\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\n\n\nconst findPosition = (transaction, parent, index) => {\n  const currentAttributes = new Map();\n  const right = parent._start;\n  return findNextPosition(transaction, currentAttributes, null, right, index);\n};\n/**\n * Negate applied formats\n *\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemListPosition} currPos\n * @param {Map<string,any>} negatedAttributes\n *\n * @private\n * @function\n */\n\n\nconst insertNegatedAttributes = (transaction, parent, currPos, negatedAttributes) => {\n  let {\n    left,\n    right\n  } = currPos; // check if we really need to remove attributes\n\n  while (right !== null && (right.deleted === true || right.content.constructor === ContentFormat && equalAttrs(negatedAttributes.get(\n  /** @type {ContentFormat} */\n  right.content.key),\n  /** @type {ContentFormat} */\n  right.content.value))) {\n    if (!right.deleted) {\n      negatedAttributes.delete(\n      /** @type {ContentFormat} */\n      right.content.key);\n    }\n\n    left = right;\n    right = right.right;\n  }\n\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n\n  for (const [key, val] of negatedAttributes) {\n    left = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val));\n    left.integrate(transaction, 0);\n  }\n\n  currPos.left = left;\n  currPos.right = right;\n};\n/**\n * @param {Map<string,any>} currentAttributes\n * @param {ContentFormat} format\n *\n * @private\n * @function\n */\n\n\nconst updateCurrentAttributes = (currentAttributes, format) => {\n  const {\n    key,\n    value\n  } = format;\n\n  if (value === null) {\n    currentAttributes.delete(key);\n  } else {\n    currentAttributes.set(key, value);\n  }\n};\n/**\n * @param {ItemListPosition} currPos\n * @param {Map<string,any>} currentAttributes\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\n\n\nconst minimizeAttributeChanges = (currPos, currentAttributes, attributes) => {\n  // go right while attributes[right.key] === right.value (or right is deleted)\n  let {\n    left,\n    right\n  } = currPos;\n\n  while (true) {\n    if (right === null) {\n      break;\n    } else if (right.deleted) ;else if (right.content.constructor === ContentFormat && equalAttrs(attributes[\n    /** @type {ContentFormat} */\n    right.content.key] || null,\n    /** @type {ContentFormat} */\n    right.content.value)) {\n      // found a format, update currentAttributes and continue\n      updateCurrentAttributes(currentAttributes,\n      /** @type {ContentFormat} */\n      right.content);\n    } else {\n      break;\n    }\n\n    left = right;\n    right = right.right;\n  }\n\n  currPos.left = left;\n  currPos.right = right;\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemListPosition} currPos\n * @param {Map<string,any>} currentAttributes\n * @param {Object<string,any>} attributes\n * @return {Map<string,any>}\n *\n * @private\n * @function\n **/\n\n\nconst insertAttributes = (transaction, parent, currPos, currentAttributes, attributes) => {\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  const negatedAttributes = new Map(); // insert format-start items\n\n  for (const key in attributes) {\n    const val = attributes[key];\n    const currentVal = currentAttributes.get(key) || null;\n\n    if (!equalAttrs(currentVal, val)) {\n      // save negated attribute (set null if currentVal undefined)\n      negatedAttributes.set(key, currentVal);\n      const {\n        left,\n        right\n      } = currPos;\n      currPos.left = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val));\n      currPos.left.integrate(transaction, 0);\n    }\n  }\n\n  return negatedAttributes;\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemListPosition} currPos\n * @param {Map<string,any>} currentAttributes\n * @param {string|object} text\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n **/\n\n\nconst insertText = (transaction, parent, currPos, currentAttributes, text, attributes) => {\n  for (const [key] of currentAttributes) {\n    if (attributes[key] === undefined) {\n      attributes[key] = null;\n    }\n  }\n\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  minimizeAttributeChanges(currPos, currentAttributes, attributes);\n  const negatedAttributes = insertAttributes(transaction, parent, currPos, currentAttributes, attributes); // insert content\n\n  const content = text.constructor === String ? new ContentString(\n  /** @type {string} */\n  text) : new ContentEmbed(text);\n  const {\n    left,\n    right\n  } = currPos;\n  currPos.left = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, content);\n  currPos.left.integrate(transaction, 0);\n  return insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);\n};\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemListPosition} currPos\n * @param {Map<string,any>} currentAttributes\n * @param {number} length\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\n\n\nconst formatText = (transaction, parent, currPos, currentAttributes, length, attributes) => {\n  const doc = transaction.doc;\n  const ownClientId = doc.clientID;\n  minimizeAttributeChanges(currPos, currentAttributes, attributes);\n  const negatedAttributes = insertAttributes(transaction, parent, currPos, currentAttributes, attributes);\n  let {\n    left,\n    right\n  } = currPos; // iterate until first non-format or null is found\n  // delete all formats with attributes[format.key] != null\n\n  while (length > 0 && right !== null) {\n    if (!right.deleted) {\n      switch (right.content.constructor) {\n        case ContentFormat:\n          {\n            const {\n              key,\n              value\n            } =\n            /** @type {ContentFormat} */\n            right.content;\n            const attr = attributes[key];\n\n            if (attr !== undefined) {\n              if (equalAttrs(attr, value)) {\n                negatedAttributes.delete(key);\n              } else {\n                negatedAttributes.set(key, value);\n              }\n\n              right.delete(transaction);\n            }\n\n            updateCurrentAttributes(currentAttributes,\n            /** @type {ContentFormat} */\n            right.content);\n            break;\n          }\n\n        case ContentEmbed:\n        case ContentString:\n          if (length < right.length) {\n            getItemCleanStart(transaction, createID(right.id.client, right.id.clock + length));\n          }\n\n          length -= right.length;\n          break;\n      }\n    }\n\n    left = right;\n    right = right.right;\n  } // Quill just assumes that the editor starts with a newline and that it always\n  // ends with a newline. We only insert that newline when a new newline is\n  // inserted - i.e when length is bigger than type.length\n\n\n  if (length > 0) {\n    let newlines = '';\n\n    for (; length > 0; length--) {\n      newlines += '\\n';\n    }\n\n    left = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentString(newlines));\n    left.integrate(transaction, 0);\n  }\n\n  currPos.left = left;\n  currPos.right = right;\n  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);\n};\n/**\n * Call this function after string content has been deleted in order to\n * clean up formatting Items.\n *\n * @param {Transaction} transaction\n * @param {Item} start\n * @param {Item|null} end exclusive end, automatically iterates to the next Content Item\n * @param {Map<string,any>} startAttributes\n * @param {Map<string,any>} endAttributes This attribute is modified!\n * @return {number} The amount of formatting Items deleted.\n *\n * @function\n */\n\n\nconst cleanupFormattingGap = (transaction, start, end, startAttributes, endAttributes) => {\n  while (end && end.content.constructor !== ContentString && end.content.constructor !== ContentEmbed) {\n    if (!end.deleted && end.content.constructor === ContentFormat) {\n      updateCurrentAttributes(endAttributes,\n      /** @type {ContentFormat} */\n      end.content);\n    }\n\n    end = end.right;\n  }\n\n  let cleanups = 0;\n\n  while (start !== end) {\n    if (!start.deleted) {\n      const content = start.content;\n\n      switch (content.constructor) {\n        case ContentFormat:\n          {\n            const {\n              key,\n              value\n            } =\n            /** @type {ContentFormat} */\n            content;\n\n            if ((endAttributes.get(key) || null) !== value || (startAttributes.get(key) || null) === value) {\n              // Either this format is overwritten or it is not necessary because the attribute already existed.\n              start.delete(transaction);\n              cleanups++;\n            }\n\n            break;\n          }\n      }\n    }\n\n    start =\n    /** @type {Item} */\n    start.right;\n  }\n\n  return cleanups;\n};\n/**\n * @param {Transaction} transaction\n * @param {Item | null} item\n */\n\n\nconst cleanupContextlessFormattingGap = (transaction, item) => {\n  // iterate until item.right is null or content\n  while (item && item.right && (item.right.deleted || item.right.content.constructor !== ContentString && item.right.content.constructor !== ContentEmbed)) {\n    item = item.right;\n  }\n\n  const attrs = new Set(); // iterate back until a content item is found\n\n  while (item && (item.deleted || item.content.constructor !== ContentString && item.content.constructor !== ContentEmbed)) {\n    if (!item.deleted && item.content.constructor === ContentFormat) {\n      const key =\n      /** @type {ContentFormat} */\n      item.content.key;\n\n      if (attrs.has(key)) {\n        item.delete(transaction);\n      } else {\n        attrs.add(key);\n      }\n    }\n\n    item = item.left;\n  }\n};\n/**\n * This function is experimental and subject to change / be removed.\n *\n * Ideally, we don't need this function at all. Formatting attributes should be cleaned up\n * automatically after each change. This function iterates twice over the complete YText type\n * and removes unnecessary formatting attributes. This is also helpful for testing.\n *\n * This function won't be exported anymore as soon as there is confidence that the YText type works as intended.\n *\n * @param {YText} type\n * @return {number} How many formatting attributes have been cleaned up.\n */\n\n\nconst cleanupYTextFormatting = type => {\n  let res = 0;\n  transact(\n  /** @type {Doc} */\n  type.doc, transaction => {\n    let start =\n    /** @type {Item} */\n    type._start;\n    let end = type._start;\n    let startAttributes = create$2();\n    const currentAttributes = copy(startAttributes);\n\n    while (end) {\n      if (end.deleted === false) {\n        switch (end.content.constructor) {\n          case ContentFormat:\n            updateCurrentAttributes(currentAttributes,\n            /** @type {ContentFormat} */\n            end.content);\n            break;\n\n          case ContentEmbed:\n          case ContentString:\n            res += cleanupFormattingGap(transaction, start, end, startAttributes, currentAttributes);\n            startAttributes = copy(currentAttributes);\n            start = end;\n            break;\n        }\n      }\n\n      end = end.right;\n    }\n  });\n  return res;\n};\n/**\n * @param {Transaction} transaction\n * @param {ItemListPosition} currPos\n * @param {Map<string,any>} currentAttributes\n * @param {number} length\n * @return {ItemListPosition}\n *\n * @private\n * @function\n */\n\n\nconst deleteText = (transaction, currPos, currentAttributes, length) => {\n  const startAttrs = copy(currentAttributes);\n  const start = currPos.right;\n  let {\n    left,\n    right\n  } = currPos;\n\n  while (length > 0 && right !== null) {\n    if (right.deleted === false) {\n      switch (right.content.constructor) {\n        case ContentFormat:\n          updateCurrentAttributes(currentAttributes,\n          /** @type {ContentFormat} */\n          right.content);\n          break;\n\n        case ContentEmbed:\n        case ContentString:\n          if (length < right.length) {\n            getItemCleanStart(transaction, createID(right.id.client, right.id.clock + length));\n          }\n\n          length -= right.length;\n          right.delete(transaction);\n          break;\n      }\n    }\n\n    left = right;\n    right = right.right;\n  }\n\n  if (start) {\n    cleanupFormattingGap(transaction, start, right, startAttrs, copy(currentAttributes));\n  }\n\n  currPos.left = left;\n  currPos.right = right;\n  return currPos;\n};\n/**\n * The Quill Delta format represents changes on a text document with\n * formatting information. For mor information visit {@link https://quilljs.com/docs/delta/|Quill Delta}\n *\n * @example\n *   {\n *     ops: [\n *       { insert: 'Gandalf', attributes: { bold: true } },\n *       { insert: ' the ' },\n *       { insert: 'Grey', attributes: { color: '#cccccc' } }\n *     ]\n *   }\n *\n */\n\n/**\n  * Attributes that can be assigned to a selection of text.\n  *\n  * @example\n  *   {\n  *     bold: true,\n  *     font-size: '40px'\n  *   }\n  *\n  * @typedef {Object} TextAttributes\n  */\n\n/**\n * @typedef {Object} DeltaItem\n * @property {number|undefined} DeltaItem.delete\n * @property {number|undefined} DeltaItem.retain\n * @property {string|undefined} DeltaItem.string\n * @property {Object<string,any>} DeltaItem.attributes\n */\n\n/**\n * Event that describes the changes on a YText type.\n */\n\n\nclass YTextEvent extends YEvent {\n  /**\n   * @param {YText} ytext\n   * @param {Transaction} transaction\n   */\n  constructor(ytext, transaction) {\n    super(ytext, transaction);\n    /**\n     * @type {Array<DeltaItem>|null}\n     */\n\n    this._delta = null;\n  }\n  /**\n   * Compute the changes in the delta format.\n   * A {@link https://quilljs.com/docs/delta/|Quill Delta}) that represents the changes on the document.\n   *\n   * @type {Array<DeltaItem>}\n   *\n   * @public\n   */\n\n\n  get delta() {\n    if (this._delta === null) {\n      const y =\n      /** @type {Doc} */\n      this.target.doc;\n      this._delta = [];\n      transact(y, transaction => {\n        const delta =\n        /** @type {Array<DeltaItem>} */\n        this._delta;\n        const currentAttributes = new Map(); // saves all current attributes for insert\n\n        const oldAttributes = new Map();\n        let item = this.target._start;\n        /**\n         * @type {string?}\n         */\n\n        let action = null;\n        /**\n         * @type {Object<string,any>}\n         */\n\n        const attributes = {}; // counts added or removed new attributes for retain\n\n        /**\n         * @type {string|object}\n         */\n\n        let insert = '';\n        let retain = 0;\n        let deleteLen = 0;\n\n        const addOp = () => {\n          if (action !== null) {\n            /**\n             * @type {any}\n             */\n            let op;\n\n            switch (action) {\n              case 'delete':\n                op = {\n                  delete: deleteLen\n                };\n                deleteLen = 0;\n                break;\n\n              case 'insert':\n                op = {\n                  insert\n                };\n\n                if (currentAttributes.size > 0) {\n                  op.attributes = {};\n\n                  for (const [key, value] of currentAttributes) {\n                    if (value !== null) {\n                      op.attributes[key] = value;\n                    }\n                  }\n                }\n\n                insert = '';\n                break;\n\n              case 'retain':\n                op = {\n                  retain\n                };\n\n                if (Object.keys(attributes).length > 0) {\n                  op.attributes = {};\n\n                  for (const key in attributes) {\n                    op.attributes[key] = attributes[key];\n                  }\n                }\n\n                retain = 0;\n                break;\n            }\n\n            delta.push(op);\n            action = null;\n          }\n        };\n\n        while (item !== null) {\n          switch (item.content.constructor) {\n            case ContentEmbed:\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  addOp();\n                  action = 'insert';\n                  insert =\n                  /** @type {ContentEmbed} */\n                  item.content.embed;\n                  addOp();\n                }\n              } else if (this.deletes(item)) {\n                if (action !== 'delete') {\n                  addOp();\n                  action = 'delete';\n                }\n\n                deleteLen += 1;\n              } else if (!item.deleted) {\n                if (action !== 'retain') {\n                  addOp();\n                  action = 'retain';\n                }\n\n                retain += 1;\n              }\n\n              break;\n\n            case ContentString:\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  if (action !== 'insert') {\n                    addOp();\n                    action = 'insert';\n                  }\n\n                  insert +=\n                  /** @type {ContentString} */\n                  item.content.str;\n                }\n              } else if (this.deletes(item)) {\n                if (action !== 'delete') {\n                  addOp();\n                  action = 'delete';\n                }\n\n                deleteLen += item.length;\n              } else if (!item.deleted) {\n                if (action !== 'retain') {\n                  addOp();\n                  action = 'retain';\n                }\n\n                retain += item.length;\n              }\n\n              break;\n\n            case ContentFormat:\n              {\n                const {\n                  key,\n                  value\n                } =\n                /** @type {ContentFormat} */\n                item.content;\n\n                if (this.adds(item)) {\n                  if (!this.deletes(item)) {\n                    const curVal = currentAttributes.get(key) || null;\n\n                    if (!equalAttrs(curVal, value)) {\n                      if (action === 'retain') {\n                        addOp();\n                      }\n\n                      if (equalAttrs(value, oldAttributes.get(key) || null)) {\n                        delete attributes[key];\n                      } else {\n                        attributes[key] = value;\n                      }\n                    } else {\n                      item.delete(transaction);\n                    }\n                  }\n                } else if (this.deletes(item)) {\n                  oldAttributes.set(key, value);\n                  const curVal = currentAttributes.get(key) || null;\n\n                  if (!equalAttrs(curVal, value)) {\n                    if (action === 'retain') {\n                      addOp();\n                    }\n\n                    attributes[key] = curVal;\n                  }\n                } else if (!item.deleted) {\n                  oldAttributes.set(key, value);\n                  const attr = attributes[key];\n\n                  if (attr !== undefined) {\n                    if (!equalAttrs(attr, value)) {\n                      if (action === 'retain') {\n                        addOp();\n                      }\n\n                      if (value === null) {\n                        attributes[key] = value;\n                      } else {\n                        delete attributes[key];\n                      }\n                    } else {\n                      item.delete(transaction);\n                    }\n                  }\n                }\n\n                if (!item.deleted) {\n                  if (action === 'insert') {\n                    addOp();\n                  }\n\n                  updateCurrentAttributes(currentAttributes,\n                  /** @type {ContentFormat} */\n                  item.content);\n                }\n\n                break;\n              }\n          }\n\n          item = item.right;\n        }\n\n        addOp();\n\n        while (delta.length > 0) {\n          const lastOp = delta[delta.length - 1];\n\n          if (lastOp.retain !== undefined && lastOp.attributes === undefined) {\n            // retain delta's if they don't assign attributes\n            delta.pop();\n          } else {\n            break;\n          }\n        }\n      });\n    }\n\n    return this._delta;\n  }\n\n}\n/**\n * Type that represents text with formatting information.\n *\n * This type replaces y-richtext as this implementation is able to handle\n * block formats (format information on a paragraph), embeds (complex elements\n * like pictures and videos), and text formats (**bold**, *italic*).\n *\n * @extends AbstractType<YTextEvent>\n */\n\n\nclass YText extends AbstractType {\n  /**\n   * @param {String} [string] The initial value of the YText.\n   */\n  constructor(string) {\n    super();\n    /**\n     * Array of pending operations on this type\n     * @type {Array<function():void>?}\n     */\n\n    this._pending = string !== undefined ? [() => this.insert(0, string)] : [];\n  }\n  /**\n   * Number of characters of this text type.\n   *\n   * @type {number}\n   */\n\n\n  get length() {\n    return this._length;\n  }\n  /**\n   * @param {Doc} y\n   * @param {Item} item\n   */\n\n\n  _integrate(y, item) {\n    super._integrate(y, item);\n\n    try {\n      /** @type {Array<function>} */\n      this._pending.forEach(f => f());\n    } catch (e) {\n      console.error(e);\n    }\n\n    this._pending = null;\n  }\n\n  _copy() {\n    return new YText();\n  }\n  /**\n   * Creates YTextEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n\n\n  _callObserver(transaction, parentSubs) {\n    const event = new YTextEvent(this, transaction);\n    const doc = transaction.doc; // If a remote change happened, we try to cleanup potential formatting duplicates.\n\n    if (!transaction.local) {\n      // check if another formatting item was inserted\n      let foundFormattingItem = false;\n\n      for (const [client, afterClock] of transaction.afterState) {\n        const clock = transaction.beforeState.get(client) || 0;\n\n        if (afterClock === clock) {\n          continue;\n        }\n\n        iterateStructs(transaction,\n        /** @type {Array<Item|GC>} */\n        doc.store.clients.get(client), clock, afterClock, item => {\n          // @ts-ignore\n          if (!item.deleted && item.content.constructor === ContentFormat) {\n            foundFormattingItem = true;\n          }\n        });\n\n        if (foundFormattingItem) {\n          break;\n        }\n      }\n\n      transact(doc, t => {\n        if (foundFormattingItem) {\n          // If a formatting item was inserted, we simply clean the whole type.\n          // We need to compute currentAttributes for the current position anyway.\n          cleanupYTextFormatting(this);\n        } else {\n          // If no formatting attribute was inserted, we can make due with contextless\n          // formatting cleanups.\n          // Contextless: it is not necessary to compute currentAttributes for the affected position.\n          iterateDeletedStructs(t, transaction.deleteSet, item => {\n            if (item instanceof GC) {\n              return;\n            }\n\n            if (item.parent === this) {\n              cleanupContextlessFormattingGap(t, item);\n            }\n          });\n        }\n      });\n    }\n\n    callTypeObservers(this, transaction, event);\n  }\n  /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @public\n   */\n\n\n  toString() {\n    let str = '';\n    /**\n     * @type {Item|null}\n     */\n\n    let n = this._start;\n\n    while (n !== null) {\n      if (!n.deleted && n.countable && n.content.constructor === ContentString) {\n        str +=\n        /** @type {ContentString} */\n        n.content.str;\n      }\n\n      n = n.right;\n    }\n\n    return str;\n  }\n  /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @return {string}\n   * @public\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * Apply a {@link Delta} on this shared YText type.\n   *\n   * @param {any} delta The changes to apply on this element.\n   * @param {object}  [opts]\n   * @param {boolean} [opts.sanitize] Sanitize input delta. Removes ending newlines if set to true.\n   *\n   *\n   * @public\n   */\n\n\n  applyDelta(delta, {\n    sanitize = true\n  } = {}) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        /**\n         * @type {ItemListPosition}\n         */\n        const currPos = new ItemListPosition(null, this._start);\n        const currentAttributes = new Map();\n\n        for (let i = 0; i < delta.length; i++) {\n          const op = delta[i];\n\n          if (op.insert !== undefined) {\n            // Quill assumes that the content starts with an empty paragraph.\n            // Yjs/Y.Text assumes that it starts empty. We always hide that\n            // there is a newline at the end of the content.\n            // If we omit this step, clients will see a different number of\n            // paragraphs, but nothing bad will happen.\n            const ins = !sanitize && typeof op.insert === 'string' && i === delta.length - 1 && currPos.right === null && op.insert.slice(-1) === '\\n' ? op.insert.slice(0, -1) : op.insert;\n\n            if (typeof ins !== 'string' || ins.length > 0) {\n              insertText(transaction, this, currPos, currentAttributes, ins, op.attributes || {});\n            }\n          } else if (op.retain !== undefined) {\n            formatText(transaction, this, currPos, currentAttributes, op.retain, op.attributes || {});\n          } else if (op.delete !== undefined) {\n            deleteText(transaction, currPos, currentAttributes, op.delete);\n          }\n        }\n      });\n    } else {\n      /** @type {Array<function>} */\n      this._pending.push(() => this.applyDelta(delta));\n    }\n  }\n  /**\n   * Returns the Delta representation of this YText type.\n   *\n   * @param {Snapshot} [snapshot]\n   * @param {Snapshot} [prevSnapshot]\n   * @param {function('removed' | 'added', ID):any} [computeYChange]\n   * @return {any} The Delta representation of this type.\n   *\n   * @public\n   */\n\n\n  toDelta(snapshot, prevSnapshot, computeYChange) {\n    /**\n     * @type{Array<any>}\n     */\n    const ops = [];\n    const currentAttributes = new Map();\n    const doc =\n    /** @type {Doc} */\n    this.doc;\n    let str = '';\n    let n = this._start;\n\n    function packStr() {\n      if (str.length > 0) {\n        // pack str with attributes to ops\n\n        /**\n         * @type {Object<string,any>}\n         */\n        const attributes = {};\n        let addAttributes = false;\n\n        for (const [key, value] of currentAttributes) {\n          addAttributes = true;\n          attributes[key] = value;\n        }\n        /**\n         * @type {Object<string,any>}\n         */\n\n\n        const op = {\n          insert: str\n        };\n\n        if (addAttributes) {\n          op.attributes = attributes;\n        }\n\n        ops.push(op);\n        str = '';\n      }\n    } // snapshots are merged again after the transaction, so we need to keep the\n    // transalive until we are done\n\n\n    transact(doc, transaction => {\n      if (snapshot) {\n        splitSnapshotAffectedStructs(transaction, snapshot);\n      }\n\n      if (prevSnapshot) {\n        splitSnapshotAffectedStructs(transaction, prevSnapshot);\n      }\n\n      while (n !== null) {\n        if (isVisible(n, snapshot) || prevSnapshot !== undefined && isVisible(n, prevSnapshot)) {\n          switch (n.content.constructor) {\n            case ContentString:\n              {\n                const cur = currentAttributes.get('ychange');\n\n                if (snapshot !== undefined && !isVisible(n, snapshot)) {\n                  if (cur === undefined || cur.user !== n.id.client || cur.state !== 'removed') {\n                    packStr();\n                    currentAttributes.set('ychange', computeYChange ? computeYChange('removed', n.id) : {\n                      type: 'removed'\n                    });\n                  }\n                } else if (prevSnapshot !== undefined && !isVisible(n, prevSnapshot)) {\n                  if (cur === undefined || cur.user !== n.id.client || cur.state !== 'added') {\n                    packStr();\n                    currentAttributes.set('ychange', computeYChange ? computeYChange('added', n.id) : {\n                      type: 'added'\n                    });\n                  }\n                } else if (cur !== undefined) {\n                  packStr();\n                  currentAttributes.delete('ychange');\n                }\n\n                str +=\n                /** @type {ContentString} */\n                n.content.str;\n                break;\n              }\n\n            case ContentEmbed:\n              {\n                packStr();\n                /**\n                 * @type {Object<string,any>}\n                 */\n\n                const op = {\n                  insert:\n                  /** @type {ContentEmbed} */\n                  n.content.embed\n                };\n\n                if (currentAttributes.size > 0) {\n                  const attrs =\n                  /** @type {Object<string,any>} */\n                  {};\n                  op.attributes = attrs;\n\n                  for (const [key, value] of currentAttributes) {\n                    attrs[key] = value;\n                  }\n                }\n\n                ops.push(op);\n                break;\n              }\n\n            case ContentFormat:\n              if (isVisible(n, snapshot)) {\n                packStr();\n                updateCurrentAttributes(currentAttributes,\n                /** @type {ContentFormat} */\n                n.content);\n              }\n\n              break;\n          }\n        }\n\n        n = n.right;\n      }\n\n      packStr();\n    }, splitSnapshotAffectedStructs);\n    return ops;\n  }\n  /**\n   * Insert text at a given index.\n   *\n   * @param {number} index The index at which to start inserting.\n   * @param {String} text The text to insert at the specified position.\n   * @param {TextAttributes} [attributes] Optionally define some formatting\n   *                                    information to apply on the inserted\n   *                                    Text.\n   * @public\n   */\n\n\n  insert(index, text, attributes) {\n    if (text.length <= 0) {\n      return;\n    }\n\n    const y = this.doc;\n\n    if (y !== null) {\n      transact(y, transaction => {\n        const {\n          left,\n          right,\n          currentAttributes\n        } = findPosition(transaction, this, index);\n\n        if (!attributes) {\n          attributes = {}; // @ts-ignore\n\n          currentAttributes.forEach((v, k) => {\n            attributes[k] = v;\n          });\n        }\n\n        insertText(transaction, this, new ItemListPosition(left, right), currentAttributes, text, attributes);\n      });\n    } else {\n      /** @type {Array<function>} */\n      this._pending.push(() => this.insert(index, text, attributes));\n    }\n  }\n  /**\n   * Inserts an embed at a index.\n   *\n   * @param {number} index The index to insert the embed at.\n   * @param {Object} embed The Object that represents the embed.\n   * @param {TextAttributes} attributes Attribute information to apply on the\n   *                                    embed\n   *\n   * @public\n   */\n\n\n  insertEmbed(index, embed, attributes = {}) {\n    if (embed.constructor !== Object) {\n      throw new Error('Embed must be an Object');\n    }\n\n    const y = this.doc;\n\n    if (y !== null) {\n      transact(y, transaction => {\n        const {\n          left,\n          right,\n          currentAttributes\n        } = findPosition(transaction, this, index);\n        insertText(transaction, this, new ItemListPosition(left, right), currentAttributes, embed, attributes);\n      });\n    } else {\n      /** @type {Array<function>} */\n      this._pending.push(() => this.insertEmbed(index, embed, attributes));\n    }\n  }\n  /**\n   * Deletes text starting from an index.\n   *\n   * @param {number} index Index at which to start deleting.\n   * @param {number} length The number of characters to remove. Defaults to 1.\n   *\n   * @public\n   */\n\n\n  delete(index, length) {\n    if (length === 0) {\n      return;\n    }\n\n    const y = this.doc;\n\n    if (y !== null) {\n      transact(y, transaction => {\n        const {\n          left,\n          right,\n          currentAttributes\n        } = findPosition(transaction, this, index);\n        deleteText(transaction, new ItemListPosition(left, right), currentAttributes, length);\n      });\n    } else {\n      /** @type {Array<function>} */\n      this._pending.push(() => this.delete(index, length));\n    }\n  }\n  /**\n   * Assigns properties to a range of text.\n   *\n   * @param {number} index The position where to start formatting.\n   * @param {number} length The amount of characters to assign properties to.\n   * @param {TextAttributes} attributes Attribute information to apply on the\n   *                                    text.\n   *\n   * @public\n   */\n\n\n  format(index, length, attributes) {\n    if (length === 0) {\n      return;\n    }\n\n    const y = this.doc;\n\n    if (y !== null) {\n      transact(y, transaction => {\n        const {\n          left,\n          right,\n          currentAttributes\n        } = findPosition(transaction, this, index);\n\n        if (right === null) {\n          return;\n        }\n\n        formatText(transaction, this, new ItemListPosition(left, right), currentAttributes, length, attributes);\n      });\n    } else {\n      /** @type {Array<function>} */\n      this._pending.push(() => this.format(index, length, attributes));\n    }\n  }\n  /**\n   * @param {encoding.Encoder} encoder\n   */\n\n\n  _write(encoder) {\n    writeVarUint(encoder, YTextRefID);\n  }\n\n}\n/**\n * @param {decoding.Decoder} decoder\n * @return {YText}\n *\n * @private\n * @function\n */\n\n\nconst readYText = decoder => new YText();\n/**\n * @module YXml\n */\n\n/**\n * Define the elements to which a set of CSS queries apply.\n * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}\n *\n * @example\n *   query = '.classSelector'\n *   query = 'nodeSelector'\n *   query = '#idSelector'\n *\n * @typedef {string} CSS_Selector\n */\n\n/**\n * Dom filter function.\n *\n * @callback domFilter\n * @param {string} nodeName The nodeName of the element\n * @param {Map} attributes The map of attributes.\n * @return {boolean} Whether to include the Dom node in the YXmlElement.\n */\n\n/**\n * Represents a subset of the nodes of a YXmlElement / YXmlFragment and a\n * position within them.\n *\n * Can be created with {@link YXmlFragment#createTreeWalker}\n *\n * @public\n * @implements {Iterable<YXmlElement|YXmlText|YXmlElement|YXmlHook>}\n */\n\n\nclass YXmlTreeWalker {\n  /**\n   * @param {YXmlFragment | YXmlElement} root\n   * @param {function(AbstractType<any>):boolean} [f]\n   */\n  constructor(root, f = () => true) {\n    this._filter = f;\n    this._root = root;\n    /**\n     * @type {Item}\n     */\n\n    this._currentNode =\n    /** @type {Item} */\n    root._start;\n    this._firstCall = true;\n  }\n\n  [Symbol.iterator]() {\n    return this;\n  }\n  /**\n   * Get the next node.\n   *\n   * @return {IteratorResult<YXmlElement|YXmlText|YXmlHook>} The next node.\n   *\n   * @public\n   */\n\n\n  next() {\n    /**\n     * @type {Item|null}\n     */\n    let n = this._currentNode;\n    let type =\n    /** @type {any} */\n    n.content.type;\n\n    if (n !== null && (!this._firstCall || n.deleted || !this._filter(type))) {\n      // if first call, we check if we can use the first item\n      do {\n        type =\n        /** @type {any} */\n        n.content.type;\n\n        if (!n.deleted && (type.constructor === YXmlElement || type.constructor === YXmlFragment) && type._start !== null) {\n          // walk down in the tree\n          n = type._start;\n        } else {\n          // walk right or up in the tree\n          while (n !== null) {\n            if (n.right !== null) {\n              n = n.right;\n              break;\n            } else if (n.parent === this._root) {\n              n = null;\n            } else {\n              n =\n              /** @type {AbstractType<any>} */\n              n.parent._item;\n            }\n          }\n        }\n      } while (n !== null && (n.deleted || !this._filter(\n      /** @type {ContentType} */\n      n.content.type)));\n    }\n\n    this._firstCall = false;\n\n    if (n === null) {\n      // @ts-ignore\n      return {\n        value: undefined,\n        done: true\n      };\n    }\n\n    this._currentNode = n;\n    return {\n      value:\n      /** @type {any} */\n      n.content.type,\n      done: false\n    };\n  }\n\n}\n/**\n * Represents a list of {@link YXmlElement}.and {@link YXmlText} types.\n * A YxmlFragment is similar to a {@link YXmlElement}, but it does not have a\n * nodeName and it does not have attributes. Though it can be bound to a DOM\n * element - in this case the attributes and the nodeName are not shared.\n *\n * @public\n * @extends AbstractType<YXmlEvent>\n */\n\n\nclass YXmlFragment extends AbstractType {\n  constructor() {\n    super();\n    /**\n     * @type {Array<any>|null}\n     */\n\n    this._prelimContent = [];\n  }\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n\n\n  _integrate(y, item) {\n    super._integrate(y, item);\n\n    this.insert(0,\n    /** @type {Array<any>} */\n    this._prelimContent);\n    this._prelimContent = null;\n  }\n\n  _copy() {\n    return new YXmlFragment();\n  }\n\n  get length() {\n    return this._prelimContent === null ? this._length : this._prelimContent.length;\n  }\n  /**\n   * Create a subtree of childNodes.\n   *\n   * @example\n   * const walker = elem.createTreeWalker(dom => dom.nodeName === 'div')\n   * for (let node in walker) {\n   *   // `node` is a div node\n   *   nop(node)\n   * }\n   *\n   * @param {function(AbstractType<any>):boolean} filter Function that is called on each child element and\n   *                          returns a Boolean indicating whether the child\n   *                          is to be included in the subtree.\n   * @return {YXmlTreeWalker} A subtree and a position within it.\n   *\n   * @public\n   */\n\n\n  createTreeWalker(filter) {\n    return new YXmlTreeWalker(this, filter);\n  }\n  /**\n   * Returns the first YXmlElement that matches the query.\n   * Similar to DOM's {@link querySelector}.\n   *\n   * Query support:\n   *   - tagname\n   * TODO:\n   *   - id\n   *   - attribute\n   *\n   * @param {CSS_Selector} query The query on the children.\n   * @return {YXmlElement|YXmlText|YXmlHook|null} The first element that matches the query or null.\n   *\n   * @public\n   */\n\n\n  querySelector(query) {\n    query = query.toUpperCase(); // @ts-ignore\n\n    const iterator = new YXmlTreeWalker(this, element => element.nodeName && element.nodeName.toUpperCase() === query);\n    const next = iterator.next();\n\n    if (next.done) {\n      return null;\n    } else {\n      return next.value;\n    }\n  }\n  /**\n   * Returns all YXmlElements that match the query.\n   * Similar to Dom's {@link querySelectorAll}.\n   *\n   * @todo Does not yet support all queries. Currently only query by tagName.\n   *\n   * @param {CSS_Selector} query The query on the children\n   * @return {Array<YXmlElement|YXmlText|YXmlHook|null>} The elements that match this query.\n   *\n   * @public\n   */\n\n\n  querySelectorAll(query) {\n    query = query.toUpperCase(); // @ts-ignore\n\n    return Array.from(new YXmlTreeWalker(this, element => element.nodeName && element.nodeName.toUpperCase() === query));\n  }\n  /**\n   * Creates YXmlEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n\n\n  _callObserver(transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YXmlEvent(this, parentSubs, transaction));\n  }\n  /**\n   * Get the string representation of all the children of this YXmlFragment.\n   *\n   * @return {string} The string representation of all children.\n   */\n\n\n  toString() {\n    return typeListMap(this, xml => xml.toString()).join('');\n  }\n  /**\n   * @return {string}\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n\n\n  toDOM(_document = document, hooks = {}, binding) {\n    const fragment = _document.createDocumentFragment();\n\n    if (binding !== undefined) {\n      binding._createAssociation(fragment, this);\n    }\n\n    typeListForEach(this, xmlType => {\n      fragment.insertBefore(xmlType.toDOM(_document, hooks, binding), null);\n    });\n    return fragment;\n  }\n  /**\n   * Inserts new content at an index.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  xml.insert(0, [new Y.XmlText('text')])\n   *\n   * @param {number} index The index to insert content at\n   * @param {Array<YXmlElement|YXmlText>} content The array of content\n   */\n\n\n  insert(index, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListInsertGenerics(transaction, this, index, content);\n      });\n    } else {\n      // @ts-ignore _prelimContent is defined because this is not yet integrated\n      this._prelimContent.splice(index, 0, ...content);\n    }\n  }\n  /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} [length=1] The number of elements to remove. Defaults to 1.\n   */\n\n\n  delete(index, length = 1) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListDelete(transaction, this, index, length);\n      });\n    } else {\n      // @ts-ignore _prelimContent is defined because this is not yet integrated\n      this._prelimContent.splice(index, length);\n    }\n  }\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<YXmlElement|YXmlText|YXmlHook>}\n   */\n\n\n  toArray() {\n    return typeListToArray(this);\n  }\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {encoding.Encoder} encoder The encoder to write data to.\n   */\n\n\n  _write(encoder) {\n    writeVarUint(encoder, YXmlFragmentRefID);\n  }\n\n}\n/**\n * @param {decoding.Decoder} decoder\n * @return {YXmlFragment}\n *\n * @private\n * @function\n */\n\n\nconst readYXmlFragment = decoder => new YXmlFragment();\n/**\n * An YXmlElement imitates the behavior of a\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}.\n *\n * * An YXmlElement has attributes (key value pairs)\n * * An YXmlElement has childElements that must inherit from YXmlElement\n */\n\n\nclass YXmlElement extends YXmlFragment {\n  constructor(nodeName = 'UNDEFINED') {\n    super();\n    this.nodeName = nodeName;\n    /**\n     * @type {Map<string, any>|null}\n     */\n\n    this._prelimAttrs = new Map();\n  }\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n\n\n  _integrate(y, item) {\n    super._integrate(y, item);\n\n    /** @type {Map<string, any>} */\n    this._prelimAttrs.forEach((value, key) => {\n      this.setAttribute(key, value);\n    });\n\n    this._prelimAttrs = null;\n  }\n  /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   *\n   * @return {YXmlElement}\n   */\n\n\n  _copy() {\n    return new YXmlElement(this.nodeName);\n  }\n  /**\n   * Returns the XML serialization of this YXmlElement.\n   * The attributes are ordered by attribute-name, so you can easily use this\n   * method to compare YXmlElements\n   *\n   * @return {string} The string representation of this type.\n   *\n   * @public\n   */\n\n\n  toString() {\n    const attrs = this.getAttributes();\n    const stringBuilder = [];\n    const keys = [];\n\n    for (const key in attrs) {\n      keys.push(key);\n    }\n\n    keys.sort();\n    const keysLen = keys.length;\n\n    for (let i = 0; i < keysLen; i++) {\n      const key = keys[i];\n      stringBuilder.push(key + '=\"' + attrs[key] + '\"');\n    }\n\n    const nodeName = this.nodeName.toLocaleLowerCase();\n    const attrsString = stringBuilder.length > 0 ? ' ' + stringBuilder.join(' ') : '';\n    return `<${nodeName}${attrsString}>${super.toString()}</${nodeName}>`;\n  }\n  /**\n   * Removes an attribute from this YXmlElement.\n   *\n   * @param {String} attributeName The attribute name that is to be removed.\n   *\n   * @public\n   */\n\n\n  removeAttribute(attributeName) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, attributeName);\n      });\n    } else {\n      /** @type {Map<string,any>} */\n      this._prelimAttrs.delete(attributeName);\n    }\n  }\n  /**\n   * Sets or updates an attribute.\n   *\n   * @param {String} attributeName The attribute name that is to be set.\n   * @param {String} attributeValue The attribute value that is to be set.\n   *\n   * @public\n   */\n\n\n  setAttribute(attributeName, attributeValue) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, attributeName, attributeValue);\n      });\n    } else {\n      /** @type {Map<string, any>} */\n      this._prelimAttrs.set(attributeName, attributeValue);\n    }\n  }\n  /**\n   * Returns an attribute value that belongs to the attribute name.\n   *\n   * @param {String} attributeName The attribute name that identifies the\n   *                               queried value.\n   * @return {String} The queried attribute value.\n   *\n   * @public\n   */\n\n\n  getAttribute(attributeName) {\n    return (\n      /** @type {any} */\n      typeMapGet(this, attributeName)\n    );\n  }\n  /**\n   * Returns all attribute name/value pairs in a JSON Object.\n   *\n   * @param {Snapshot} [snapshot]\n   * @return {Object<string, any>} A JSON Object that describes the attributes.\n   *\n   * @public\n   */\n\n\n  getAttributes(snapshot) {\n    return typeMapGetAll(this);\n  }\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n\n\n  toDOM(_document = document, hooks = {}, binding) {\n    const dom = _document.createElement(this.nodeName);\n\n    const attrs = this.getAttributes();\n\n    for (const key in attrs) {\n      dom.setAttribute(key, attrs[key]);\n    }\n\n    typeListForEach(this, yxml => {\n      dom.appendChild(yxml.toDOM(_document, hooks, binding));\n    });\n\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this);\n    }\n\n    return dom;\n  }\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {encoding.Encoder} encoder The encoder to write data to.\n   */\n\n\n  _write(encoder) {\n    writeVarUint(encoder, YXmlElementRefID);\n    writeVarString(encoder, this.nodeName);\n  }\n\n}\n/**\n * @param {decoding.Decoder} decoder\n * @return {YXmlElement}\n *\n * @function\n */\n\n\nconst readYXmlElement = decoder => new YXmlElement(readVarString(decoder));\n/**\n * An Event that describes changes on a YXml Element or Yxml Fragment\n */\n\n\nclass YXmlEvent extends YEvent {\n  /**\n   * @param {YXmlElement|YXmlFragment} target The target on which the event is created.\n   * @param {Set<string|null>} subs The set of changed attributes. `null` is included if the\n   *                   child list changed.\n   * @param {Transaction} transaction The transaction instance with wich the\n   *                                  change was created.\n   */\n  constructor(target, subs, transaction) {\n    super(target, transaction);\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n\n    this.childListChanged = false;\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string|null>}\n     */\n\n    this.attributesChanged = new Set();\n    subs.forEach(sub => {\n      if (sub === null) {\n        this.childListChanged = true;\n      } else {\n        this.attributesChanged.add(sub);\n      }\n    });\n  }\n\n}\n/**\n * You can manage binding to a custom type with YXmlHook.\n *\n * @extends {YMap<any>}\n */\n\n\nclass YXmlHook extends YMap {\n  /**\n   * @param {string} hookName nodeName of the Dom Node.\n   */\n  constructor(hookName) {\n    super();\n    /**\n     * @type {string}\n     */\n\n    this.hookName = hookName;\n  }\n  /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   */\n\n\n  _copy() {\n    return new YXmlHook(this.hookName);\n  }\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object.<string, any>} [hooks] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type\n   * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n\n\n  toDOM(_document = document, hooks = {}, binding) {\n    const hook = hooks[this.hookName];\n    let dom;\n\n    if (hook !== undefined) {\n      dom = hook.createDom(this);\n    } else {\n      dom = document.createElement(this.hookName);\n    }\n\n    dom.setAttribute('data-yjs-hook', this.hookName);\n\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this);\n    }\n\n    return dom;\n  }\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {encoding.Encoder} encoder The encoder to write data to.\n   */\n\n\n  _write(encoder) {\n    super._write(encoder);\n\n    writeVarUint(encoder, YXmlHookRefID);\n    writeVarString(encoder, this.hookName);\n  }\n\n}\n/**\n * @param {decoding.Decoder} decoder\n * @return {YXmlHook}\n *\n * @private\n * @function\n */\n\n\nconst readYXmlHook = decoder => new YXmlHook(readVarString(decoder));\n/**\n * Represents text in a Dom Element. In the future this type will also handle\n * simple formatting information like bold and italic.\n */\n\n\nclass YXmlText extends YText {\n  _copy() {\n    return new YXmlText();\n  }\n  /**\n   * Creates a Dom Element that mirrors this YXmlText.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Text} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n\n\n  toDOM(_document = document, hooks, binding) {\n    const dom = _document.createTextNode(this.toString());\n\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this);\n    }\n\n    return dom;\n  }\n\n  toString() {\n    // @ts-ignore\n    return this.toDelta().map(delta => {\n      const nestedNodes = [];\n\n      for (const nodeName in delta.attributes) {\n        const attrs = [];\n\n        for (const key in delta.attributes[nodeName]) {\n          attrs.push({\n            key,\n            value: delta.attributes[nodeName][key]\n          });\n        } // sort attributes to get a unique order\n\n\n        attrs.sort((a, b) => a.key < b.key ? -1 : 1);\n        nestedNodes.push({\n          nodeName,\n          attrs\n        });\n      } // sort node order to get a unique order\n\n\n      nestedNodes.sort((a, b) => a.nodeName < b.nodeName ? -1 : 1); // now convert to dom string\n\n      let str = '';\n\n      for (let i = 0; i < nestedNodes.length; i++) {\n        const node = nestedNodes[i];\n        str += `<${node.nodeName}`;\n\n        for (let j = 0; j < node.attrs.length; j++) {\n          const attr = node.attrs[j];\n          str += ` ${attr.key}=\"${attr.value}\"`;\n        }\n\n        str += '>';\n      }\n\n      str += delta.insert;\n\n      for (let i = nestedNodes.length - 1; i >= 0; i--) {\n        str += `</${nestedNodes[i].nodeName}>`;\n      }\n\n      return str;\n    }).join('');\n  }\n  /**\n   * @return {string}\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @param {encoding.Encoder} encoder\n   */\n\n\n  _write(encoder) {\n    writeVarUint(encoder, YXmlTextRefID);\n  }\n\n}\n/**\n * @param {decoding.Decoder} decoder\n * @return {YXmlText}\n *\n * @private\n * @function\n */\n\n\nconst readYXmlText = decoder => new YXmlText();\n\nclass AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {number} length\n   */\n  constructor(id, length) {\n    this.id = id;\n    this.length = length;\n    this.deleted = false;\n  }\n  /**\n   * Merge this struct with the item to the right.\n   * This method is already assuming that `this.id.clock + this.length === this.id.clock`.\n   * Also this method does *not* remove right from StructStore!\n   * @param {AbstractStruct} right\n   * @return {boolean} wether this merged with right\n   */\n\n\n  mergeWith(right) {\n    return false;\n  }\n  /**\n   * @param {encoding.Encoder} encoder The encoder to write data to.\n   * @param {number} offset\n   * @param {number} encodingRef\n   */\n\n\n  write(encoder, offset, encodingRef) {\n    throw methodUnimplemented();\n  }\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n\n\n  integrate(transaction, offset) {\n    throw methodUnimplemented();\n  }\n\n}\n\nconst structGCRefNumber = 0;\n/**\n * @private\n */\n\nclass GC extends AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {number} length\n   */\n  constructor(id, length) {\n    super(id, length);\n    this.deleted = true;\n  }\n\n  delete() {}\n  /**\n   * @param {GC} right\n   * @return {boolean}\n   */\n\n\n  mergeWith(right) {\n    this.length += right.length;\n    return true;\n  }\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n\n\n  integrate(transaction, offset) {\n    if (offset > 0) {\n      this.id.clock += offset;\n      this.length -= offset;\n    }\n\n    addStruct(transaction.doc.store, this);\n  }\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n\n\n  write(encoder, offset) {\n    writeUint8(encoder, structGCRefNumber);\n    writeVarUint(encoder, this.length - offset);\n  }\n  /**\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | ID}\n   */\n\n\n  getMissing(transaction, store) {\n    return null;\n  }\n\n}\n\nclass ContentBinary {\n  /**\n   * @param {Uint8Array} content\n   */\n  constructor(content) {\n    this.content = content;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getLength() {\n    return 1;\n  }\n  /**\n   * @return {Array<any>}\n   */\n\n\n  getContent() {\n    return [this.content];\n  }\n  /**\n   * @return {boolean}\n   */\n\n\n  isCountable() {\n    return true;\n  }\n  /**\n   * @return {ContentBinary}\n   */\n\n\n  copy() {\n    return new ContentBinary(this.content);\n  }\n  /**\n   * @param {number} offset\n   * @return {ContentBinary}\n   */\n\n\n  splice(offset) {\n    throw methodUnimplemented();\n  }\n  /**\n   * @param {ContentBinary} right\n   * @return {boolean}\n   */\n\n\n  mergeWith(right) {\n    return false;\n  }\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n\n\n  integrate(transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n\n\n  delete(transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n\n\n  gc(store) {}\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n\n\n  write(encoder, offset) {\n    writeVarUint8Array(encoder, this.content);\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getRef() {\n    return 3;\n  }\n\n}\n/**\n * @param {decoding.Decoder} decoder\n * @return {ContentBinary}\n */\n\n\nconst readContentBinary = decoder => new ContentBinary(copyUint8Array(readVarUint8Array(decoder)));\n\nclass ContentDeleted {\n  /**\n   * @param {number} len\n   */\n  constructor(len) {\n    this.len = len;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getLength() {\n    return this.len;\n  }\n  /**\n   * @return {Array<any>}\n   */\n\n\n  getContent() {\n    return [];\n  }\n  /**\n   * @return {boolean}\n   */\n\n\n  isCountable() {\n    return false;\n  }\n  /**\n   * @return {ContentDeleted}\n   */\n\n\n  copy() {\n    return new ContentDeleted(this.len);\n  }\n  /**\n   * @param {number} offset\n   * @return {ContentDeleted}\n   */\n\n\n  splice(offset) {\n    const right = new ContentDeleted(this.len - offset);\n    this.len = offset;\n    return right;\n  }\n  /**\n   * @param {ContentDeleted} right\n   * @return {boolean}\n   */\n\n\n  mergeWith(right) {\n    this.len += right.len;\n    return true;\n  }\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n\n\n  integrate(transaction, item) {\n    addToDeleteSet(transaction.deleteSet, item.id, this.len);\n    item.deleted = true;\n  }\n  /**\n   * @param {Transaction} transaction\n   */\n\n\n  delete(transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n\n\n  gc(store) {}\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n\n\n  write(encoder, offset) {\n    writeVarUint(encoder, this.len - offset);\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getRef() {\n    return 1;\n  }\n\n}\n/**\n * @private\n *\n * @param {decoding.Decoder} decoder\n * @return {ContentDeleted}\n */\n\n\nconst readContentDeleted = decoder => new ContentDeleted(readVarUint(decoder));\n/**\n * @private\n */\n\n\nclass ContentEmbed {\n  /**\n   * @param {Object} embed\n   */\n  constructor(embed) {\n    this.embed = embed;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getLength() {\n    return 1;\n  }\n  /**\n   * @return {Array<any>}\n   */\n\n\n  getContent() {\n    return [this.embed];\n  }\n  /**\n   * @return {boolean}\n   */\n\n\n  isCountable() {\n    return true;\n  }\n  /**\n   * @return {ContentEmbed}\n   */\n\n\n  copy() {\n    return new ContentEmbed(this.embed);\n  }\n  /**\n   * @param {number} offset\n   * @return {ContentEmbed}\n   */\n\n\n  splice(offset) {\n    throw methodUnimplemented();\n  }\n  /**\n   * @param {ContentEmbed} right\n   * @return {boolean}\n   */\n\n\n  mergeWith(right) {\n    return false;\n  }\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n\n\n  integrate(transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n\n\n  delete(transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n\n\n  gc(store) {}\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n\n\n  write(encoder, offset) {\n    writeVarString(encoder, JSON.stringify(this.embed));\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getRef() {\n    return 5;\n  }\n\n}\n/**\n * @private\n *\n * @param {decoding.Decoder} decoder\n * @return {ContentEmbed}\n */\n\n\nconst readContentEmbed = decoder => new ContentEmbed(JSON.parse(readVarString(decoder)));\n/**\n * @private\n */\n\n\nclass ContentFormat {\n  /**\n   * @param {string} key\n   * @param {Object} value\n   */\n  constructor(key, value) {\n    this.key = key;\n    this.value = value;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getLength() {\n    return 1;\n  }\n  /**\n   * @return {Array<any>}\n   */\n\n\n  getContent() {\n    return [];\n  }\n  /**\n   * @return {boolean}\n   */\n\n\n  isCountable() {\n    return false;\n  }\n  /**\n   * @return {ContentFormat}\n   */\n\n\n  copy() {\n    return new ContentFormat(this.key, this.value);\n  }\n  /**\n   * @param {number} offset\n   * @return {ContentFormat}\n   */\n\n\n  splice(offset) {\n    throw methodUnimplemented();\n  }\n  /**\n   * @param {ContentFormat} right\n   * @return {boolean}\n   */\n\n\n  mergeWith(right) {\n    return false;\n  }\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n\n\n  integrate(transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n\n\n  delete(transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n\n\n  gc(store) {}\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n\n\n  write(encoder, offset) {\n    writeVarString(encoder, this.key);\n    writeVarString(encoder, JSON.stringify(this.value));\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getRef() {\n    return 6;\n  }\n\n}\n/**\n * @param {decoding.Decoder} decoder\n * @return {ContentFormat}\n */\n\n\nconst readContentFormat = decoder => new ContentFormat(readVarString(decoder), JSON.parse(readVarString(decoder)));\n/**\n * @private\n */\n\n\nclass ContentJSON {\n  /**\n   * @param {Array<any>} arr\n   */\n  constructor(arr) {\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getLength() {\n    return this.arr.length;\n  }\n  /**\n   * @return {Array<any>}\n   */\n\n\n  getContent() {\n    return this.arr;\n  }\n  /**\n   * @return {boolean}\n   */\n\n\n  isCountable() {\n    return true;\n  }\n  /**\n   * @return {ContentJSON}\n   */\n\n\n  copy() {\n    return new ContentJSON(this.arr);\n  }\n  /**\n   * @param {number} offset\n   * @return {ContentJSON}\n   */\n\n\n  splice(offset) {\n    const right = new ContentJSON(this.arr.slice(offset));\n    this.arr = this.arr.slice(0, offset);\n    return right;\n  }\n  /**\n   * @param {ContentJSON} right\n   * @return {boolean}\n   */\n\n\n  mergeWith(right) {\n    this.arr = this.arr.concat(right.arr);\n    return true;\n  }\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n\n\n  integrate(transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n\n\n  delete(transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n\n\n  gc(store) {}\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n\n\n  write(encoder, offset) {\n    const len = this.arr.length;\n    writeVarUint(encoder, len - offset);\n\n    for (let i = offset; i < len; i++) {\n      const c = this.arr[i];\n      writeVarString(encoder, c === undefined ? 'undefined' : JSON.stringify(c));\n    }\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getRef() {\n    return 2;\n  }\n\n}\n/**\n * @private\n *\n * @param {decoding.Decoder} decoder\n * @return {ContentJSON}\n */\n\n\nconst readContentJSON = decoder => {\n  const len = readVarUint(decoder);\n  const cs = [];\n\n  for (let i = 0; i < len; i++) {\n    const c = readVarString(decoder);\n\n    if (c === 'undefined') {\n      cs.push(undefined);\n    } else {\n      cs.push(JSON.parse(c));\n    }\n  }\n\n  return new ContentJSON(cs);\n};\n\nclass ContentAny {\n  /**\n   * @param {Array<any>} arr\n   */\n  constructor(arr) {\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getLength() {\n    return this.arr.length;\n  }\n  /**\n   * @return {Array<any>}\n   */\n\n\n  getContent() {\n    return this.arr;\n  }\n  /**\n   * @return {boolean}\n   */\n\n\n  isCountable() {\n    return true;\n  }\n  /**\n   * @return {ContentAny}\n   */\n\n\n  copy() {\n    return new ContentAny(this.arr);\n  }\n  /**\n   * @param {number} offset\n   * @return {ContentAny}\n   */\n\n\n  splice(offset) {\n    const right = new ContentAny(this.arr.slice(offset));\n    this.arr = this.arr.slice(0, offset);\n    return right;\n  }\n  /**\n   * @param {ContentAny} right\n   * @return {boolean}\n   */\n\n\n  mergeWith(right) {\n    this.arr = this.arr.concat(right.arr);\n    return true;\n  }\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n\n\n  integrate(transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n\n\n  delete(transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n\n\n  gc(store) {}\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n\n\n  write(encoder, offset) {\n    const len = this.arr.length;\n    writeVarUint(encoder, len - offset);\n\n    for (let i = offset; i < len; i++) {\n      const c = this.arr[i];\n      writeAny(encoder, c);\n    }\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getRef() {\n    return 8;\n  }\n\n}\n/**\n * @param {decoding.Decoder} decoder\n * @return {ContentAny}\n */\n\n\nconst readContentAny = decoder => {\n  const len = readVarUint(decoder);\n  const cs = [];\n\n  for (let i = 0; i < len; i++) {\n    cs.push(readAny(decoder));\n  }\n\n  return new ContentAny(cs);\n};\n/**\n * @private\n */\n\n\nclass ContentString {\n  /**\n   * @param {string} str\n   */\n  constructor(str) {\n    /**\n     * @type {string}\n     */\n    this.str = str;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getLength() {\n    return this.str.length;\n  }\n  /**\n   * @return {Array<any>}\n   */\n\n\n  getContent() {\n    return this.str.split('');\n  }\n  /**\n   * @return {boolean}\n   */\n\n\n  isCountable() {\n    return true;\n  }\n  /**\n   * @return {ContentString}\n   */\n\n\n  copy() {\n    return new ContentString(this.str);\n  }\n  /**\n   * @param {number} offset\n   * @return {ContentString}\n   */\n\n\n  splice(offset) {\n    const right = new ContentString(this.str.slice(offset));\n    this.str = this.str.slice(0, offset);\n    return right;\n  }\n  /**\n   * @param {ContentString} right\n   * @return {boolean}\n   */\n\n\n  mergeWith(right) {\n    this.str += right.str;\n    return true;\n  }\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n\n\n  integrate(transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n\n\n  delete(transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n\n\n  gc(store) {}\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n\n\n  write(encoder, offset) {\n    writeVarString(encoder, offset === 0 ? this.str : this.str.slice(offset));\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getRef() {\n    return 4;\n  }\n\n}\n/**\n * @private\n *\n * @param {decoding.Decoder} decoder\n * @return {ContentString}\n */\n\n\nconst readContentString = decoder => new ContentString(readVarString(decoder));\n/**\n * @type {Array<function(decoding.Decoder):AbstractType<any>>}\n * @private\n */\n\n\nconst typeRefs = [readYArray, readYMap, readYText, readYXmlElement, readYXmlFragment, readYXmlHook, readYXmlText];\nconst YArrayRefID = 0;\nconst YMapRefID = 1;\nconst YTextRefID = 2;\nconst YXmlElementRefID = 3;\nconst YXmlFragmentRefID = 4;\nconst YXmlHookRefID = 5;\nconst YXmlTextRefID = 6;\n/**\n * @private\n */\n\nclass ContentType {\n  /**\n   * @param {AbstractType<YEvent>} type\n   */\n  constructor(type) {\n    /**\n     * @type {AbstractType<any>}\n     */\n    this.type = type;\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getLength() {\n    return 1;\n  }\n  /**\n   * @return {Array<any>}\n   */\n\n\n  getContent() {\n    return [this.type];\n  }\n  /**\n   * @return {boolean}\n   */\n\n\n  isCountable() {\n    return true;\n  }\n  /**\n   * @return {ContentType}\n   */\n\n\n  copy() {\n    return new ContentType(this.type._copy());\n  }\n  /**\n   * @param {number} offset\n   * @return {ContentType}\n   */\n\n\n  splice(offset) {\n    throw methodUnimplemented();\n  }\n  /**\n   * @param {ContentType} right\n   * @return {boolean}\n   */\n\n\n  mergeWith(right) {\n    return false;\n  }\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n\n\n  integrate(transaction, item) {\n    this.type._integrate(transaction.doc, item);\n  }\n  /**\n   * @param {Transaction} transaction\n   */\n\n\n  delete(transaction) {\n    let item = this.type._start;\n\n    while (item !== null) {\n      if (!item.deleted) {\n        item.delete(transaction);\n      } else {\n        // Whis will be gc'd later and we want to merge it if possible\n        // We try to merge all deleted items after each transaction,\n        // but we have no knowledge about that this needs to be merged\n        // since it is not in transaction.ds. Hence we add it to transaction._mergeStructs\n        transaction._mergeStructs.push(item);\n      }\n\n      item = item.right;\n    }\n\n    this.type._map.forEach(item => {\n      if (!item.deleted) {\n        item.delete(transaction);\n      } else {\n        // same as above\n        transaction._mergeStructs.push(item);\n      }\n    });\n\n    transaction.changed.delete(this.type);\n  }\n  /**\n   * @param {StructStore} store\n   */\n\n\n  gc(store) {\n    let item = this.type._start;\n\n    while (item !== null) {\n      item.gc(store, true);\n      item = item.right;\n    }\n\n    this.type._start = null;\n\n    this.type._map.forEach(\n    /** @param {Item | null} item */\n    item => {\n      while (item !== null) {\n        item.gc(store, true);\n        item = item.left;\n      }\n    });\n\n    this.type._map = new Map();\n  }\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n\n\n  write(encoder, offset) {\n    this.type._write(encoder);\n  }\n  /**\n   * @return {number}\n   */\n\n\n  getRef() {\n    return 7;\n  }\n\n}\n/**\n * @private\n *\n * @param {decoding.Decoder} decoder\n * @return {ContentType}\n */\n\n\nconst readContentType = decoder => new ContentType(typeRefs[readVarUint(decoder)](decoder));\n/**\n * @todo This should return several items\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {{item:Item, diff:number}}\n */\n\n\nconst followRedone = (store, id) => {\n  /**\n   * @type {ID|null}\n   */\n  let nextID = id;\n  let diff = 0;\n  let item;\n\n  do {\n    if (diff > 0) {\n      nextID = createID(nextID.client, nextID.clock + diff);\n    }\n\n    item = getItem(store, nextID);\n    diff = nextID.clock - item.id.clock;\n    nextID = item.redone;\n  } while (nextID !== null && item instanceof Item);\n\n  return {\n    item,\n    diff\n  };\n};\n/**\n * Make sure that neither item nor any of its parents is ever deleted.\n *\n * This property does not persist when storing it into a database or when\n * sending it to other peers\n *\n * @param {Item|null} item\n * @param {boolean} keep\n */\n\n\nconst keepItem = (item, keep) => {\n  while (item !== null && item.keep !== keep) {\n    item.keep = keep;\n    item =\n    /** @type {AbstractType<any>} */\n    item.parent._item;\n  }\n};\n/**\n * Split leftItem into two items\n * @param {Transaction} transaction\n * @param {Item} leftItem\n * @param {number} diff\n * @return {Item}\n *\n * @function\n * @private\n */\n\n\nconst splitItem = (transaction, leftItem, diff) => {\n  // create rightItem\n  const {\n    client,\n    clock\n  } = leftItem.id;\n  const rightItem = new Item(createID(client, clock + diff), leftItem, createID(client, clock + diff - 1), leftItem.right, leftItem.rightOrigin, leftItem.parent, leftItem.parentSub, leftItem.content.splice(diff));\n\n  if (leftItem.deleted) {\n    rightItem.deleted = true;\n  }\n\n  if (leftItem.keep) {\n    rightItem.keep = true;\n  }\n\n  if (leftItem.redone !== null) {\n    rightItem.redone = createID(leftItem.redone.client, leftItem.redone.clock + diff);\n  } // update left (do not set leftItem.rightOrigin as it will lead to problems when syncing)\n\n\n  leftItem.right = rightItem; // update right\n\n  if (rightItem.right !== null) {\n    rightItem.right.left = rightItem;\n  } // right is more specific.\n\n\n  transaction._mergeStructs.push(rightItem); // update parent._map\n\n\n  if (rightItem.parentSub !== null && rightItem.right === null) {\n    /** @type {AbstractType<any>} */\n    rightItem.parent._map.set(rightItem.parentSub, rightItem);\n  }\n\n  leftItem.length = diff;\n  return rightItem;\n};\n/**\n * Redoes the effect of this operation.\n *\n * @param {Transaction} transaction The Yjs instance.\n * @param {Item} item\n * @param {Set<Item>} redoitems\n *\n * @return {Item|null}\n *\n * @private\n */\n\n\nconst redoItem = (transaction, item, redoitems) => {\n  const doc = transaction.doc;\n  const store = doc.store;\n  const ownClientID = doc.clientID;\n  const redone = item.redone;\n\n  if (redone !== null) {\n    return getItemCleanStart(transaction, redone);\n  }\n\n  let parentItem =\n  /** @type {AbstractType<any>} */\n  item.parent._item;\n  /**\n   * @type {Item|null}\n   */\n\n  let left;\n  /**\n   * @type {Item|null}\n   */\n\n  let right;\n\n  if (item.parentSub === null) {\n    // Is an array item. Insert at the old position\n    left = item.left;\n    right = item;\n  } else {\n    // Is a map item. Insert as current value\n    left = item;\n\n    while (left.right !== null) {\n      left = left.right;\n\n      if (left.id.client !== ownClientID) {\n        // It is not possible to redo this item because it conflicts with a\n        // change from another client\n        return null;\n      }\n    }\n\n    if (left.right !== null) {\n      left =\n      /** @type {Item} */\n\n      /** @type {AbstractType<any>} */\n      item.parent._map.get(item.parentSub);\n    }\n\n    right = null;\n  } // make sure that parent is redone\n\n\n  if (parentItem !== null && parentItem.deleted === true && parentItem.redone === null) {\n    // try to undo parent if it will be undone anyway\n    if (!redoitems.has(parentItem) || redoItem(transaction, parentItem, redoitems) === null) {\n      return null;\n    }\n  }\n\n  if (parentItem !== null && parentItem.redone !== null) {\n    while (parentItem.redone !== null) {\n      parentItem = getItemCleanStart(transaction, parentItem.redone);\n    } // find next cloned_redo items\n\n\n    while (left !== null) {\n      /**\n       * @type {Item|null}\n       */\n      let leftTrace = left; // trace redone until parent matches\n\n      while (leftTrace !== null &&\n      /** @type {AbstractType<any>} */\n      leftTrace.parent._item !== parentItem) {\n        leftTrace = leftTrace.redone === null ? null : getItemCleanStart(transaction, leftTrace.redone);\n      }\n\n      if (leftTrace !== null &&\n      /** @type {AbstractType<any>} */\n      leftTrace.parent._item === parentItem) {\n        left = leftTrace;\n        break;\n      }\n\n      left = left.left;\n    }\n\n    while (right !== null) {\n      /**\n       * @type {Item|null}\n       */\n      let rightTrace = right; // trace redone until parent matches\n\n      while (rightTrace !== null &&\n      /** @type {AbstractType<any>} */\n      rightTrace.parent._item !== parentItem) {\n        rightTrace = rightTrace.redone === null ? null : getItemCleanStart(transaction, rightTrace.redone);\n      }\n\n      if (rightTrace !== null &&\n      /** @type {AbstractType<any>} */\n      rightTrace.parent._item === parentItem) {\n        right = rightTrace;\n        break;\n      }\n\n      right = right.right;\n    }\n  }\n\n  const nextClock = getState(store, ownClientID);\n  const nextId = createID(ownClientID, nextClock);\n  const redoneItem = new Item(nextId, left, left && left.lastId, right, right && right.id, parentItem === null ? item.parent :\n  /** @type {ContentType} */\n  parentItem.content.type, item.parentSub, item.content.copy());\n  item.redone = nextId;\n  keepItem(redoneItem, true);\n  redoneItem.integrate(transaction, 0);\n  return redoneItem;\n};\n/**\n * Abstract class that represents any content.\n */\n\n\nclass Item extends AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {Item | null} left\n   * @param {ID | null} origin\n   * @param {Item | null} right\n   * @param {ID | null} rightOrigin\n   * @param {AbstractType<any>|ID|null} parent Is a type if integrated, is null if it is possible to copy parent from left or right, is ID before integration to search for it.\n   * @param {string | null} parentSub\n   * @param {AbstractContent} content\n   */\n  constructor(id, left, origin, right, rightOrigin, parent, parentSub, content) {\n    super(id, content.getLength());\n    /**\n     * The item that was originally to the left of this item.\n     * @type {ID | null}\n     */\n\n    this.origin = origin;\n    /**\n     * The item that is currently to the left of this item.\n     * @type {Item | null}\n     */\n\n    this.left = left;\n    /**\n     * The item that is currently to the right of this item.\n     * @type {Item | null}\n     */\n\n    this.right = right;\n    /**\n     * The item that was originally to the right of this item.\n     * @type {ID | null}\n     */\n\n    this.rightOrigin = rightOrigin;\n    /**\n     * @type {AbstractType<any>|ID|null}\n     */\n\n    this.parent = parent;\n    /**\n     * If the parent refers to this item with some kind of key (e.g. YMap, the\n     * key is specified here. The key is then used to refer to the list in which\n     * to insert this item. If `parentSub = null` type._start is the list in\n     * which to insert to. Otherwise it is `parent._map`.\n     * @type {String | null}\n     */\n\n    this.parentSub = parentSub;\n    /**\n     * Whether this item was deleted or not.\n     * @type {Boolean}\n     */\n\n    this.deleted = false;\n    /**\n     * If this type's effect is reundone this type refers to the type that undid\n     * this operation.\n     * @type {ID | null}\n     */\n\n    this.redone = null;\n    /**\n     * @type {AbstractContent}\n     */\n\n    this.content = content;\n    /**\n     * If true, do not garbage collect this Item.\n     */\n\n    this.keep = false;\n  }\n\n  get countable() {\n    return this.content.isCountable();\n  }\n  /**\n   * Return missing ids, or define missing items and return null.\n   *\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | ID}\n   */\n\n\n  getMissing(transaction, store) {\n    const origin = this.origin;\n    const rightOrigin = this.rightOrigin;\n    const parent =\n    /** @type {ID} */\n    this.parent;\n\n    if (origin && origin.clock >= getState(store, origin.client)) {\n      return this.origin;\n    }\n\n    if (rightOrigin && rightOrigin.clock >= getState(store, rightOrigin.client)) {\n      return this.rightOrigin;\n    }\n\n    if (parent && parent.constructor === ID && parent.clock >= getState(store, parent.client)) {\n      return parent;\n    } // We have all missing ids, now find the items\n\n\n    if (origin) {\n      this.left = getItemCleanEnd(transaction, store, origin);\n      this.origin = this.left.lastId;\n    }\n\n    if (rightOrigin) {\n      this.right = getItemCleanStart(transaction, rightOrigin);\n      this.rightOrigin = this.right.id;\n    }\n\n    if (parent && parent.constructor === ID) {\n      if (parent.clock < getState(store, parent.client)) {\n        const parentItem = getItem(store, parent);\n\n        if (parentItem.constructor === GC) {\n          this.parent = null;\n        } else {\n          this.parent =\n          /** @type {ContentType} */\n          parentItem.content.type;\n        }\n      } else {\n        return parent;\n      }\n    } // only set item if this shouldn't be garbage collected\n\n\n    if (!this.parent) {\n      if (this.left && this.left.constructor === Item) {\n        this.parent = this.left.parent;\n        this.parentSub = this.left.parentSub;\n      }\n\n      if (this.right && this.right.constructor === Item) {\n        this.parent = this.right.parent;\n        this.parentSub = this.right.parentSub;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n\n\n  integrate(transaction, offset) {\n    const store = transaction.doc.store;\n\n    if (offset > 0) {\n      this.id.clock += offset;\n      this.left = getItemCleanEnd(transaction, store, createID(this.id.client, this.id.clock - 1));\n      this.origin = this.left.lastId;\n      this.content = this.content.splice(offset);\n      this.length -= offset;\n    }\n\n    const parentSub = this.parentSub;\n    const length = this.length;\n    const parent =\n    /** @type {AbstractType<any>|null} */\n    this.parent;\n\n    if (parent) {\n      /**\n       * @type {Item|null}\n       */\n      let left = this.left;\n      /**\n       * @type {Item|null}\n       */\n\n      let o; // set o to the first conflicting item\n\n      if (left !== null) {\n        o = left.right;\n      } else if (parentSub !== null) {\n        o = parent._map.get(parentSub) || null;\n\n        while (o !== null && o.left !== null) {\n          o = o.left;\n        }\n      } else {\n        o = parent._start;\n      } // TODO: use something like DeleteSet here (a tree implementation would be best)\n      // @todo use global set definitions\n\n      /**\n       * @type {Set<Item>}\n       */\n\n\n      const conflictingItems = new Set();\n      /**\n       * @type {Set<Item>}\n       */\n\n      const itemsBeforeOrigin = new Set(); // Let c in conflictingItems, b in itemsBeforeOrigin\n      // ***{origin}bbbb{this}{c,b}{c,b}{o}***\n      // Note that conflictingItems is a subset of itemsBeforeOrigin\n\n      while (o !== null && o !== this.right) {\n        itemsBeforeOrigin.add(o);\n        conflictingItems.add(o);\n\n        if (compareIDs(this.origin, o.origin)) {\n          // case 1\n          if (o.id.client < this.id.client) {\n            left = o;\n            conflictingItems.clear();\n          }\n        } else if (o.origin !== null && itemsBeforeOrigin.has(getItem(store, o.origin))) {\n          // case 2\n          if (o.origin === null || !conflictingItems.has(getItem(store, o.origin))) {\n            left = o;\n            conflictingItems.clear();\n          }\n        } else {\n          break;\n        }\n\n        o = o.right;\n      }\n\n      this.left = left; // reconnect left/right + update parent map/start if necessary\n\n      if (left !== null) {\n        const right = left.right;\n        this.right = right;\n        left.right = this;\n      } else {\n        let r;\n\n        if (parentSub !== null) {\n          r = parent._map.get(parentSub) || null;\n\n          while (r !== null && r.left !== null) {\n            r = r.left;\n          }\n        } else {\n          r = parent._start;\n          parent._start = this;\n        }\n\n        this.right = r;\n      }\n\n      if (this.right !== null) {\n        this.right.left = this;\n      } else if (parentSub !== null) {\n        // set as current parent value if right === null and this is parentSub\n        parent._map.set(parentSub, this);\n\n        if (left !== null) {\n          // this is the current attribute value of parent. delete right\n          left.delete(transaction);\n        }\n      } // adjust length of parent\n\n\n      if (parentSub === null && this.countable && !this.deleted) {\n        parent._length += length;\n      }\n\n      addStruct(store, this);\n      this.content.integrate(transaction, this); // add parent to transaction.changed\n\n      addChangedTypeToTransaction(transaction, parent, parentSub);\n\n      if (parent._item !== null && parent._item.deleted || this.right !== null && parentSub !== null) {\n        // delete if parent is deleted or if this is not the current attribute value of parent\n        this.delete(transaction);\n      }\n    } else {\n      // parent is not defined. Integrate GC struct instead\n      new GC(this.id, this.length).integrate(transaction, 0);\n    }\n  }\n  /**\n   * Returns the next non-deleted item\n   */\n\n\n  get next() {\n    let n = this.right;\n\n    while (n !== null && n.deleted) {\n      n = n.right;\n    }\n\n    return n;\n  }\n  /**\n   * Returns the previous non-deleted item\n   */\n\n\n  get prev() {\n    let n = this.left;\n\n    while (n !== null && n.deleted) {\n      n = n.left;\n    }\n\n    return n;\n  }\n  /**\n   * Computes the last content address of this Item.\n   */\n\n\n  get lastId() {\n    // allocating ids is pretty costly because of the amount of ids created, so we try to reuse whenever possible\n    return this.length === 1 ? this.id : createID(this.id.client, this.id.clock + this.length - 1);\n  }\n  /**\n   * Try to merge two items\n   *\n   * @param {Item} right\n   * @return {boolean}\n   */\n\n\n  mergeWith(right) {\n    if (compareIDs(right.origin, this.lastId) && this.right === right && compareIDs(this.rightOrigin, right.rightOrigin) && this.id.client === right.id.client && this.id.clock + this.length === right.id.clock && this.deleted === right.deleted && this.redone === null && right.redone === null && this.content.constructor === right.content.constructor && this.content.mergeWith(right.content)) {\n      if (right.keep) {\n        this.keep = true;\n      }\n\n      this.right = right.right;\n\n      if (this.right !== null) {\n        this.right.left = this;\n      }\n\n      this.length += right.length;\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Mark this Item as deleted.\n   *\n   * @param {Transaction} transaction\n   */\n\n\n  delete(transaction) {\n    if (!this.deleted) {\n      const parent =\n      /** @type {AbstractType<any>} */\n      this.parent; // adjust the length of parent\n\n      if (this.countable && this.parentSub === null) {\n        parent._length -= this.length;\n      }\n\n      this.deleted = true;\n      addToDeleteSet(transaction.deleteSet, this.id, this.length);\n      setIfUndefined(transaction.changed, parent, create).add(this.parentSub);\n      this.content.delete(transaction);\n    }\n  }\n  /**\n   * @param {StructStore} store\n   * @param {boolean} parentGCd\n   */\n\n\n  gc(store, parentGCd) {\n    if (!this.deleted) {\n      throw unexpectedCase();\n    }\n\n    this.content.gc(store);\n\n    if (parentGCd) {\n      replaceStruct(store, this, new GC(this.id, this.length));\n    } else {\n      this.content = new ContentDeleted(this.length);\n    }\n  }\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {encoding.Encoder} encoder The encoder to write data to.\n   * @param {number} offset\n   */\n\n\n  write(encoder, offset) {\n    const origin = offset > 0 ? createID(this.id.client, this.id.clock + offset - 1) : this.origin;\n    const rightOrigin = this.rightOrigin;\n    const parentSub = this.parentSub;\n    const info = this.content.getRef() & BITS5 | (origin === null ? 0 : BIT8) | ( // origin is defined\n    rightOrigin === null ? 0 : BIT7) | ( // right origin is defined\n    parentSub === null ? 0 : BIT6); // parentSub is non-null\n\n    writeUint8(encoder, info);\n\n    if (origin !== null) {\n      writeID(encoder, origin);\n    }\n\n    if (rightOrigin !== null) {\n      writeID(encoder, rightOrigin);\n    }\n\n    if (origin === null && rightOrigin === null) {\n      const parent =\n      /** @type {AbstractType<any>} */\n      this.parent;\n      const parentItem = parent._item;\n\n      if (parentItem === null) {\n        // parent type on y._map\n        // find the correct key\n        const ykey = findRootTypeKey(parent);\n        writeVarUint(encoder, 1); // write parentYKey\n\n        writeVarString(encoder, ykey);\n      } else {\n        writeVarUint(encoder, 0); // write parent id\n\n        writeID(encoder, parentItem.id);\n      }\n\n      if (parentSub !== null) {\n        writeVarString(encoder, parentSub);\n      }\n    }\n\n    this.content.write(encoder, offset);\n  }\n\n}\n/**\n * @param {decoding.Decoder} decoder\n * @param {number} info\n */\n\n\nconst readItemContent = (decoder, info) => contentRefs[info & BITS5](decoder);\n/**\n * A lookup map for reading Item content.\n *\n * @type {Array<function(decoding.Decoder):AbstractContent>}\n */\n\n\nconst contentRefs = [() => {\n  throw unexpectedCase();\n}, // GC is not ItemContent\nreadContentDeleted, readContentJSON, readContentBinary, readContentString, readContentEmbed, readContentFormat, readContentType, readContentAny];\n/**\n * @param {decoding.Decoder} decoder\n * @param {ID} id\n * @param {number} info\n * @param {Doc} doc\n */\n\nconst readItem = (decoder, id, info, doc) => {\n  /**\n   * The item that was originally to the left of this item.\n   * @type {ID | null}\n   */\n  const origin = (info & BIT8) === BIT8 ? readID(decoder) : null;\n  /**\n   * The item that was originally to the right of this item.\n   * @type {ID | null}\n   */\n\n  const rightOrigin = (info & BIT7) === BIT7 ? readID(decoder) : null;\n  const canCopyParentInfo = (info & (BIT7 | BIT8)) === 0;\n  const hasParentYKey = canCopyParentInfo ? readVarUint(decoder) === 1 : false;\n  /**\n   * If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n   * and we read the next string as parentYKey.\n   * It indicates how we store/retrieve parent from `y.share`\n   * @type {string|null}\n   */\n\n  const parentYKey = canCopyParentInfo && hasParentYKey ? readVarString(decoder) : null;\n  /**\n   * The parent type.\n   * @type {ID | AbstractType<any> | null}\n   */\n\n  const parent = canCopyParentInfo && !hasParentYKey ? readID(decoder) : parentYKey ? doc.get(parentYKey) : null;\n  /**\n   * If the parent refers to this item with some kind of key (e.g. YMap, the\n   * key is specified here. The key is then used to refer to the list in which\n   * to insert this item. If `parentSub = null` type._start is the list in\n   * which to insert to. Otherwise it is `parent._map`.\n   * @type {String | null}\n   */\n\n  const parentSub = canCopyParentInfo && (info & BIT6) === BIT6 ? readVarString(decoder) : null;\n  /**\n   * @type {AbstractContent}\n   */\n\n  const content = readItemContent(decoder, info);\n  return new Item(id, null, origin, null, rightOrigin, parent, parentSub, content);\n};\n\nexport { AbstractStruct, AbstractType, YArray as Array, ContentAny, ContentBinary, ContentDeleted, ContentEmbed, ContentFormat, ContentJSON, ContentString, ContentType, Doc, GC, ID, Item, YMap as Map, PermanentUserData, RelativePosition, Snapshot, YText as Text, Transaction, UndoManager, YXmlElement as XmlElement, YXmlFragment as XmlFragment, YXmlHook as XmlHook, YXmlText as XmlText, YArrayEvent, YEvent, YMapEvent, YXmlEvent, applyUpdate, compareIDs, compareRelativePositions, createAbsolutePositionFromRelativePosition, createDeleteSet, createDeleteSetFromStructStore, createID, createRelativePositionFromJSON, createRelativePositionFromTypeIndex, createSnapshot, decodeSnapshot, emptySnapshot, encodeSnapshot, encodeStateAsUpdate, encodeStateVector, equalSnapshots, findRootTypeKey, getState, getTypeChildren, isDeleted, isParentOf, iterateDeletedStructs, readRelativePosition, readUpdate, snapshot, transact, tryGc, typeListToArraySnapshot, typeMapGetSnapshot, writeRelativePosition };","map":{"version":3,"sources":["../src/utils/DeleteSet.js","../src/utils/Doc.js","../src/utils/encoding.js","../src/utils/EventHandler.js","../src/utils/ID.js","../src/utils/isParentOf.js","../src/utils/PermanentUserData.js","../src/utils/RelativePosition.js","../src/utils/Snapshot.js","../src/utils/StructStore.js","../src/utils/Transaction.js","../src/utils/UndoManager.js","../src/utils/YEvent.js","../src/types/AbstractType.js","../src/types/YArray.js","../src/types/YMap.js","../src/types/YText.js","../src/types/YXmlFragment.js","../src/types/YXmlElement.js","../src/types/YXmlEvent.js","../src/types/YXmlHook.js","../src/types/YXmlText.js","../src/structs/AbstractStruct.js","../src/structs/GC.js","../src/structs/ContentBinary.js","../src/structs/ContentDeleted.js","../src/structs/ContentEmbed.js","../src/structs/ContentFormat.js","../src/structs/ContentJSON.js","../src/structs/ContentAny.js","../src/structs/ContentString.js","../src/structs/ContentType.js","../src/structs/Item.js"],"names":["math.floor","array.appendTo","map.setIfUndefined","encoding.writeVarUint","decoding.readVarUint","encoding.createEncoder","decoding.createDecoder","encoding.toUint8Array","random.uint32","decoding.readUint8","binary.BITS5","f.callAll","error.unexpectedCase","encoding.writeUint8","encoding.writeVarString","decoding.readVarString","set.create","map.any","math.min","math.max","logging.print","logging.ORANGE","logging.BOLD","logging.UNBOLD","logging.RED","time.getUnixTime","array.last","error.methodUnimplemented","error.create","iterator.iteratorFilter","iterator.iteratorMap","object.equalFlat","map.create","map.copy","encoding.writeVarUint8Array","buffer.copyUint8Array","decoding.readVarUint8Array","encoding.writeAny","decoding.readAny","maplib.setIfUndefined","binary.BIT8","binary.BIT7","binary.BIT6"],"mappings":"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","sourcesContent":["\nimport {\n  findIndexSS,\n  getState,\n  splitItem,\n  createID,\n  iterateStructs,\n  Item, AbstractStruct, GC, StructStore, Transaction, ID // eslint-disable-line\n} from '../internals.js'\n\nimport * as array from 'lib0/array.js'\nimport * as math from 'lib0/math.js'\nimport * as map from 'lib0/map.js'\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\n\nexport class DeleteItem {\n  /**\n   * @param {number} clock\n   * @param {number} len\n   */\n  constructor (clock, len) {\n    /**\n     * @type {number}\n     */\n    this.clock = clock\n    /**\n     * @type {number}\n     */\n    this.len = len\n  }\n}\n\n/**\n * We no longer maintain a DeleteStore. DeleteSet is a temporary object that is created when needed.\n * - When created in a transaction, it must only be accessed after sorting, and merging\n *   - This DeleteSet is send to other clients\n * - We do not create a DeleteSet when we send a sync message. The DeleteSet message is created directly from StructStore\n * - We read a DeleteSet as part of a sync/update message. In this case the DeleteSet is already sorted and merged.\n */\nexport class DeleteSet {\n  constructor () {\n    /**\n     * @type {Map<number,Array<DeleteItem>>}\n     */\n    this.clients = new Map()\n  }\n}\n\n/**\n * Iterate over all structs that the DeleteSet gc's.\n *\n * @param {Transaction} transaction\n * @param {DeleteSet} ds\n * @param {function(GC|Item):void} f\n *\n * @function\n */\nexport const iterateDeletedStructs = (transaction, ds, f) =>\n  ds.clients.forEach((deletes, clientid) => {\n    const structs = /** @type {Array<GC|Item>} */ (transaction.doc.store.clients.get(clientid))\n    for (let i = 0; i < deletes.length; i++) {\n      const del = deletes[i]\n      iterateStructs(transaction, structs, del.clock, del.len, f)\n    }\n  })\n\n/**\n * @param {Array<DeleteItem>} dis\n * @param {number} clock\n * @return {number|null}\n *\n * @private\n * @function\n */\nexport const findIndexDS = (dis, clock) => {\n  let left = 0\n  let right = dis.length - 1\n  while (left <= right) {\n    const midindex = math.floor((left + right) / 2)\n    const mid = dis[midindex]\n    const midclock = mid.clock\n    if (midclock <= clock) {\n      if (clock < midclock + mid.len) {\n        return midindex\n      }\n      left = midindex + 1\n    } else {\n      right = midindex - 1\n    }\n  }\n  return null\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {ID} id\n * @return {boolean}\n *\n * @private\n * @function\n */\nexport const isDeleted = (ds, id) => {\n  const dis = ds.clients.get(id.client)\n  return dis !== undefined && findIndexDS(dis, id.clock) !== null\n}\n\n/**\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\nexport const sortAndMergeDeleteSet = ds => {\n  ds.clients.forEach(dels => {\n    dels.sort((a, b) => a.clock - b.clock)\n    // merge items without filtering or splicing the array\n    // i is the current pointer\n    // j refers to the current insert position for the pointed item\n    // try to merge dels[i] into dels[j-1] or set dels[j]=dels[i]\n    let i, j\n    for (i = 1, j = 1; i < dels.length; i++) {\n      const left = dels[j - 1]\n      const right = dels[i]\n      if (left.clock + left.len === right.clock) {\n        left.len += right.len\n      } else {\n        if (j < i) {\n          dels[j] = right\n        }\n        j++\n      }\n    }\n    dels.length = j\n  })\n}\n\n/**\n * @param {Array<DeleteSet>} dss\n * @return {DeleteSet} A fresh DeleteSet\n */\nexport const mergeDeleteSets = dss => {\n  const merged = new DeleteSet()\n  for (let dssI = 0; dssI < dss.length; dssI++) {\n    dss[dssI].clients.forEach((delsLeft, client) => {\n      if (!merged.clients.has(client)) {\n        // Write all missing keys from current ds and all following.\n        // If merged already contains `client` current ds has already been added.\n        /**\n         * @type {Array<DeleteItem>}\n         */\n        const dels = delsLeft.slice()\n        for (let i = dssI + 1; i < dss.length; i++) {\n          array.appendTo(dels, dss[i].clients.get(client) || [])\n        }\n        merged.clients.set(client, dels)\n      }\n    })\n  }\n  sortAndMergeDeleteSet(merged)\n  return merged\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {ID} id\n * @param {number} length\n *\n * @private\n * @function\n */\nexport const addToDeleteSet = (ds, id, length) => {\n  map.setIfUndefined(ds.clients, id.client, () => []).push(new DeleteItem(id.clock, length))\n}\n\nexport const createDeleteSet = () => new DeleteSet()\n\n/**\n * @param {StructStore} ss\n * @return {DeleteSet} Merged and sorted DeleteSet\n *\n * @private\n * @function\n */\nexport const createDeleteSetFromStructStore = ss => {\n  const ds = createDeleteSet()\n  ss.clients.forEach((structs, client) => {\n    /**\n     * @type {Array<DeleteItem>}\n     */\n    const dsitems = []\n    for (let i = 0; i < structs.length; i++) {\n      const struct = structs[i]\n      if (struct.deleted) {\n        const clock = struct.id.clock\n        let len = struct.length\n        if (i + 1 < structs.length) {\n          for (let next = structs[i + 1]; i + 1 < structs.length && next.id.clock === clock + len && next.deleted; next = structs[++i + 1]) {\n            len += next.length\n          }\n        }\n        dsitems.push(new DeleteItem(clock, len))\n      }\n    }\n    if (dsitems.length > 0) {\n      ds.clients.set(client, dsitems)\n    }\n  })\n  return ds\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {DeleteSet} ds\n *\n * @private\n * @function\n */\nexport const writeDeleteSet = (encoder, ds) => {\n  encoding.writeVarUint(encoder, ds.clients.size)\n  ds.clients.forEach((dsitems, client) => {\n    encoding.writeVarUint(encoder, client)\n    const len = dsitems.length\n    encoding.writeVarUint(encoder, len)\n    for (let i = 0; i < len; i++) {\n      const item = dsitems[i]\n      encoding.writeVarUint(encoder, item.clock)\n      encoding.writeVarUint(encoder, item.len)\n    }\n  })\n}\n\n/**\n * @param {decoding.Decoder} decoder\n * @return {DeleteSet}\n *\n * @private\n * @function\n */\nexport const readDeleteSet = decoder => {\n  const ds = new DeleteSet()\n  const numClients = decoding.readVarUint(decoder)\n  for (let i = 0; i < numClients; i++) {\n    const client = decoding.readVarUint(decoder)\n    const numberOfDeletes = decoding.readVarUint(decoder)\n    for (let i = 0; i < numberOfDeletes; i++) {\n      addToDeleteSet(ds, createID(client, decoding.readVarUint(decoder)), decoding.readVarUint(decoder))\n    }\n  }\n  return ds\n}\n\n/**\n * @param {decoding.Decoder} decoder\n * @param {Transaction} transaction\n * @param {StructStore} store\n *\n * @private\n * @function\n */\nexport const readAndApplyDeleteSet = (decoder, transaction, store) => {\n  const unappliedDS = new DeleteSet()\n  const numClients = decoding.readVarUint(decoder)\n  for (let i = 0; i < numClients; i++) {\n    const client = decoding.readVarUint(decoder)\n    const numberOfDeletes = decoding.readVarUint(decoder)\n    const structs = store.clients.get(client) || []\n    const state = getState(store, client)\n    for (let i = 0; i < numberOfDeletes; i++) {\n      const clock = decoding.readVarUint(decoder)\n      const len = decoding.readVarUint(decoder)\n      if (clock < state) {\n        if (state < clock + len) {\n          addToDeleteSet(unappliedDS, createID(client, state), clock + len - state)\n        }\n        let index = findIndexSS(structs, clock)\n        /**\n         * We can ignore the case of GC and Delete structs, because we are going to skip them\n         * @type {Item}\n         */\n        // @ts-ignore\n        let struct = structs[index]\n        // split the first item if necessary\n        if (!struct.deleted && struct.id.clock < clock) {\n          structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock))\n          index++ // increase we now want to use the next struct\n        }\n        while (index < structs.length) {\n          // @ts-ignore\n          struct = structs[index++]\n          if (struct.id.clock < clock + len) {\n            if (!struct.deleted) {\n              if (clock + len < struct.id.clock + struct.length) {\n                structs.splice(index, 0, splitItem(transaction, struct, clock + len - struct.id.clock))\n              }\n              struct.delete(transaction)\n            }\n          } else {\n            break\n          }\n        }\n      } else {\n        addToDeleteSet(unappliedDS, createID(client, clock), len)\n      }\n    }\n  }\n  if (unappliedDS.clients.size > 0) {\n    // TODO: no need for encoding+decoding ds anymore\n    const unappliedDSEncoder = encoding.createEncoder()\n    writeDeleteSet(unappliedDSEncoder, unappliedDS)\n    store.pendingDeleteReaders.push(decoding.createDecoder(encoding.toUint8Array(unappliedDSEncoder)))\n  }\n}\n","/**\n * @module Y\n */\n\nimport {\n  StructStore,\n  AbstractType,\n  YArray,\n  YText,\n  YMap,\n  YXmlFragment,\n  transact,\n  Item, Transaction, YEvent // eslint-disable-line\n} from '../internals.js'\n\nimport { Observable } from 'lib0/observable.js'\nimport * as random from 'lib0/random.js'\nimport * as map from 'lib0/map.js'\n\nexport const generateNewClientId = random.uint32\n\n/**\n * A Yjs instance handles the state of shared data.\n * @extends Observable<string>\n */\nexport class Doc extends Observable {\n  /**\n   * @param {Object} conf configuration\n   * @param {boolean} [conf.gc] Disable garbage collection (default: gc=true)\n   * @param {function(Item):boolean} [conf.gcFilter] Will be called before an Item is garbage collected. Return false to keep the Item.\n   */\n  constructor ({ gc = true, gcFilter = () => true } = {}) {\n    super()\n    this.gc = gc\n    this.gcFilter = gcFilter\n    this.clientID = generateNewClientId()\n    /**\n     * @type {Map<string, AbstractType<YEvent>>}\n     */\n    this.share = new Map()\n    this.store = new StructStore()\n    /**\n     * @type {Transaction | null}\n     */\n    this._transaction = null\n    /**\n     * @type {Array<Transaction>}\n     */\n    this._transactionCleanups = []\n  }\n\n  /**\n   * Changes that happen inside of a transaction are bundled. This means that\n   * the observer fires _after_ the transaction is finished and that all changes\n   * that happened inside of the transaction are sent as one message to the\n   * other peers.\n   *\n   * @param {function(Transaction):void} f The function that should be executed as a transaction\n   * @param {any} [origin] Origin of who started the transaction. Will be stored on transaction.origin\n   *\n   * @public\n   */\n  transact (f, origin = null) {\n    transact(this, f, origin)\n  }\n\n  /**\n   * Define a shared data type.\n   *\n   * Multiple calls of `y.get(name, TypeConstructor)` yield the same result\n   * and do not overwrite each other. I.e.\n   * `y.define(name, Y.Array) === y.define(name, Y.Array)`\n   *\n   * After this method is called, the type is also available on `y.share.get(name)`.\n   *\n   * *Best Practices:*\n   * Define all types right after the Yjs instance is created and store them in a separate object.\n   * Also use the typed methods `getText(name)`, `getArray(name)`, ..\n   *\n   * @example\n   *   const y = new Y(..)\n   *   const appState = {\n   *     document: y.getText('document')\n   *     comments: y.getArray('comments')\n   *   }\n   *\n   * @param {string} name\n   * @param {Function} TypeConstructor The constructor of the type definition. E.g. Y.Text, Y.Array, Y.Map, ...\n   * @return {AbstractType<any>} The created type. Constructed with TypeConstructor\n   *\n   * @public\n   */\n  get (name, TypeConstructor = AbstractType) {\n    const type = map.setIfUndefined(this.share, name, () => {\n      // @ts-ignore\n      const t = new TypeConstructor()\n      t._integrate(this, null)\n      return t\n    })\n    const Constr = type.constructor\n    if (TypeConstructor !== AbstractType && Constr !== TypeConstructor) {\n      if (Constr === AbstractType) {\n        // @ts-ignore\n        const t = new TypeConstructor()\n        t._map = type._map\n        type._map.forEach(/** @param {Item?} n */ n => {\n          for (; n !== null; n = n.left) {\n            // @ts-ignore\n            n.parent = t\n          }\n        })\n        t._start = type._start\n        for (let n = t._start; n !== null; n = n.right) {\n          n.parent = t\n        }\n        t._length = type._length\n        this.share.set(name, t)\n        t._integrate(this, null)\n        return t\n      } else {\n        throw new Error(`Type with the name ${name} has already been defined with a different constructor`)\n      }\n    }\n    return type\n  }\n\n  /**\n   * @template T\n   * @param {string} name\n   * @return {YArray<T>}\n   *\n   * @public\n   */\n  getArray (name) {\n    // @ts-ignore\n    return this.get(name, YArray)\n  }\n\n  /**\n   * @param {string} name\n   * @return {YText}\n   *\n   * @public\n   */\n  getText (name) {\n    // @ts-ignore\n    return this.get(name, YText)\n  }\n\n  /**\n   * @param {string} name\n   * @return {YMap<any>}\n   *\n   * @public\n   */\n  getMap (name) {\n    // @ts-ignore\n    return this.get(name, YMap)\n  }\n\n  /**\n   * @param {string} name\n   * @return {YXmlFragment}\n   *\n   * @public\n   */\n  getXmlFragment (name) {\n    // @ts-ignore\n    return this.get(name, YXmlFragment)\n  }\n\n  /**\n   * Emit `destroy` event and unregister all event handlers.\n   */\n  destroy () {\n    this.emit('destroyed', [true])\n    super.destroy()\n  }\n\n  /**\n   * @param {string} eventName\n   * @param {function} f\n   */\n  on (eventName, f) {\n    super.on(eventName, f)\n  }\n\n  /**\n   * @param {string} eventName\n   * @param {function} f\n   */\n  off (eventName, f) {\n    super.off(eventName, f)\n  }\n}\n","\n/**\n * @module encoding\n *\n * We use the first five bits in the info flag for determining the type of the struct.\n *\n * 0: GC\n * 1: Item with Deleted content\n * 2: Item with JSON content\n * 3: Item with Binary content\n * 4: Item with String content\n * 5: Item with Embed content (for richtext content)\n * 6: Item with Format content (a formatting marker for richtext content)\n * 7: Item with Type\n */\n\nimport {\n  findIndexSS,\n  writeID,\n  readID,\n  getState,\n  createID,\n  getStateVector,\n  readAndApplyDeleteSet,\n  writeDeleteSet,\n  createDeleteSetFromStructStore,\n  transact,\n  readItem,\n  Doc, Transaction, GC, Item, StructStore, ID // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\nimport * as binary from 'lib0/binary.js'\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Array<GC|Item>} structs All structs by `client`\n * @param {number} client\n * @param {number} clock write structs starting with `ID(client,clock)`\n *\n * @function\n */\nconst writeStructs = (encoder, structs, client, clock) => {\n  // write first id\n  const startNewStructs = findIndexSS(structs, clock)\n  // write # encoded structs\n  encoding.writeVarUint(encoder, structs.length - startNewStructs)\n  writeID(encoder, createID(client, clock))\n  const firstStruct = structs[startNewStructs]\n  // write first struct with an offset\n  firstStruct.write(encoder, clock - firstStruct.id.clock)\n  for (let i = startNewStructs + 1; i < structs.length; i++) {\n    structs[i].write(encoder, 0)\n  }\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {StructStore} store\n * @param {Map<number,number>} _sm\n *\n * @private\n * @function\n */\nexport const writeClientsStructs = (encoder, store, _sm) => {\n  // we filter all valid _sm entries into sm\n  const sm = new Map()\n  _sm.forEach((clock, client) => {\n    // only write if new structs are available\n    if (getState(store, client) > clock) {\n      sm.set(client, clock)\n    }\n  })\n  getStateVector(store).forEach((clock, client) => {\n    if (!_sm.has(client)) {\n      sm.set(client, 0)\n    }\n  })\n  // write # states that were updated\n  encoding.writeVarUint(encoder, sm.size)\n  // Write items with higher client ids first\n  // This heavily improves the conflict algorithm.\n  Array.from(sm.entries()).sort((a, b) => b[0] - a[0]).forEach(([client, clock]) => {\n    // @ts-ignore\n    writeStructs(encoder, store.clients.get(client), client, clock)\n  })\n}\n\n/**\n * @param {decoding.Decoder} decoder The decoder object to read data from.\n * @param {Map<number,Array<GC|Item>>} clientRefs\n * @param {Doc} doc\n * @return {Map<number,Array<GC|Item>>}\n *\n * @private\n * @function\n */\nexport const readClientsStructRefs = (decoder, clientRefs, doc) => {\n  const numOfStateUpdates = decoding.readVarUint(decoder)\n  for (let i = 0; i < numOfStateUpdates; i++) {\n    const numberOfStructs = decoding.readVarUint(decoder)\n    const nextID = readID(decoder)\n    const nextIdClient = nextID.client\n    let nextIdClock = nextID.clock\n    /**\n     * @type {Array<GC|Item>}\n     */\n    const refs = []\n    clientRefs.set(nextIdClient, refs)\n    for (let i = 0; i < numberOfStructs; i++) {\n      const info = decoding.readUint8(decoder)\n      const id = createID(nextIdClient, nextIdClock)\n      const struct = (binary.BITS5 & info) === 0 ? new GC(id, decoding.readVarUint(decoder)) : readItem(decoder, id, info, doc)\n      refs.push(struct)\n      nextIdClock += struct.length\n    }\n  }\n  return clientRefs\n}\n\n/**\n * Resume computing structs generated by struct readers.\n *\n * While there is something to do, we integrate structs in this order\n * 1. top element on stack, if stack is not empty\n * 2. next element from current struct reader (if empty, use next struct reader)\n *\n * If struct causally depends on another struct (ref.missing), we put next reader of\n * `ref.id.client` on top of stack.\n *\n * At some point we find a struct that has no causal dependencies,\n * then we start emptying the stack.\n *\n * It is not possible to have circles: i.e. struct1 (from client1) depends on struct2 (from client2)\n * depends on struct3 (from client1). Therefore the max stack size is eqaul to `structReaders.length`.\n *\n * This method is implemented in a way so that we can resume computation if this update\n * causally depends on another update.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n *\n * @private\n * @function\n */\nconst resumeStructIntegration = (transaction, store) => {\n  const stack = store.pendingStack\n  const clientsStructRefs = store.pendingClientsStructRefs\n  // iterate over all struct readers until we are done\n  while (stack.length !== 0 || clientsStructRefs.size !== 0) {\n    if (stack.length === 0) {\n      // take any first struct from clientsStructRefs and put it on the stack\n      const [client, structRefs] = clientsStructRefs.entries().next().value\n      stack.push(structRefs.refs[structRefs.i++])\n      if (structRefs.refs.length === structRefs.i) {\n        clientsStructRefs.delete(client)\n      }\n    }\n    const ref = stack[stack.length - 1]\n    const refID = ref.id\n    const client = refID.client\n    const refClock = refID.clock\n    const localClock = getState(store, client)\n    const offset = refClock < localClock ? localClock - refClock : 0\n    const missing = ref.getMissing(transaction, store)\n    if (refClock + offset !== localClock) {\n      // A previous message from this client is missing\n      // check if there is a pending structRef with a smaller clock and switch them\n      const structRefs = clientsStructRefs.get(client)\n      if (structRefs !== undefined) {\n        const r = structRefs.refs[structRefs.i]\n        if (r.id.clock < refClock) {\n          // put ref with smaller clock on stack instead and continue\n          structRefs.refs[structRefs.i] = ref\n          stack[stack.length - 1] = r\n          // sort the set because this approach might bring the list out of order\n          structRefs.refs = structRefs.refs.slice(structRefs.i).sort((r1, r2) => r1.id.clock - r2.id.clock)\n          structRefs.i = 0\n          continue\n        }\n      }\n      // wait until missing struct is available\n      return\n    }\n    if (missing) {\n      const client = missing.client\n      // get the struct reader that has the missing struct\n      const structRefs = clientsStructRefs.get(client)\n      if (structRefs === undefined) {\n        // This update message causally depends on another update message.\n        return\n      }\n      stack.push(structRefs.refs[structRefs.i++])\n      if (structRefs.i === structRefs.refs.length) {\n        clientsStructRefs.delete(client)\n      }\n    } else {\n      if (offset < ref.length) {\n        ref.integrate(transaction, offset)\n      }\n      stack.pop()\n    }\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {StructStore} store\n *\n * @private\n * @function\n */\nexport const tryResumePendingDeleteReaders = (transaction, store) => {\n  const pendingReaders = store.pendingDeleteReaders\n  store.pendingDeleteReaders = []\n  for (let i = 0; i < pendingReaders.length; i++) {\n    readAndApplyDeleteSet(pendingReaders[i], transaction, store)\n  }\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Transaction} transaction\n *\n * @private\n * @function\n */\nexport const writeStructsFromTransaction = (encoder, transaction) => writeClientsStructs(encoder, transaction.doc.store, transaction.beforeState)\n\n/**\n * @param {StructStore} store\n * @param {Map<number, Array<GC|Item>>} clientsStructsRefs\n *\n * @private\n * @function\n */\nconst mergeReadStructsIntoPendingReads = (store, clientsStructsRefs) => {\n  const pendingClientsStructRefs = store.pendingClientsStructRefs\n  for (const [client, structRefs] of clientsStructsRefs) {\n    const pendingStructRefs = pendingClientsStructRefs.get(client)\n    if (pendingStructRefs === undefined) {\n      pendingClientsStructRefs.set(client, { refs: structRefs, i: 0 })\n    } else {\n      // merge into existing structRefs\n      const merged = pendingStructRefs.i > 0 ? pendingStructRefs.refs.slice(pendingStructRefs.i) : pendingStructRefs.refs\n      for (let i = 0; i < structRefs.length; i++) {\n        merged.push(structRefs[i])\n      }\n      pendingStructRefs.i = 0\n      pendingStructRefs.refs = merged.sort((r1, r2) => r1.id.clock - r2.id.clock)\n    }\n  }\n}\n\n/**\n * Read the next Item in a Decoder and fill this Item with the read data.\n *\n * This is called when data is received from a remote peer.\n *\n * @param {decoding.Decoder} decoder The decoder object to read data from.\n * @param {Transaction} transaction\n * @param {StructStore} store\n *\n * @private\n * @function\n */\nexport const readStructs = (decoder, transaction, store) => {\n  const clientsStructRefs = new Map()\n  readClientsStructRefs(decoder, clientsStructRefs, transaction.doc)\n  mergeReadStructsIntoPendingReads(store, clientsStructRefs)\n  resumeStructIntegration(transaction, store)\n  tryResumePendingDeleteReaders(transaction, store)\n}\n\n/**\n * Read and apply a document update.\n *\n * This function has the same effect as `applyUpdate` but accepts an decoder.\n *\n * @param {decoding.Decoder} decoder\n * @param {Doc} ydoc\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */\nexport const readUpdate = (decoder, ydoc, transactionOrigin) =>\n  transact(ydoc, transaction => {\n    readStructs(decoder, transaction, ydoc.store)\n    readAndApplyDeleteSet(decoder, transaction, ydoc.store)\n  }, transactionOrigin, false)\n\n/**\n * Apply a document update created by, for example, `y.on('update', update => ..)` or `update = encodeStateAsUpdate()`.\n *\n * This function has the same effect as `readUpdate` but accepts an Uint8Array instead of a Decoder.\n *\n * @param {Doc} ydoc\n * @param {Uint8Array} update\n * @param {any} [transactionOrigin] This will be stored on `transaction.origin` and `.on('update', (update, origin))`\n *\n * @function\n */\nexport const applyUpdate = (ydoc, update, transactionOrigin) =>\n  readUpdate(decoding.createDecoder(update), ydoc, transactionOrigin)\n\n/**\n * Write all the document as a single update message. If you specify the state of the remote client (`targetStateVector`) it will\n * only write the operations that are missing.\n *\n * @param {encoding.Encoder} encoder\n * @param {Doc} doc\n * @param {Map<number,number>} [targetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n *\n * @function\n */\nexport const writeStateAsUpdate = (encoder, doc, targetStateVector = new Map()) => {\n  writeClientsStructs(encoder, doc.store, targetStateVector)\n  writeDeleteSet(encoder, createDeleteSetFromStructStore(doc.store))\n}\n\n/**\n * Write all the document as a single update message that can be applied on the remote document. If you specify the state of the remote client (`targetState`) it will\n * only write the operations that are missing.\n *\n * Use `writeStateAsUpdate` instead if you are working with lib0/encoding.js#Encoder\n *\n * @param {Doc} doc\n * @param {Uint8Array} [encodedTargetStateVector] The state of the target that receives the update. Leave empty to write all known structs\n * @return {Uint8Array}\n *\n * @function\n */\nexport const encodeStateAsUpdate = (doc, encodedTargetStateVector) => {\n  const encoder = encoding.createEncoder()\n  const targetStateVector = encodedTargetStateVector == null ? new Map() : decodeStateVector(encodedTargetStateVector)\n  writeStateAsUpdate(encoder, doc, targetStateVector)\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * Read state vector from Decoder and return as Map\n *\n * @param {decoding.Decoder} decoder\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\nexport const readStateVector = decoder => {\n  const ss = new Map()\n  const ssLength = decoding.readVarUint(decoder)\n  for (let i = 0; i < ssLength; i++) {\n    const client = decoding.readVarUint(decoder)\n    const clock = decoding.readVarUint(decoder)\n    ss.set(client, clock)\n  }\n  return ss\n}\n\n/**\n * Read decodedState and return State as Map.\n *\n * @param {Uint8Array} decodedState\n * @return {Map<number,number>} Maps `client` to the number next expected `clock` from that client.\n *\n * @function\n */\nexport const decodeStateVector = decodedState => readStateVector(decoding.createDecoder(decodedState))\n\n/**\n * Write State Vector to `lib0/encoding.js#Encoder`.\n *\n * @param {encoding.Encoder} encoder\n * @param {Map<number,number>} sv\n * @function\n */\nexport const writeStateVector = (encoder, sv) => {\n  encoding.writeVarUint(encoder, sv.size)\n  sv.forEach((clock, client) => {\n    encoding.writeVarUint(encoder, client)\n    encoding.writeVarUint(encoder, clock)\n  })\n  return encoder\n}\n\n/**\n * Write State Vector to `lib0/encoding.js#Encoder`.\n *\n * @param {encoding.Encoder} encoder\n * @param {Doc} doc\n *\n * @function\n */\nexport const writeDocumentStateVector = (encoder, doc) => writeStateVector(encoder, getStateVector(doc.store))\n\n/**\n * Encode State as Uint8Array.\n *\n * @param {Doc} doc\n * @return {Uint8Array}\n *\n * @function\n */\nexport const encodeStateVector = doc => {\n  const encoder = encoding.createEncoder()\n  writeDocumentStateVector(encoder, doc)\n  return encoding.toUint8Array(encoder)\n}\n","import * as f from 'lib0/function.js'\n\n/**\n * General event handler implementation.\n *\n * @template ARG0, ARG1\n *\n * @private\n */\nexport class EventHandler {\n  constructor () {\n    /**\n     * @type {Array<function(ARG0, ARG1):void>}\n     */\n    this.l = []\n  }\n}\n\n/**\n * @template ARG0,ARG1\n * @returns {EventHandler<ARG0,ARG1>}\n *\n * @private\n * @function\n */\nexport const createEventHandler = () => new EventHandler()\n\n/**\n * Adds an event listener that is called when\n * {@link EventHandler#callEventListeners} is called.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler.\n *\n * @private\n * @function\n */\nexport const addEventHandlerListener = (eventHandler, f) =>\n  eventHandler.l.push(f)\n\n/**\n * Removes an event listener.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {function(ARG0,ARG1):void} f The event handler that was added with\n *                     {@link EventHandler#addEventListener}\n *\n * @private\n * @function\n */\nexport const removeEventHandlerListener = (eventHandler, f) => {\n  eventHandler.l = eventHandler.l.filter(g => f !== g)\n}\n\n/**\n * Removes all event listeners.\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n *\n * @private\n * @function\n */\nexport const removeAllEventHandlerListeners = eventHandler => {\n  eventHandler.l.length = 0\n}\n\n/**\n * Call all event listeners that were added via\n * {@link EventHandler#addEventListener}.\n *\n * @template ARG0,ARG1\n * @param {EventHandler<ARG0,ARG1>} eventHandler\n * @param {ARG0} arg0\n * @param {ARG1} arg1\n *\n * @private\n * @function\n */\nexport const callEventHandlerListeners = (eventHandler, arg0, arg1) =>\n  f.callAll(eventHandler.l, [arg0, arg1])\n","\nimport { AbstractType } from '../internals.js' // eslint-disable-line\n\nimport * as decoding from 'lib0/decoding.js'\nimport * as encoding from 'lib0/encoding.js'\nimport * as error from 'lib0/error.js'\n\nexport class ID {\n  /**\n   * @param {number} client client id\n   * @param {number} clock unique per client id, continuous number\n   */\n  constructor (client, clock) {\n    /**\n     * Client id\n     * @type {number}\n     */\n    this.client = client\n    /**\n     * unique per client id, continuous number\n     * @type {number}\n     */\n    this.clock = clock\n  }\n}\n\n/**\n * @param {ID | null} a\n * @param {ID | null} b\n * @return {boolean}\n *\n * @function\n */\nexport const compareIDs = (a, b) => a === b || (a !== null && b !== null && a.client === b.client && a.clock === b.clock)\n\n/**\n * @param {number} client\n * @param {number} clock\n *\n * @private\n * @function\n */\nexport const createID = (client, clock) => new ID(client, clock)\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {ID} id\n *\n * @private\n * @function\n */\nexport const writeID = (encoder, id) => {\n  encoding.writeVarUint(encoder, id.client)\n  encoding.writeVarUint(encoder, id.clock)\n}\n\n/**\n * Read ID.\n * * If first varUint read is 0xFFFFFF a RootID is returned.\n * * Otherwise an ID is returned\n *\n * @param {decoding.Decoder} decoder\n * @return {ID}\n *\n * @private\n * @function\n */\nexport const readID = decoder =>\n  createID(decoding.readVarUint(decoder), decoding.readVarUint(decoder))\n\n/**\n * The top types are mapped from y.share.get(keyname) => type.\n * `type` does not store any information about the `keyname`.\n * This function finds the correct `keyname` for `type` and throws otherwise.\n *\n * @param {AbstractType<any>} type\n * @return {string}\n *\n * @private\n * @function\n */\nexport const findRootTypeKey = type => {\n  // @ts-ignore _y must be defined, otherwise unexpected case\n  for (const [key, value] of type.doc.share) {\n    if (value === type) {\n      return key\n    }\n  }\n  throw error.unexpectedCase()\n}\n","\nimport { AbstractType, Item } from '../internals.js' // eslint-disable-line\n\n/**\n * Check if `parent` is a parent of `child`.\n *\n * @param {AbstractType<any>} parent\n * @param {Item|null} child\n * @return {Boolean} Whether `parent` is a parent of `child`.\n *\n * @private\n * @function\n */\nexport const isParentOf = (parent, child) => {\n  while (child !== null) {\n    if (child.parent === parent) {\n      return true\n    }\n    child = /** @type {AbstractType<any>} */ (child.parent)._item\n  }\n  return false\n}\n","\nimport {\n  YArray,\n  YMap,\n  readDeleteSet,\n  writeDeleteSet,\n  createDeleteSet,\n  ID, DeleteSet, YArrayEvent, Transaction, Doc // eslint-disable-line\n} from '../internals.js'\n\nimport * as decoding from 'lib0/decoding.js'\nimport * as encoding from 'lib0/encoding.js'\nimport { mergeDeleteSets, isDeleted } from './DeleteSet.js'\n\nexport class PermanentUserData {\n  /**\n   * @param {Doc} doc\n   * @param {YMap<any>} [storeType]\n   */\n  constructor (doc, storeType = doc.getMap('users')) {\n    /**\n     * @type {Map<string,DeleteSet>}\n     */\n    const dss = new Map()\n    this.yusers = storeType\n    this.doc = doc\n    /**\n     * Maps from clientid to userDescription\n     *\n     * @type {Map<number,string>}\n     */\n    this.clients = new Map()\n    this.dss = dss\n    /**\n     * @param {YMap<any>} user\n     * @param {string} userDescription\n     */\n    const initUser = (user, userDescription) => {\n      /**\n       * @type {YArray<Uint8Array>}\n       */\n      const ds = user.get('ds')\n      const ids = user.get('ids')\n      const addClientId = /** @param {number} clientid */ clientid => this.clients.set(clientid, userDescription)\n      ds.observe(/** @param {YArrayEvent<any>} event */ event => {\n        event.changes.added.forEach(item => {\n          item.content.getContent().forEach(encodedDs => {\n            if (encodedDs instanceof Uint8Array) {\n              this.dss.set(userDescription, mergeDeleteSets([this.dss.get(userDescription) || createDeleteSet(), readDeleteSet(decoding.createDecoder(encodedDs))]))\n            }\n          })\n        })\n      })\n      this.dss.set(userDescription, mergeDeleteSets(ds.map(encodedDs => readDeleteSet(decoding.createDecoder(encodedDs)))))\n      ids.observe(/** @param {YArrayEvent<any>} event */ event =>\n        event.changes.added.forEach(item => item.content.getContent().forEach(addClientId))\n      )\n      ids.forEach(addClientId)\n    }\n    // observe users\n    storeType.observe(event => {\n      event.keysChanged.forEach(userDescription =>\n        initUser(storeType.get(userDescription), userDescription)\n      )\n    })\n    // add intial data\n    storeType.forEach(initUser)\n  }\n\n  /**\n   * @param {Doc} doc\n   * @param {number} clientid\n   * @param {string} userDescription\n   * @param {Object} [conf]\n   * @param {function(Transaction, DeleteSet):boolean} [conf.filter]\n   */\n  setUserMapping (doc, clientid, userDescription, { filter = () => true } = {}) {\n    const users = this.yusers\n    let user = users.get(userDescription)\n    if (!user) {\n      user = new YMap()\n      user.set('ids', new YArray())\n      user.set('ds', new YArray())\n      users.set(userDescription, user)\n    }\n    user.get('ids').push([clientid])\n    users.observe(event => {\n      setTimeout(() => {\n        const userOverwrite = users.get(userDescription)\n        if (userOverwrite !== user) {\n          // user was overwritten, port all data over to the next user object\n          // @todo Experiment with Y.Sets here\n          user = userOverwrite\n          // @todo iterate over old type\n          this.clients.forEach((_userDescription, clientid) => {\n            if (userDescription === _userDescription) {\n              user.get('ids').push([clientid])\n            }\n          })\n          const encoder = encoding.createEncoder()\n          const ds = this.dss.get(userDescription)\n          if (ds) {\n            writeDeleteSet(encoder, ds)\n            user.get('ds').push([encoding.toUint8Array(encoder)])\n          }\n        }\n      }, 0)\n    })\n    doc.on('afterTransaction', /** @param {Transaction} transaction */ transaction => {\n      setTimeout(() => {\n        const yds = user.get('ds')\n        const ds = transaction.deleteSet\n        if (transaction.local && ds.clients.size > 0 && filter(transaction, ds)) {\n          const encoder = encoding.createEncoder()\n          writeDeleteSet(encoder, ds)\n          yds.push([encoding.toUint8Array(encoder)])\n        }\n      })\n    })\n  }\n\n  /**\n   * @param {number} clientid\n   * @return {any}\n   */\n  getUserByClientId (clientid) {\n    return this.clients.get(clientid) || null\n  }\n\n  /**\n   * @param {ID} id\n   * @return {string | null}\n   */\n  getUserByDeletedId (id) {\n    for (const [userDescription, ds] of this.dss) {\n      if (isDeleted(ds, id)) {\n        return userDescription\n      }\n    }\n    return null\n  }\n}\n","\nimport {\n  writeID,\n  readID,\n  compareIDs,\n  getState,\n  findRootTypeKey,\n  Item,\n  createID,\n  ContentType,\n  followRedone,\n  ID, Doc, AbstractType // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\nimport * as error from 'lib0/error.js'\n\n/**\n * A relative position is based on the Yjs model and is not affected by document changes.\n * E.g. If you place a relative position before a certain character, it will always point to this character.\n * If you place a relative position at the end of a type, it will always point to the end of the type.\n *\n * A numeric position is often unsuited for user selections, because it does not change when content is inserted\n * before or after.\n *\n * ```Insert(0, 'x')('a|bc') = 'xa|bc'``` Where | is the relative position.\n *\n * One of the properties must be defined.\n *\n * @example\n *   // Current cursor position is at position 10\n *   const relativePosition = createRelativePositionFromIndex(yText, 10)\n *   // modify yText\n *   yText.insert(0, 'abc')\n *   yText.delete(3, 10)\n *   // Compute the cursor position\n *   const absolutePosition = createAbsolutePositionFromRelativePosition(y, relativePosition)\n *   absolutePosition.type === yText // => true\n *   console.log('cursor location is ' + absolutePosition.index) // => cursor location is 3\n *\n */\nexport class RelativePosition {\n  /**\n   * @param {ID|null} type\n   * @param {string|null} tname\n   * @param {ID|null} item\n   */\n  constructor (type, tname, item) {\n    /**\n     * @type {ID|null}\n     */\n    this.type = type\n    /**\n     * @type {string|null}\n     */\n    this.tname = tname\n    /**\n     * @type {ID | null}\n     */\n    this.item = item\n  }\n}\n\n/**\n * @param {any} json\n * @return {RelativePosition}\n *\n * @function\n */\nexport const createRelativePositionFromJSON = json => new RelativePosition(json.type == null ? null : createID(json.type.client, json.type.clock), json.tname || null, json.item == null ? null : createID(json.item.client, json.item.clock))\n\nexport class AbsolutePosition {\n  /**\n   * @param {AbstractType<any>} type\n   * @param {number} index\n   */\n  constructor (type, index) {\n    /**\n     * @type {AbstractType<any>}\n     */\n    this.type = type\n    /**\n     * @type {number}\n     */\n    this.index = index\n  }\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n *\n * @function\n */\nexport const createAbsolutePosition = (type, index) => new AbsolutePosition(type, index)\n\n/**\n * @param {AbstractType<any>} type\n * @param {ID|null} item\n *\n * @function\n */\nexport const createRelativePosition = (type, item) => {\n  let typeid = null\n  let tname = null\n  if (type._item === null) {\n    tname = findRootTypeKey(type)\n  } else {\n    typeid = createID(type._item.id.client, type._item.id.clock)\n  }\n  return new RelativePosition(typeid, tname, item)\n}\n\n/**\n * Create a relativePosition based on a absolute position.\n *\n * @param {AbstractType<any>} type The base type (e.g. YText or YArray).\n * @param {number} index The absolute position.\n * @return {RelativePosition}\n *\n * @function\n */\nexport const createRelativePositionFromTypeIndex = (type, index) => {\n  let t = type._start\n  while (t !== null) {\n    if (!t.deleted && t.countable) {\n      if (t.length > index) {\n        // case 1: found position somewhere in the linked list\n        return createRelativePosition(type, createID(t.id.client, t.id.clock + index))\n      }\n      index -= t.length\n    }\n    t = t.right\n  }\n  return createRelativePosition(type, null)\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {RelativePosition} rpos\n *\n * @function\n */\nexport const writeRelativePosition = (encoder, rpos) => {\n  const { type, tname, item } = rpos\n  if (item !== null) {\n    encoding.writeVarUint(encoder, 0)\n    writeID(encoder, item)\n  } else if (tname !== null) {\n    // case 2: found position at the end of the list and type is stored in y.share\n    encoding.writeUint8(encoder, 1)\n    encoding.writeVarString(encoder, tname)\n  } else if (type !== null) {\n    // case 3: found position at the end of the list and type is attached to an item\n    encoding.writeUint8(encoder, 2)\n    writeID(encoder, type)\n  } else {\n    throw error.unexpectedCase()\n  }\n  return encoder\n}\n\n/**\n * @param {RelativePosition} rpos\n * @return {Uint8Array}\n */\nexport const encodeRelativePosition = rpos => {\n  const encoder = encoding.createEncoder()\n  writeRelativePosition(encoder, rpos)\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * @param {decoding.Decoder} decoder\n * @return {RelativePosition|null}\n *\n * @function\n */\nexport const readRelativePosition = decoder => {\n  let type = null\n  let tname = null\n  let itemID = null\n  switch (decoding.readVarUint(decoder)) {\n    case 0:\n      // case 1: found position somewhere in the linked list\n      itemID = readID(decoder)\n      break\n    case 1:\n      // case 2: found position at the end of the list and type is stored in y.share\n      tname = decoding.readVarString(decoder)\n      break\n    case 2: {\n      // case 3: found position at the end of the list and type is attached to an item\n      type = readID(decoder)\n    }\n  }\n  return new RelativePosition(type, tname, itemID)\n}\n\n/**\n * @param {Uint8Array} uint8Array\n * @return {RelativePosition|null}\n */\nexport const decodeRelativePosition = uint8Array => readRelativePosition(decoding.createDecoder(uint8Array))\n\n/**\n * @param {RelativePosition} rpos\n * @param {Doc} doc\n * @return {AbsolutePosition|null}\n *\n * @function\n */\nexport const createAbsolutePositionFromRelativePosition = (rpos, doc) => {\n  const store = doc.store\n  const rightID = rpos.item\n  const typeID = rpos.type\n  const tname = rpos.tname\n  let type = null\n  let index = 0\n  if (rightID !== null) {\n    if (getState(store, rightID.client) <= rightID.clock) {\n      return null\n    }\n    const res = followRedone(store, rightID)\n    const right = res.item\n    if (!(right instanceof Item)) {\n      return null\n    }\n    type = /** @type {AbstractType<any>} */ (right.parent)\n    if (type._item === null || !type._item.deleted) {\n      index = right.deleted || !right.countable ? 0 : res.diff\n      let n = right.left\n      while (n !== null) {\n        if (!n.deleted && n.countable) {\n          index += n.length\n        }\n        n = n.left\n      }\n    }\n  } else {\n    if (tname !== null) {\n      type = doc.get(tname)\n    } else if (typeID !== null) {\n      if (getState(store, typeID.client) <= typeID.clock) {\n        // type does not exist yet\n        return null\n      }\n      const { item } = followRedone(store, typeID)\n      if (item instanceof Item && item.content instanceof ContentType) {\n        type = item.content.type\n      } else {\n        // struct is garbage collected\n        return null\n      }\n    } else {\n      throw error.unexpectedCase()\n    }\n    index = type._length\n  }\n  return createAbsolutePosition(type, index)\n}\n\n/**\n * @param {RelativePosition|null} a\n * @param {RelativePosition|null} b\n *\n * @function\n */\nexport const compareRelativePositions = (a, b) => a === b || (\n  a !== null && b !== null && a.tname === b.tname && compareIDs(a.item, b.item) && compareIDs(a.type, b.type)\n)\n","\nimport {\n  isDeleted,\n  createDeleteSetFromStructStore,\n  getStateVector,\n  getItemCleanStart,\n  iterateDeletedStructs,\n  writeDeleteSet,\n  writeStateVector,\n  readDeleteSet,\n  readStateVector,\n  createDeleteSet,\n  createID,\n  getState,\n  Transaction, Doc, DeleteSet, Item // eslint-disable-line\n} from '../internals.js'\n\nimport * as map from 'lib0/map.js'\nimport * as set from 'lib0/set.js'\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\n\nexport class Snapshot {\n  /**\n   * @param {DeleteSet} ds\n   * @param {Map<number,number>} sv state map\n   */\n  constructor (ds, sv) {\n    /**\n     * @type {DeleteSet}\n     */\n    this.ds = ds\n    /**\n     * State Map\n     * @type {Map<number,number>}\n     */\n    this.sv = sv\n  }\n}\n\n/**\n * @param {Snapshot} snap1\n * @param {Snapshot} snap2\n * @return {boolean}\n */\nexport const equalSnapshots = (snap1, snap2) => {\n  const ds1 = snap1.ds.clients\n  const ds2 = snap2.ds.clients\n  const sv1 = snap1.sv\n  const sv2 = snap2.sv\n  if (sv1.size !== sv2.size || ds1.size !== ds2.size) {\n    return false\n  }\n  for (const [key, value] of sv1) {\n    if (sv2.get(key) !== value) {\n      return false\n    }\n  }\n  for (const [client, dsitems1] of ds1) {\n    const dsitems2 = ds2.get(client) || []\n    if (dsitems1.length !== dsitems2.length) {\n      return false\n    }\n    for (let i = 0; i < dsitems1.length; i++) {\n      const dsitem1 = dsitems1[i]\n      const dsitem2 = dsitems2[i]\n      if (dsitem1.clock !== dsitem2.clock || dsitem1.len !== dsitem2.len) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\n/**\n * @param {Snapshot} snapshot\n * @return {Uint8Array}\n */\nexport const encodeSnapshot = snapshot => {\n  const encoder = encoding.createEncoder()\n  writeDeleteSet(encoder, snapshot.ds)\n  writeStateVector(encoder, snapshot.sv)\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * @param {Uint8Array} buf\n * @return {Snapshot}\n */\nexport const decodeSnapshot = buf => {\n  const decoder = decoding.createDecoder(buf)\n  return new Snapshot(readDeleteSet(decoder), readStateVector(decoder))\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {Map<number,number>} sm\n * @return {Snapshot}\n */\nexport const createSnapshot = (ds, sm) => new Snapshot(ds, sm)\n\nexport const emptySnapshot = createSnapshot(createDeleteSet(), new Map())\n\n/**\n * @param {Doc} doc\n * @return {Snapshot}\n */\nexport const snapshot = doc => createSnapshot(createDeleteSetFromStructStore(doc.store), getStateVector(doc.store))\n\n/**\n * @param {Item} item\n * @param {Snapshot|undefined} snapshot\n *\n * @protected\n * @function\n */\nexport const isVisible = (item, snapshot) => snapshot === undefined ? !item.deleted : (\n  snapshot.sv.has(item.id.client) && (snapshot.sv.get(item.id.client) || 0) > item.id.clock && !isDeleted(snapshot.ds, item.id)\n)\n\n/**\n * @param {Transaction} transaction\n * @param {Snapshot} snapshot\n */\nexport const splitSnapshotAffectedStructs = (transaction, snapshot) => {\n  const meta = map.setIfUndefined(transaction.meta, splitSnapshotAffectedStructs, set.create)\n  const store = transaction.doc.store\n  // check if we already split for this snapshot\n  if (!meta.has(snapshot)) {\n    snapshot.sv.forEach((clock, client) => {\n      if (clock < getState(store, client)) {\n        getItemCleanStart(transaction, createID(client, clock))\n      }\n    })\n    iterateDeletedStructs(transaction, snapshot.ds, item => {})\n    meta.add(snapshot)\n  }\n}\n","\nimport {\n  GC,\n  splitItem,\n  AbstractStruct, Transaction, ID, Item // eslint-disable-line\n} from '../internals.js'\n\nimport * as math from 'lib0/math.js'\nimport * as error from 'lib0/error.js'\nimport * as decoding from 'lib0/decoding.js' // eslint-disable-line\n\nexport class StructStore {\n  constructor () {\n    /**\n     * @type {Map<number,Array<GC|Item>>}\n     */\n    this.clients = new Map()\n    /**\n     * Store incompleted struct reads here\n     * `i` denotes to the next read operation\n     * We could shift the array of refs instead, but shift is incredible\n     * slow in Chrome for arrays with more than 100k elements\n     * @see tryResumePendingStructRefs\n     * @type {Map<number,{i:number,refs:Array<GC|Item>}>}\n     */\n    this.pendingClientsStructRefs = new Map()\n    /**\n     * Stack of pending structs waiting for struct dependencies\n     * Maximum length of stack is structReaders.size\n     * @type {Array<GC|Item>}\n     */\n    this.pendingStack = []\n    /**\n     * @type {Array<decoding.Decoder>}\n     */\n    this.pendingDeleteReaders = []\n  }\n}\n\n/**\n * Return the states as a Map<client,clock>.\n * Note that clock refers to the next expected clock id.\n *\n * @param {StructStore} store\n * @return {Map<number,number>}\n *\n * @public\n * @function\n */\nexport const getStateVector = store => {\n  const sm = new Map()\n  store.clients.forEach((structs, client) => {\n    const struct = structs[structs.length - 1]\n    sm.set(client, struct.id.clock + struct.length)\n  })\n  return sm\n}\n\n/**\n * @param {StructStore} store\n * @param {number} client\n * @return {number}\n *\n * @public\n * @function\n */\nexport const getState = (store, client) => {\n  const structs = store.clients.get(client)\n  if (structs === undefined) {\n    return 0\n  }\n  const lastStruct = structs[structs.length - 1]\n  return lastStruct.id.clock + lastStruct.length\n}\n\n/**\n * @param {StructStore} store\n *\n * @private\n * @function\n */\nexport const integretyCheck = store => {\n  store.clients.forEach(structs => {\n    for (let i = 1; i < structs.length; i++) {\n      const l = structs[i - 1]\n      const r = structs[i]\n      if (l.id.clock + l.length !== r.id.clock) {\n        throw new Error('StructStore failed integrety check')\n      }\n    }\n  })\n}\n\n/**\n * @param {StructStore} store\n * @param {GC|Item} struct\n *\n * @private\n * @function\n */\nexport const addStruct = (store, struct) => {\n  let structs = store.clients.get(struct.id.client)\n  if (structs === undefined) {\n    structs = []\n    store.clients.set(struct.id.client, structs)\n  } else {\n    const lastStruct = structs[structs.length - 1]\n    if (lastStruct.id.clock + lastStruct.length !== struct.id.clock) {\n      throw error.unexpectedCase()\n    }\n  }\n  structs.push(struct)\n}\n\n/**\n * Perform a binary search on a sorted array\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n * @return {number}\n *\n * @private\n * @function\n */\nexport const findIndexSS = (structs, clock) => {\n  let left = 0\n  let right = structs.length - 1\n  let mid = structs[right]\n  let midclock = mid.id.clock\n  if (mid.id.clock === clock) {\n    return right\n  }\n  // @todo does it even make sense to pivot the search?\n  // If a good split misses, it might actually increase the time to find the correct item.\n  // Currently, the only advantage is that search with pivoting might find the item on the first try.\n  let midindex = math.floor((clock / (midclock + mid.length - 1)) * right) // pivoting the search\n  while (left <= right) {\n    mid = structs[midindex]\n    midclock = mid.id.clock\n    if (midclock <= clock) {\n      if (clock < midclock + mid.length) {\n        return midindex\n      }\n      left = midindex + 1\n    } else {\n      right = midindex - 1\n    }\n    midindex = math.floor((left + right) / 2)\n  }\n  // Always check state before looking for a struct in StructStore\n  // Therefore the case of not finding a struct is unexpected\n  throw error.unexpectedCase()\n}\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {GC|Item}\n *\n * @private\n * @function\n */\nexport const find = (store, id) => {\n  /**\n   * @type {Array<GC|Item>}\n   */\n  // @ts-ignore\n  const structs = store.clients.get(id.client)\n  return structs[findIndexSS(structs, id.clock)]\n}\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n * @private\n * @function\n */\nexport const getItem = /** @type {function(StructStore,ID):Item} */ (find)\n\n/**\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clock\n */\nexport const findIndexCleanStart = (transaction, structs, clock) => {\n  const index = findIndexSS(structs, clock)\n  const struct = structs[index]\n  if (struct.id.clock < clock && struct instanceof Item) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, clock - struct.id.clock))\n    return index + 1\n  }\n  return index\n}\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\nexport const getItemCleanStart = (transaction, id) => {\n  const structs = /** @type {Array<Item>} */ (transaction.doc.store.clients.get(id.client))\n  return structs[findIndexCleanStart(transaction, structs, id.clock)]\n}\n\n/**\n * Expects that id is actually in store. This function throws or is an infinite loop otherwise.\n *\n * @param {Transaction} transaction\n * @param {StructStore} store\n * @param {ID} id\n * @return {Item}\n *\n * @private\n * @function\n */\nexport const getItemCleanEnd = (transaction, store, id) => {\n  /**\n   * @type {Array<Item>}\n   */\n  // @ts-ignore\n  const structs = store.clients.get(id.client)\n  const index = findIndexSS(structs, id.clock)\n  const struct = structs[index]\n  if (id.clock !== struct.id.clock + struct.length - 1 && struct.constructor !== GC) {\n    structs.splice(index + 1, 0, splitItem(transaction, struct, id.clock - struct.id.clock + 1))\n  }\n  return struct\n}\n\n/**\n * Replace `item` with `newitem` in store\n * @param {StructStore} store\n * @param {GC|Item} struct\n * @param {GC|Item} newStruct\n *\n * @private\n * @function\n */\nexport const replaceStruct = (store, struct, newStruct) => {\n  const structs = /** @type {Array<GC|Item>} */ (store.clients.get(struct.id.client))\n  structs[findIndexSS(structs, struct.id.clock)] = newStruct\n}\n\n/**\n * Iterate over a range of structs\n *\n * @param {Transaction} transaction\n * @param {Array<Item|GC>} structs\n * @param {number} clockStart Inclusive start\n * @param {number} len\n * @param {function(GC|Item):void} f\n *\n * @function\n */\nexport const iterateStructs = (transaction, structs, clockStart, len, f) => {\n  if (len === 0) {\n    return\n  }\n  const clockEnd = clockStart + len\n  let index = findIndexCleanStart(transaction, structs, clockStart)\n  let struct\n  do {\n    struct = structs[index++]\n    if (clockEnd < struct.id.clock + struct.length) {\n      findIndexCleanStart(transaction, structs, clockEnd)\n    }\n    f(struct)\n  } while (index < structs.length && structs[index].id.clock < clockEnd)\n}\n","\nimport {\n  getState,\n  writeStructsFromTransaction,\n  writeDeleteSet,\n  DeleteSet,\n  sortAndMergeDeleteSet,\n  getStateVector,\n  findIndexSS,\n  callEventHandlerListeners,\n  Item,\n  generateNewClientId,\n  createID,\n  GC, StructStore, ID, AbstractType, AbstractStruct, YEvent, Doc // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js'\nimport * as map from 'lib0/map.js'\nimport * as math from 'lib0/math.js'\nimport * as set from 'lib0/set.js'\nimport * as logging from 'lib0/logging.js'\nimport { callAll } from 'lib0/function.js'\n\n/**\n * A transaction is created for every change on the Yjs model. It is possible\n * to bundle changes on the Yjs model in a single transaction to\n * minimize the number on messages sent and the number of observer calls.\n * If possible the user of this library should bundle as many changes as\n * possible. Here is an example to illustrate the advantages of bundling:\n *\n * @example\n * const map = y.define('map', YMap)\n * // Log content when change is triggered\n * map.observe(() => {\n *   console.log('change triggered')\n * })\n * // Each change on the map type triggers a log message:\n * map.set('a', 0) // => \"change triggered\"\n * map.set('b', 0) // => \"change triggered\"\n * // When put in a transaction, it will trigger the log after the transaction:\n * y.transact(() => {\n *   map.set('a', 1)\n *   map.set('b', 1)\n * }) // => \"change triggered\"\n *\n * @public\n */\nexport class Transaction {\n  /**\n   * @param {Doc} doc\n   * @param {any} origin\n   * @param {boolean} local\n   */\n  constructor (doc, origin, local) {\n    /**\n     * The Yjs instance.\n     * @type {Doc}\n     */\n    this.doc = doc\n    /**\n     * Describes the set of deleted items by ids\n     * @type {DeleteSet}\n     */\n    this.deleteSet = new DeleteSet()\n    /**\n     * Holds the state before the transaction started.\n     * @type {Map<Number,Number>}\n     */\n    this.beforeState = getStateVector(doc.store)\n    /**\n     * Holds the state after the transaction.\n     * @type {Map<Number,Number>}\n     */\n    this.afterState = new Map()\n    /**\n     * All types that were directly modified (property added or child\n     * inserted/deleted). New types are not included in this Set.\n     * Maps from type to parentSubs (`item.parentSub = null` for YArray)\n     * @type {Map<AbstractType<YEvent>,Set<String|null>>}\n     */\n    this.changed = new Map()\n    /**\n     * Stores the events for the types that observe also child elements.\n     * It is mainly used by `observeDeep`.\n     * @type {Map<AbstractType<YEvent>,Array<YEvent>>}\n     */\n    this.changedParentTypes = new Map()\n    /**\n     * @type {Array<AbstractStruct>}\n     */\n    this._mergeStructs = []\n    /**\n     * @type {any}\n     */\n    this.origin = origin\n    /**\n     * Stores meta information on the transaction\n     * @type {Map<any,any>}\n     */\n    this.meta = new Map()\n    /**\n     * Whether this change originates from this doc.\n     * @type {boolean}\n     */\n    this.local = local\n  }\n}\n\n/**\n * @param {Transaction} transaction\n */\nexport const computeUpdateMessageFromTransaction = transaction => {\n  if (transaction.deleteSet.clients.size === 0 && !map.any(transaction.afterState, (clock, client) => transaction.beforeState.get(client) !== clock)) {\n    return null\n  }\n  const encoder = encoding.createEncoder()\n  sortAndMergeDeleteSet(transaction.deleteSet)\n  writeStructsFromTransaction(encoder, transaction)\n  writeDeleteSet(encoder, transaction.deleteSet)\n  return encoder\n}\n\n/**\n * @param {Transaction} transaction\n *\n * @private\n * @function\n */\nexport const nextID = transaction => {\n  const y = transaction.doc\n  return createID(y.clientID, getState(y.store, y.clientID))\n}\n\n/**\n * If `type.parent` was added in current transaction, `type` technically\n * did not change, it was just added and we should not fire events for `type`.\n *\n * @param {Transaction} transaction\n * @param {AbstractType<YEvent>} type\n * @param {string|null} parentSub\n */\nexport const addChangedTypeToTransaction = (transaction, type, parentSub) => {\n  const item = type._item\n  if (item === null || (item.id.clock < (transaction.beforeState.get(item.id.client) || 0) && !item.deleted)) {\n    map.setIfUndefined(transaction.changed, type, set.create).add(parentSub)\n  }\n}\n\n/**\n * @param {Array<AbstractStruct>} structs\n * @param {number} pos\n */\nconst tryToMergeWithLeft = (structs, pos) => {\n  const left = structs[pos - 1]\n  const right = structs[pos]\n  if (left.deleted === right.deleted && left.constructor === right.constructor) {\n    if (left.mergeWith(right)) {\n      structs.splice(pos, 1)\n      if (right instanceof Item && right.parentSub !== null && /** @type {AbstractType<any>} */ (right.parent)._map.get(right.parentSub) === right) {\n        /** @type {AbstractType<any>} */ (right.parent)._map.set(right.parentSub, /** @type {Item} */ (left))\n      }\n    }\n  }\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\nconst tryGcDeleteSet = (ds, store, gcFilter) => {\n  for (const [client, deleteItems] of ds.clients) {\n    const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client))\n    for (let di = deleteItems.length - 1; di >= 0; di--) {\n      const deleteItem = deleteItems[di]\n      const endDeleteItemClock = deleteItem.clock + deleteItem.len\n      for (\n        let si = findIndexSS(structs, deleteItem.clock), struct = structs[si];\n        si < structs.length && struct.id.clock < endDeleteItemClock;\n        struct = structs[++si]\n      ) {\n        const struct = structs[si]\n        if (deleteItem.clock + deleteItem.len <= struct.id.clock) {\n          break\n        }\n        if (struct instanceof Item && struct.deleted && !struct.keep && gcFilter(struct)) {\n          struct.gc(store, false)\n        }\n      }\n    }\n  }\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n */\nconst tryMergeDeleteSet = (ds, store) => {\n  // try to merge deleted / gc'd items\n  // merge from right to left for better efficiecy and so we don't miss any merge targets\n  for (const [client, deleteItems] of ds.clients) {\n    const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client))\n    for (let di = deleteItems.length - 1; di >= 0; di--) {\n      const deleteItem = deleteItems[di]\n      // start with merging the item next to the last deleted item\n      const mostRightIndexToCheck = math.min(structs.length - 1, 1 + findIndexSS(structs, deleteItem.clock + deleteItem.len - 1))\n      for (\n        let si = mostRightIndexToCheck, struct = structs[si];\n        si > 0 && struct.id.clock >= deleteItem.clock;\n        struct = structs[--si]\n      ) {\n        tryToMergeWithLeft(structs, si)\n      }\n    }\n  }\n}\n\n/**\n * @param {DeleteSet} ds\n * @param {StructStore} store\n * @param {function(Item):boolean} gcFilter\n */\nexport const tryGc = (ds, store, gcFilter) => {\n  tryGcDeleteSet(ds, store, gcFilter)\n  tryMergeDeleteSet(ds, store)\n}\n\n/**\n * @param {Array<Transaction>} transactionCleanups\n * @param {number} i\n */\nconst cleanupTransactions = (transactionCleanups, i) => {\n  if (i < transactionCleanups.length) {\n    const transaction = transactionCleanups[i]\n    const doc = transaction.doc\n    const store = doc.store\n    const ds = transaction.deleteSet\n    const mergeStructs = transaction._mergeStructs\n    try {\n      sortAndMergeDeleteSet(ds)\n      transaction.afterState = getStateVector(transaction.doc.store)\n      doc._transaction = null\n      doc.emit('beforeObserverCalls', [transaction, doc])\n      /**\n       * An array of event callbacks.\n       *\n       * Each callback is called even if the other ones throw errors.\n       *\n       * @type {Array<function():void>}\n       */\n      const fs = []\n      // observe events on changed types\n      transaction.changed.forEach((subs, itemtype) =>\n        fs.push(() => {\n          if (itemtype._item === null || !itemtype._item.deleted) {\n            itemtype._callObserver(transaction, subs)\n          }\n        })\n      )\n      fs.push(() => {\n        // deep observe events\n        transaction.changedParentTypes.forEach((events, type) =>\n          fs.push(() => {\n            // We need to think about the possibility that the user transforms the\n            // Y.Doc in the event.\n            if (type._item === null || !type._item.deleted) {\n              events = events\n                .filter(event =>\n                  event.target._item === null || !event.target._item.deleted\n                )\n              events\n                .forEach(event => {\n                  event.currentTarget = type\n                })\n              // We don't need to check for events.length\n              // because we know it has at least one element\n              callEventHandlerListeners(type._dEH, events, transaction)\n            }\n          })\n        )\n        fs.push(() => doc.emit('afterTransaction', [transaction, doc]))\n      })\n      callAll(fs, [])\n    } finally {\n      // Replace deleted items with ItemDeleted / GC.\n      // This is where content is actually remove from the Yjs Doc.\n      if (doc.gc) {\n        tryGcDeleteSet(ds, store, doc.gcFilter)\n      }\n      tryMergeDeleteSet(ds, store)\n\n      // on all affected store.clients props, try to merge\n      for (const [client, clock] of transaction.afterState) {\n        const beforeClock = transaction.beforeState.get(client) || 0\n        if (beforeClock !== clock) {\n          const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client))\n          // we iterate from right to left so we can safely remove entries\n          const firstChangePos = math.max(findIndexSS(structs, beforeClock), 1)\n          for (let i = structs.length - 1; i >= firstChangePos; i--) {\n            tryToMergeWithLeft(structs, i)\n          }\n        }\n      }\n      // try to merge mergeStructs\n      // @todo: it makes more sense to transform mergeStructs to a DS, sort it, and merge from right to left\n      //        but at the moment DS does not handle duplicates\n      for (let i = 0; i < mergeStructs.length; i++) {\n        const { client, clock } = mergeStructs[i].id\n        const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client))\n        const replacedStructPos = findIndexSS(structs, clock)\n        if (replacedStructPos + 1 < structs.length) {\n          tryToMergeWithLeft(structs, replacedStructPos + 1)\n        }\n        if (replacedStructPos > 0) {\n          tryToMergeWithLeft(structs, replacedStructPos)\n        }\n      }\n      if (!transaction.local && transaction.afterState.get(doc.clientID) !== transaction.beforeState.get(doc.clientID)) {\n        doc.clientID = generateNewClientId()\n        logging.print(logging.ORANGE, logging.BOLD, '[yjs] ', logging.UNBOLD, logging.RED, 'Changed the client-id because another client seems to be using it.')\n      }\n      // @todo Merge all the transactions into one and provide send the data as a single update message\n      doc.emit('afterTransactionCleanup', [transaction, doc])\n      if (doc._observers.has('update')) {\n        const updateMessage = computeUpdateMessageFromTransaction(transaction)\n        if (updateMessage !== null) {\n          doc.emit('update', [encoding.toUint8Array(updateMessage), transaction.origin, doc])\n        }\n      }\n      if (transactionCleanups.length <= i + 1) {\n        doc._transactionCleanups = []\n      } else {\n        cleanupTransactions(transactionCleanups, i + 1)\n      }\n    }\n  }\n}\n\n/**\n * Implements the functionality of `y.transact(()=>{..})`\n *\n * @param {Doc} doc\n * @param {function(Transaction):void} f\n * @param {any} [origin=true]\n *\n * @function\n */\nexport const transact = (doc, f, origin = null, local = true) => {\n  const transactionCleanups = doc._transactionCleanups\n  let initialCall = false\n  if (doc._transaction === null) {\n    initialCall = true\n    doc._transaction = new Transaction(doc, origin, local)\n    transactionCleanups.push(doc._transaction)\n    doc.emit('beforeTransaction', [doc._transaction, doc])\n  }\n  try {\n    f(doc._transaction)\n  } finally {\n    if (initialCall && transactionCleanups[0] === doc._transaction) {\n      // The first transaction ended, now process observer calls.\n      // Observer call may create new transactions for which we need to call the observers and do cleanup.\n      // We don't want to nest these calls, so we execute these calls one after\n      // another.\n      // Also we need to ensure that all cleanups are called, even if the\n      // observes throw errors.\n      // This file is full of hacky try {} finally {} blocks to ensure that an\n      // event can throw errors and also that the cleanup is called.\n      cleanupTransactions(transactionCleanups, 0)\n    }\n  }\n}\n","import {\n  mergeDeleteSets,\n  iterateDeletedStructs,\n  keepItem,\n  transact,\n  createID,\n  redoItem,\n  iterateStructs,\n  isParentOf,\n  followRedone,\n  getItemCleanStart,\n  getState,\n  ID, Transaction, Doc, Item, GC, DeleteSet, AbstractType // eslint-disable-line\n} from '../internals.js'\n\nimport * as time from 'lib0/time.js'\nimport { Observable } from 'lib0/observable.js'\n\nclass StackItem {\n  /**\n   * @param {DeleteSet} ds\n   * @param {Map<number,number>} beforeState\n   * @param {Map<number,number>} afterState\n   */\n  constructor (ds, beforeState, afterState) {\n    this.ds = ds\n    this.beforeState = beforeState\n    this.afterState = afterState\n    /**\n     * Use this to save and restore metadata like selection range\n     */\n    this.meta = new Map()\n  }\n}\n\n/**\n * @param {UndoManager} undoManager\n * @param {Array<StackItem>} stack\n * @param {string} eventType\n * @return {StackItem?}\n */\nconst popStackItem = (undoManager, stack, eventType) => {\n  /**\n   * Whether a change happened\n   * @type {StackItem?}\n   */\n  let result = null\n  const doc = undoManager.doc\n  const scope = undoManager.scope\n  transact(doc, transaction => {\n    while (stack.length > 0 && result === null) {\n      const store = doc.store\n      const stackItem = /** @type {StackItem} */ (stack.pop())\n      /**\n       * @type {Set<Item>}\n       */\n      const itemsToRedo = new Set()\n      /**\n       * @type {Array<Item>}\n       */\n      const itemsToDelete = []\n      let performedChange = false\n      stackItem.afterState.forEach((endClock, client) => {\n        const startClock = stackItem.beforeState.get(client) || 0\n        const len = endClock - startClock\n        // @todo iterateStructs should not need the structs parameter\n        const structs = /** @type {Array<GC|Item>} */ (store.clients.get(client))\n        if (startClock !== endClock) {\n          // make sure structs don't overlap with the range of created operations [stackItem.start, stackItem.start + stackItem.end)\n          // this must be executed before deleted structs are iterated.\n          getItemCleanStart(transaction, createID(client, startClock))\n          if (endClock < getState(doc.store, client)) {\n            getItemCleanStart(transaction, createID(client, endClock))\n          }\n          iterateStructs(transaction, structs, startClock, len, struct => {\n            if (struct instanceof Item) {\n              if (struct.redone !== null) {\n                let { item, diff } = followRedone(store, struct.id)\n                if (diff > 0) {\n                  item = getItemCleanStart(transaction, createID(item.id.client, item.id.clock + diff))\n                }\n                if (item.length > len) {\n                  getItemCleanStart(transaction, createID(item.id.client, endClock))\n                }\n                struct = item\n              }\n              if (!struct.deleted && scope.some(type => isParentOf(type, /** @type {Item} */ (struct)))) {\n                itemsToDelete.push(struct)\n              }\n            }\n          })\n        }\n      })\n      iterateDeletedStructs(transaction, stackItem.ds, struct => {\n        const id = struct.id\n        const clock = id.clock\n        const client = id.client\n        const startClock = stackItem.beforeState.get(client) || 0\n        const endClock = stackItem.afterState.get(client) || 0\n        if (\n          struct instanceof Item &&\n          scope.some(type => isParentOf(type, struct)) &&\n          // Never redo structs in [stackItem.start, stackItem.start + stackItem.end) because they were created and deleted in the same capture interval.\n          !(clock >= startClock && clock < endClock)\n        ) {\n          itemsToRedo.add(struct)\n        }\n      })\n      itemsToRedo.forEach(struct => {\n        performedChange = redoItem(transaction, struct, itemsToRedo) !== null || performedChange\n      })\n      // We want to delete in reverse order so that children are deleted before\n      // parents, so we have more information available when items are filtered.\n      for (let i = itemsToDelete.length - 1; i >= 0; i--) {\n        const item = itemsToDelete[i]\n        if (undoManager.deleteFilter(item)) {\n          item.delete(transaction)\n          performedChange = true\n        }\n      }\n      result = stackItem\n      if (result != null) {\n        undoManager.emit('stack-item-popped', [{ stackItem: result, type: eventType }, undoManager])\n      }\n    }\n  }, undoManager)\n  return result\n}\n\n/**\n * @typedef {Object} UndoManagerOptions\n * @property {number} [UndoManagerOptions.captureTimeout=500]\n * @property {function(Item):boolean} [UndoManagerOptions.deleteFilter=()=>true] Sometimes\n * it is necessary to filter whan an Undo/Redo operation can delete. If this\n * filter returns false, the type/item won't be deleted even it is in the\n * undo/redo scope.\n * @property {Set<any>} [UndoManagerOptions.trackedOrigins=new Set([null])]\n */\n\n/**\n * Fires 'stack-item-added' event when a stack item was added to either the undo- or\n * the redo-stack. You may store additional stack information via the\n * metadata property on `event.stackItem.meta` (it is a `Map` of metadata properties).\n * Fires 'stack-item-popped' event when a stack item was popped from either the\n * undo- or the redo-stack. You may restore the saved stack information from `event.stackItem.meta`.\n *\n * @extends {Observable<'stack-item-added'|'stack-item-popped'>}\n */\nexport class UndoManager extends Observable {\n  /**\n   * @param {AbstractType<any>|Array<AbstractType<any>>} typeScope Accepts either a single type, or an array of types\n   * @param {UndoManagerOptions} options\n   */\n  constructor (typeScope, { captureTimeout, deleteFilter = () => true, trackedOrigins = new Set([null]) } = {}) {\n    if (captureTimeout == null) {\n      captureTimeout = 500\n    }\n    super()\n    this.scope = typeScope instanceof Array ? typeScope : [typeScope]\n    this.deleteFilter = deleteFilter\n    trackedOrigins.add(this)\n    this.trackedOrigins = trackedOrigins\n    /**\n     * @type {Array<StackItem>}\n     */\n    this.undoStack = []\n    /**\n     * @type {Array<StackItem>}\n     */\n    this.redoStack = []\n    /**\n     * Whether the client is currently undoing (calling UndoManager.undo)\n     *\n     * @type {boolean}\n     */\n    this.undoing = false\n    this.redoing = false\n    this.doc = /** @type {Doc} */ (this.scope[0].doc)\n    this.lastChange = 0\n    this.doc.on('afterTransaction', /** @param {Transaction} transaction */ transaction => {\n      // Only track certain transactions\n      if (!this.scope.some(type => transaction.changedParentTypes.has(type)) || (!this.trackedOrigins.has(transaction.origin) && (!transaction.origin || !this.trackedOrigins.has(transaction.origin.constructor)))) {\n        return\n      }\n      const undoing = this.undoing\n      const redoing = this.redoing\n      const stack = undoing ? this.redoStack : this.undoStack\n      if (undoing) {\n        this.stopCapturing() // next undo should not be appended to last stack item\n      } else if (!redoing) {\n        // neither undoing nor redoing: delete redoStack\n        this.redoStack = []\n      }\n      const beforeState = transaction.beforeState\n      const afterState = transaction.afterState\n      const now = time.getUnixTime()\n      if (now - this.lastChange < captureTimeout && stack.length > 0 && !undoing && !redoing) {\n        // append change to last stack op\n        const lastOp = stack[stack.length - 1]\n        lastOp.ds = mergeDeleteSets([lastOp.ds, transaction.deleteSet])\n        lastOp.afterState = afterState\n      } else {\n        // create a new stack op\n        stack.push(new StackItem(transaction.deleteSet, beforeState, afterState))\n      }\n      if (!undoing && !redoing) {\n        this.lastChange = now\n      }\n      // make sure that deleted structs are not gc'd\n      iterateDeletedStructs(transaction, transaction.deleteSet, /** @param {Item|GC} item */ item => {\n        if (item instanceof Item && this.scope.some(type => isParentOf(type, item))) {\n          keepItem(item, true)\n        }\n      })\n      this.emit('stack-item-added', [{ stackItem: stack[stack.length - 1], origin: transaction.origin, type: undoing ? 'redo' : 'undo' }, this])\n    })\n  }\n\n  clear () {\n    this.doc.transact(transaction => {\n      /**\n       * @param {StackItem} stackItem\n       */\n      const clearItem = stackItem => {\n        iterateDeletedStructs(transaction, stackItem.ds, item => {\n          if (item instanceof Item && this.scope.some(type => isParentOf(type, item))) {\n            keepItem(item, false)\n          }\n        })\n      }\n      this.undoStack.forEach(clearItem)\n      this.redoStack.forEach(clearItem)\n    })\n    this.undoStack = []\n    this.redoStack = []\n  }\n\n  /**\n   * UndoManager merges Undo-StackItem if they are created within time-gap\n   * smaller than `options.captureTimeout`. Call `um.stopCapturing()` so that the next\n   * StackItem won't be merged.\n   *\n   *\n   * @example\n   *     // without stopCapturing\n   *     ytext.insert(0, 'a')\n   *     ytext.insert(1, 'b')\n   *     um.undo()\n   *     ytext.toString() // => '' (note that 'ab' was removed)\n   *     // with stopCapturing\n   *     ytext.insert(0, 'a')\n   *     um.stopCapturing()\n   *     ytext.insert(0, 'b')\n   *     um.undo()\n   *     ytext.toString() // => 'a' (note that only 'b' was removed)\n   *\n   */\n  stopCapturing () {\n    this.lastChange = 0\n  }\n\n  /**\n   * Undo last changes on type.\n   *\n   * @return {StackItem?} Returns StackItem if a change was applied\n   */\n  undo () {\n    this.undoing = true\n    let res\n    try {\n      res = popStackItem(this, this.undoStack, 'undo')\n    } finally {\n      this.undoing = false\n    }\n    return res\n  }\n\n  /**\n   * Redo last undo operation.\n   *\n   * @return {StackItem?} Returns StackItem if a change was applied\n   */\n  redo () {\n    this.redoing = true\n    let res\n    try {\n      res = popStackItem(this, this.redoStack, 'redo')\n    } finally {\n      this.redoing = false\n    }\n    return res\n  }\n}\n","\nimport {\n  isDeleted,\n  Item, AbstractType, Transaction, AbstractStruct // eslint-disable-line\n} from '../internals.js'\n\nimport * as set from 'lib0/set.js'\nimport * as array from 'lib0/array.js'\n\n/**\n * YEvent describes the changes on a YType.\n */\nexport class YEvent {\n  /**\n   * @param {AbstractType<any>} target The changed type.\n   * @param {Transaction} transaction\n   */\n  constructor (target, transaction) {\n    /**\n     * The type on which this event was created on.\n     * @type {AbstractType<any>}\n     */\n    this.target = target\n    /**\n     * The current target on which the observe callback is called.\n     * @type {AbstractType<any>}\n     */\n    this.currentTarget = target\n    /**\n     * The transaction that triggered this event.\n     * @type {Transaction}\n     */\n    this.transaction = transaction\n    /**\n     * @type {Object|null}\n     */\n    this._changes = null\n  }\n\n  /**\n   * Computes the path from `y` to the changed type.\n   *\n   * The following property holds:\n   * @example\n   *   let type = y\n   *   event.path.forEach(dir => {\n   *     type = type.get(dir)\n   *   })\n   *   type === event.target // => true\n   */\n  get path () {\n    // @ts-ignore _item is defined because target is integrated\n    return getPathTo(this.currentTarget, this.target)\n  }\n\n  /**\n   * Check if a struct is deleted by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */\n  deletes (struct) {\n    return isDeleted(this.transaction.deleteSet, struct.id)\n  }\n\n  /**\n   * Check if a struct is added by this event.\n   *\n   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.\n   *\n   * @param {AbstractStruct} struct\n   * @return {boolean}\n   */\n  adds (struct) {\n    return struct.id.clock >= (this.transaction.beforeState.get(struct.id.client) || 0)\n  }\n\n  /**\n   * @return {{added:Set<Item>,deleted:Set<Item>,delta:Array<{insert:Array<any>}|{delete:number}|{retain:number}>}}\n   */\n  get changes () {\n    let changes = this._changes\n    if (changes === null) {\n      const target = this.target\n      const added = set.create()\n      const deleted = set.create()\n      /**\n       * @type {Array<{insert:Array<any>}|{delete:number}|{retain:number}>}\n       */\n      const delta = []\n      /**\n       * @type {Map<string,{ action: 'add' | 'update' | 'delete', oldValue: any}>}\n       */\n      const keys = new Map()\n      changes = {\n        added, deleted, delta, keys\n      }\n      const changed = /** @type Set<string|null> */ (this.transaction.changed.get(target))\n      if (changed.has(null)) {\n        /**\n         * @type {any}\n         */\n        let lastOp = null\n        const packOp = () => {\n          if (lastOp) {\n            delta.push(lastOp)\n          }\n        }\n        for (let item = target._start; item !== null; item = item.right) {\n          if (item.deleted) {\n            if (this.deletes(item) && !this.adds(item)) {\n              if (lastOp === null || lastOp.delete === undefined) {\n                packOp()\n                lastOp = { delete: 0 }\n              }\n              lastOp.delete += item.length\n              deleted.add(item)\n            } // else nop\n          } else {\n            if (this.adds(item)) {\n              if (lastOp === null || lastOp.insert === undefined) {\n                packOp()\n                lastOp = { insert: [] }\n              }\n              lastOp.insert = lastOp.insert.concat(item.content.getContent())\n              added.add(item)\n            } else {\n              if (lastOp === null || lastOp.retain === undefined) {\n                packOp()\n                lastOp = { retain: 0 }\n              }\n              lastOp.retain += item.length\n            }\n          }\n        }\n        if (lastOp !== null && lastOp.retain === undefined) {\n          packOp()\n        }\n      }\n      changed.forEach(key => {\n        if (key !== null) {\n          const item = /** @type {Item} */ (target._map.get(key))\n          /**\n           * @type {'delete' | 'add' | 'update'}\n           */\n          let action\n          let oldValue\n          if (this.adds(item)) {\n            let prev = item.left\n            while (prev !== null && this.adds(prev)) {\n              prev = prev.left\n            }\n            if (this.deletes(item)) {\n              if (prev !== null && this.deletes(prev)) {\n                action = 'delete'\n                oldValue = array.last(prev.content.getContent())\n              } else {\n                return\n              }\n            } else {\n              if (prev !== null && this.deletes(prev)) {\n                action = 'update'\n                oldValue = array.last(prev.content.getContent())\n              } else {\n                action = 'add'\n                oldValue = undefined\n              }\n            }\n          } else {\n            if (this.deletes(item)) {\n              action = 'delete'\n              oldValue = array.last(/** @type {Item} */ item.content.getContent())\n            } else {\n              return // nop\n            }\n          }\n          keys.set(key, { action, oldValue })\n        }\n      })\n      this._changes = changes\n    }\n    return /** @type {any} */ (changes)\n  }\n}\n\n/**\n * Compute the path from this type to the specified target.\n *\n * @example\n *   // `child` should be accessible via `type.get(path[0]).get(path[1])..`\n *   const path = type.getPathTo(child)\n *   // assuming `type instanceof YArray`\n *   console.log(path) // might look like => [2, 'key1']\n *   child === type.get(path[0]).get(path[1])\n *\n * @param {AbstractType<any>} parent\n * @param {AbstractType<any>} child target\n * @return {Array<string|number>} Path to the target\n *\n * @private\n * @function\n */\nconst getPathTo = (parent, child) => {\n  const path = []\n  while (child._item !== null && child !== parent) {\n    if (child._item.parentSub !== null) {\n      // parent is map-ish\n      path.unshift(child._item.parentSub)\n    } else {\n      // parent is array-ish\n      let i = 0\n      let c = /** @type {AbstractType<any>} */ (child._item.parent)._start\n      while (c !== child._item && c !== null) {\n        if (!c.deleted) {\n          i++\n        }\n        c = c.right\n      }\n      path.unshift(i)\n    }\n    child = /** @type {AbstractType<any>} */ (child._item.parent)\n  }\n  return path\n}\n","\nimport {\n  removeEventHandlerListener,\n  callEventHandlerListeners,\n  addEventHandlerListener,\n  createEventHandler,\n  getState,\n  isVisible,\n  ContentType,\n  createID,\n  ContentAny,\n  ContentBinary,\n  getItemCleanStart,\n  ID, Doc, Snapshot, Transaction, EventHandler, YEvent, Item, // eslint-disable-line\n} from '../internals.js'\n\nimport * as map from 'lib0/map.js'\nimport * as iterator from 'lib0/iterator.js'\nimport * as error from 'lib0/error.js'\nimport * as encoding from 'lib0/encoding.js' // eslint-disable-line\n\n/**\n * Accumulate all (list) children of a type and return them as an Array.\n *\n * @param {AbstractType<any>} t\n * @return {Array<Item>}\n */\nexport const getTypeChildren = t => {\n  let s = t._start\n  const arr = []\n  while (s) {\n    arr.push(s)\n    s = s.right\n  }\n  return arr\n}\n\n/**\n * Call event listeners with an event. This will also add an event to all\n * parents (for `.observeDeep` handlers).\n *\n * @template EventType\n * @param {AbstractType<EventType>} type\n * @param {Transaction} transaction\n * @param {EventType} event\n */\nexport const callTypeObservers = (type, transaction, event) => {\n  const changedType = type\n  const changedParentTypes = transaction.changedParentTypes\n  while (true) {\n    // @ts-ignore\n    map.setIfUndefined(changedParentTypes, type, () => []).push(event)\n    if (type._item === null) {\n      break\n    }\n    type = /** @type {AbstractType<any>} */ (type._item.parent)\n  }\n  callEventHandlerListeners(changedType._eH, event, transaction)\n}\n\n/**\n * @template EventType\n * Abstract Yjs Type class\n */\nexport class AbstractType {\n  constructor () {\n    /**\n     * @type {Item|null}\n     */\n    this._item = null\n    /**\n     * @type {Map<string,Item>}\n     */\n    this._map = new Map()\n    /**\n     * @type {Item|null}\n     */\n    this._start = null\n    /**\n     * @type {Doc|null}\n     */\n    this.doc = null\n    this._length = 0\n    /**\n     * Event handlers\n     * @type {EventHandler<EventType,Transaction>}\n     */\n    this._eH = createEventHandler()\n    /**\n     * Deep event handlers\n     * @type {EventHandler<Array<YEvent>,Transaction>}\n     */\n    this._dEH = createEventHandler()\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item|null} item\n   */\n  _integrate (y, item) {\n    this.doc = y\n    this._item = item\n  }\n\n  /**\n   * @return {AbstractType<EventType>}\n   */\n  _copy () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {encoding.Encoder} encoder\n   */\n  _write (encoder) { }\n\n  /**\n   * The first non-deleted item\n   */\n  get _first () {\n    let n = this._start\n    while (n !== null && n.deleted) {\n      n = n.right\n    }\n    return n\n  }\n\n  /**\n   * Creates YEvent and calls all type observers.\n   * Must be implemented by each type.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) { /* skip if no type is specified */ }\n\n  /**\n   * Observe all events that are created on this type.\n   *\n   * @param {function(EventType, Transaction):void} f Observer function\n   */\n  observe (f) {\n    addEventHandlerListener(this._eH, f)\n  }\n\n  /**\n   * Observe all events that are created by this type and its children.\n   *\n   * @param {function(Array<YEvent>,Transaction):void} f Observer function\n   */\n  observeDeep (f) {\n    addEventHandlerListener(this._dEH, f)\n  }\n\n  /**\n   * Unregister an observer function.\n   *\n   * @param {function(EventType,Transaction):void} f Observer function\n   */\n  unobserve (f) {\n    removeEventHandlerListener(this._eH, f)\n  }\n\n  /**\n   * Unregister an observer function.\n   *\n   * @param {function(Array<YEvent>,Transaction):void} f Observer function\n   */\n  unobserveDeep (f) {\n    removeEventHandlerListener(this._dEH, f)\n  }\n\n  /**\n   * @abstract\n   * @return {any}\n   */\n  toJSON () {}\n}\n\n/**\n * @param {AbstractType<any>} type\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nexport const typeListToArray = type => {\n  const cs = []\n  let n = type._start\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent()\n      for (let i = 0; i < c.length; i++) {\n        cs.push(c[i])\n      }\n    }\n    n = n.right\n  }\n  return cs\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {Snapshot} snapshot\n * @return {Array<any>}\n *\n * @private\n * @function\n */\nexport const typeListToArraySnapshot = (type, snapshot) => {\n  const cs = []\n  let n = type._start\n  while (n !== null) {\n    if (n.countable && isVisible(n, snapshot)) {\n      const c = n.content.getContent()\n      for (let i = 0; i < c.length; i++) {\n        cs.push(c[i])\n      }\n    }\n    n = n.right\n  }\n  return cs\n}\n\n/**\n * Executes a provided function on once on overy element of this YArray.\n *\n * @param {AbstractType<any>} type\n * @param {function(any,number,any):void} f A function to execute on every element of this YArray.\n *\n * @private\n * @function\n */\nexport const typeListForEach = (type, f) => {\n  let index = 0\n  let n = type._start\n  while (n !== null) {\n    if (n.countable && !n.deleted) {\n      const c = n.content.getContent()\n      for (let i = 0; i < c.length; i++) {\n        f(c[i], index++, type)\n      }\n    }\n    n = n.right\n  }\n}\n\n/**\n * @template C,R\n * @param {AbstractType<any>} type\n * @param {function(C,number,AbstractType<any>):R} f\n * @return {Array<R>}\n *\n * @private\n * @function\n */\nexport const typeListMap = (type, f) => {\n  /**\n   * @type {Array<any>}\n   */\n  const result = []\n  typeListForEach(type, (c, i) => {\n    result.push(f(c, i, type))\n  })\n  return result\n}\n\n/**\n * @param {AbstractType<any>} type\n * @return {IterableIterator<any>}\n *\n * @private\n * @function\n */\nexport const typeListCreateIterator = type => {\n  let n = type._start\n  /**\n   * @type {Array<any>|null}\n   */\n  let currentContent = null\n  let currentContentIndex = 0\n  return {\n    [Symbol.iterator] () {\n      return this\n    },\n    next: () => {\n      // find some content\n      if (currentContent === null) {\n        while (n !== null && n.deleted) {\n          n = n.right\n        }\n        // check if we reached the end, no need to check currentContent, because it does not exist\n        if (n === null) {\n          return {\n            done: true,\n            value: undefined\n          }\n        }\n        // we found n, so we can set currentContent\n        currentContent = n.content.getContent()\n        currentContentIndex = 0\n        n = n.right // we used the content of n, now iterate to next\n      }\n      const value = currentContent[currentContentIndex++]\n      // check if we need to empty currentContent\n      if (currentContent.length <= currentContentIndex) {\n        currentContent = null\n      }\n      return {\n        done: false,\n        value\n      }\n    }\n  }\n}\n\n/**\n * Executes a provided function on once on overy element of this YArray.\n * Operates on a snapshotted state of the document.\n *\n * @param {AbstractType<any>} type\n * @param {function(any,number,AbstractType<any>):void} f A function to execute on every element of this YArray.\n * @param {Snapshot} snapshot\n *\n * @private\n * @function\n */\nexport const typeListForEachSnapshot = (type, f, snapshot) => {\n  let index = 0\n  let n = type._start\n  while (n !== null) {\n    if (n.countable && isVisible(n, snapshot)) {\n      const c = n.content.getContent()\n      for (let i = 0; i < c.length; i++) {\n        f(c[i], index++, type)\n      }\n    }\n    n = n.right\n  }\n}\n\n/**\n * @param {AbstractType<any>} type\n * @param {number} index\n * @return {any}\n *\n * @private\n * @function\n */\nexport const typeListGet = (type, index) => {\n  for (let n = type._start; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        return n.content.getContent()[index]\n      }\n      index -= n.length\n    }\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {Item?} referenceItem\n * @param {Array<Object<string,any>|Array<any>|boolean|number|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nexport const typeListInsertGenericsAfter = (transaction, parent, referenceItem, content) => {\n  let left = referenceItem\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  const store = doc.store\n  const right = referenceItem === null ? parent._start : referenceItem.right\n  /**\n   * @type {Array<Object|Array<any>|number>}\n   */\n  let jsonContent = []\n  const packJsonContent = () => {\n    if (jsonContent.length > 0) {\n      left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentAny(jsonContent))\n      left.integrate(transaction, 0)\n      jsonContent = []\n    }\n  }\n  content.forEach(c => {\n    switch (c.constructor) {\n      case Number:\n      case Object:\n      case Boolean:\n      case Array:\n      case String:\n        jsonContent.push(c)\n        break\n      default:\n        packJsonContent()\n        switch (c.constructor) {\n          case Uint8Array:\n          case ArrayBuffer:\n            left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentBinary(new Uint8Array(/** @type {Uint8Array} */ (c))))\n            left.integrate(transaction, 0)\n            break\n          default:\n            if (c instanceof AbstractType) {\n              left = new Item(createID(ownClientId, getState(store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentType(c))\n              left.integrate(transaction, 0)\n            } else {\n              throw new Error('Unexpected content type in insert operation')\n            }\n        }\n    }\n  })\n  packJsonContent()\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {Array<Object<string,any>|Array<any>|number|string|Uint8Array>} content\n *\n * @private\n * @function\n */\nexport const typeListInsertGenerics = (transaction, parent, index, content) => {\n  if (index === 0) {\n    return typeListInsertGenericsAfter(transaction, parent, null, content)\n  }\n  let n = parent._start\n  for (; n !== null; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index <= n.length) {\n        if (index < n.length) {\n          // insert in-between\n          getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index))\n        }\n        break\n      }\n      index -= n.length\n    }\n  }\n  return typeListInsertGenericsAfter(transaction, parent, n, content)\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @param {number} length\n *\n * @private\n * @function\n */\nexport const typeListDelete = (transaction, parent, index, length) => {\n  if (length === 0) { return }\n  let n = parent._start\n  // compute the first item to be deleted\n  for (; n !== null && index > 0; n = n.right) {\n    if (!n.deleted && n.countable) {\n      if (index < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index))\n      }\n      index -= n.length\n    }\n  }\n  // delete all items until done\n  while (length > 0 && n !== null) {\n    if (!n.deleted) {\n      if (length < n.length) {\n        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + length))\n      }\n      n.delete(transaction)\n      length -= n.length\n    }\n    n = n.right\n  }\n  if (length > 0) {\n    throw error.create('array length exceeded')\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n *\n * @private\n * @function\n */\nexport const typeMapDelete = (transaction, parent, key) => {\n  const c = parent._map.get(key)\n  if (c !== undefined) {\n    c.delete(transaction)\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Object|number|Array<any>|string|Uint8Array|AbstractType<any>} value\n *\n * @private\n * @function\n */\nexport const typeMapSet = (transaction, parent, key, value) => {\n  const left = parent._map.get(key) || null\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  let content\n  if (value == null) {\n    content = new ContentAny([value])\n  } else {\n    switch (value.constructor) {\n      case Number:\n      case Object:\n      case Boolean:\n      case Array:\n      case String:\n        content = new ContentAny([value])\n        break\n      case Uint8Array:\n        content = new ContentBinary(/** @type {Uint8Array} */ (value))\n        break\n      default:\n        if (value instanceof AbstractType) {\n          content = new ContentType(value)\n        } else {\n          throw new Error('Unexpected content type')\n        }\n    }\n  }\n  new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, null, null, parent, key, content).integrate(transaction, 0)\n}\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {Object<string,any>|number|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\nexport const typeMapGet = (parent, key) => {\n  const val = parent._map.get(key)\n  return val !== undefined && !val.deleted ? val.content.getContent()[val.length - 1] : undefined\n}\n\n/**\n * @param {AbstractType<any>} parent\n * @return {Object<string,Object<string,any>|number|Array<any>|string|Uint8Array|AbstractType<any>|undefined>}\n *\n * @private\n * @function\n */\nexport const typeMapGetAll = (parent) => {\n  /**\n   * @type {Object<string,any>}\n   */\n  const res = {}\n  for (const [key, value] of parent._map) {\n    if (!value.deleted) {\n      res[key] = value.content.getContent()[value.length - 1]\n    }\n  }\n  return res\n}\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @return {boolean}\n *\n * @private\n * @function\n */\nexport const typeMapHas = (parent, key) => {\n  const val = parent._map.get(key)\n  return val !== undefined && !val.deleted\n}\n\n/**\n * @param {AbstractType<any>} parent\n * @param {string} key\n * @param {Snapshot} snapshot\n * @return {Object<string,any>|number|Array<any>|string|Uint8Array|AbstractType<any>|undefined}\n *\n * @private\n * @function\n */\nexport const typeMapGetSnapshot = (parent, key, snapshot) => {\n  let v = parent._map.get(key) || null\n  while (v !== null && (!snapshot.sv.has(v.id.client) || v.id.clock >= (snapshot.sv.get(v.id.client) || 0))) {\n    v = v.left\n  }\n  return v !== null && isVisible(v, snapshot) ? v.content.getContent()[v.length - 1] : undefined\n}\n\n/**\n * @param {Map<string,Item>} map\n * @return {IterableIterator<Array<any>>}\n *\n * @private\n * @function\n */\nexport const createMapIterator = map => iterator.iteratorFilter(map.entries(), /** @param {any} entry */ entry => !entry[1].deleted)\n","/**\n * @module YArray\n */\n\nimport {\n  YEvent,\n  AbstractType,\n  typeListGet,\n  typeListToArray,\n  typeListForEach,\n  typeListCreateIterator,\n  typeListInsertGenerics,\n  typeListDelete,\n  typeListMap,\n  YArrayRefID,\n  callTypeObservers,\n  transact,\n  Doc, Transaction, Item // eslint-disable-line\n} from '../internals.js'\n\nimport * as decoding from 'lib0/decoding.js' // eslint-disable-line\nimport * as encoding from 'lib0/encoding.js'\n\n/**\n * Event that describes the changes on a YArray\n * @template T\n */\nexport class YArrayEvent extends YEvent {\n  /**\n   * @param {YArray<T>} yarray The changed type\n   * @param {Transaction} transaction The transaction object\n   */\n  constructor (yarray, transaction) {\n    super(yarray, transaction)\n    this._transaction = transaction\n  }\n}\n\n/**\n * A shared Array implementation.\n * @template T\n * @extends AbstractType<YArrayEvent<T>>\n * @implements {Iterable<T>}\n */\nexport class YArray extends AbstractType {\n  constructor () {\n    super()\n    /**\n     * @type {Array<any>?}\n     * @private\n     */\n    this._prelimContent = []\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    this.insert(0, /** @type {Array<any>} */ (this._prelimContent))\n    this._prelimContent = null\n  }\n\n  _copy () {\n    return new YArray()\n  }\n\n  get length () {\n    return this._prelimContent === null ? this._length : this._prelimContent.length\n  }\n\n  /**\n   * Creates YArrayEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YArrayEvent(this, transaction))\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * Important: This function expects an array of content. Not just a content\n   * object. The reason for this \"weirdness\" is that inserting several elements\n   * is very efficient when it is done as a single operation.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  yarray.insert(0, ['a'])\n   *  // Insert numbers 1, 2 at position 1\n   *  yarray.insert(1, [1, 2])\n   *\n   * @param {number} index The index to insert content at.\n   * @param {Array<T>} content The array of content\n   */\n  insert (index, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListInsertGenerics(transaction, this, index, content)\n      })\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).splice(index, 0, ...content)\n    }\n  }\n\n  /**\n   * Appends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to append.\n   */\n  push (content) {\n    this.insert(this.length, content)\n  }\n\n  /**\n   * Preppends content to this YArray.\n   *\n   * @param {Array<T>} content Array of content to preppend.\n   */\n  unshift (content) {\n    this.insert(0, content)\n  }\n\n  /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} length The number of elements to remove. Defaults to 1.\n   */\n  delete (index, length = 1) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListDelete(transaction, this, index, length)\n      })\n    } else {\n      /** @type {Array<any>} */ (this._prelimContent).splice(index, length)\n    }\n  }\n\n  /**\n   * Returns the i-th element from a YArray.\n   *\n   * @param {number} index The index of the element to return from the YArray\n   * @return {T}\n   */\n  get (index) {\n    return typeListGet(this, index)\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<T>}\n   */\n  toArray () {\n    return typeListToArray(this)\n  }\n\n  /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Array<any>}\n   */\n  toJSON () {\n    return this.map(c => c instanceof AbstractType ? c.toJSON() : c)\n  }\n\n  /**\n   * Returns an Array with the result of calling a provided function on every\n   * element of this YArray.\n   *\n   * @template T,M\n   * @param {function(T,number,YArray<T>):M} f Function that produces an element of the new Array\n   * @return {Array<M>} A new array with each element being the result of the\n   *                 callback function\n   */\n  map (f) {\n    return typeListMap(this, /** @type {any} */ (f))\n  }\n\n  /**\n   * Executes a provided function on once on overy element of this YArray.\n   *\n   * @param {function(T,number,YArray<T>):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    typeListForEach(this, f)\n  }\n\n  /**\n   * @return {IterableIterator<T>}\n   */\n  [Symbol.iterator] () {\n    return typeListCreateIterator(this)\n  }\n\n  /**\n   * @param {encoding.Encoder} encoder\n   */\n  _write (encoder) {\n    encoding.writeVarUint(encoder, YArrayRefID)\n  }\n}\n\n/**\n * @param {decoding.Decoder} decoder\n *\n * @private\n * @function\n */\nexport const readYArray = decoder => new YArray()\n","\n/**\n * @module YMap\n */\n\nimport {\n  YEvent,\n  AbstractType,\n  typeMapDelete,\n  typeMapSet,\n  typeMapGet,\n  typeMapHas,\n  createMapIterator,\n  YMapRefID,\n  callTypeObservers,\n  transact,\n  Doc, Transaction, Item // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js' // eslint-disable-line\nimport * as iterator from 'lib0/iterator.js'\n\n/**\n * @template T\n * Event that describes the changes on a YMap.\n */\nexport class YMapEvent extends YEvent {\n  /**\n   * @param {YMap<T>} ymap The YArray that changed.\n   * @param {Transaction} transaction\n   * @param {Set<any>} subs The keys that changed.\n   */\n  constructor (ymap, transaction, subs) {\n    super(ymap, transaction)\n    this.keysChanged = subs\n  }\n}\n\n/**\n * @template T number|string|Object|Array|Uint8Array\n * A shared Map implementation.\n *\n * @extends AbstractType<YMapEvent<T>>\n * @implements {Iterable<T>}\n */\nexport class YMap extends AbstractType {\n  /**\n   *\n   * @param {Iterable<readonly [string, any]>=} entries - an optional iterable to initialize the YMap\n   */\n  constructor (entries) {\n    super()\n    /**\n     * @type {Map<string,any>?}\n     * @private\n     */\n    this._prelimContent = null\n\n    if (entries === undefined) {\n      this._prelimContent = new Map()\n    } else {\n      this._prelimContent = new Map(entries)\n    }\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    for (const [key, value] of /** @type {Map<string, any>} */ (this._prelimContent)) {\n      this.set(key, value)\n    }\n    this._prelimContent = null\n  }\n\n  _copy () {\n    return new YMap()\n  }\n\n  /**\n   * Creates YMapEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YMapEvent(this, transaction, parentSubs))\n  }\n\n  /**\n   * Transforms this Shared Type to a JSON object.\n   *\n   * @return {Object<string,T>}\n   */\n  toJSON () {\n    /**\n     * @type {Object<string,T>}\n     */\n    const map = {}\n    for (const [key, item] of this._map) {\n      if (!item.deleted) {\n        const v = item.content.getContent()[item.length - 1]\n        map[key] = v instanceof AbstractType ? v.toJSON() : v\n      }\n    }\n    return map\n  }\n\n  /**\n   * Returns the size of the YMap (count of key/value pairs)\n   *\n   * @return {number}\n   */\n  get size () {\n    return [...createMapIterator(this._map)].length\n  }\n\n  /**\n   * Returns the keys for each element in the YMap Type.\n   *\n   * @return {IterableIterator<string>}\n   */\n  keys () {\n    return iterator.iteratorMap(createMapIterator(this._map), /** @param {any} v */ v => v[0])\n  }\n\n  /**\n   * Returns the keys for each element in the YMap Type.\n   *\n   * @return {IterableIterator<string>}\n   */\n  values () {\n    return iterator.iteratorMap(createMapIterator(this._map), /** @param {any} v */ v => v[1].content.getContent()[v[1].length - 1])\n  }\n\n  /**\n   * Returns an Iterator of [key, value] pairs\n   *\n   * @return {IterableIterator<any>}\n   */\n  entries () {\n    return iterator.iteratorMap(createMapIterator(this._map), /** @param {any} v */ v => [v[0], v[1].content.getContent()[v[1].length - 1]])\n  }\n\n  /**\n   * Executes a provided function on once on every key-value pair.\n   *\n   * @param {function(T,string,YMap<T>):void} f A function to execute on every element of this YArray.\n   */\n  forEach (f) {\n    /**\n     * @type {Object<string,T>}\n     */\n    const map = {}\n    for (const [key, item] of this._map) {\n      if (!item.deleted) {\n        f(item.content.getContent()[item.length - 1], key, this)\n      }\n    }\n    return map\n  }\n\n  /**\n   * @return {IterableIterator<T>}\n   */\n  [Symbol.iterator] () {\n    return this.entries()\n  }\n\n  /**\n   * Remove a specified element from this YMap.\n   *\n   * @param {string} key The key of the element to remove.\n   */\n  delete (key) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, key)\n      })\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).delete(key)\n    }\n  }\n\n  /**\n   * Adds or updates an element with a specified key and value.\n   *\n   * @param {string} key The key of the element to add to this YMap\n   * @param {T} value The value of the element to add\n   */\n  set (key, value) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, key, value)\n      })\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimContent).set(key, value)\n    }\n    return value\n  }\n\n  /**\n   * Returns a specified element from this YMap.\n   *\n   * @param {string} key\n   * @return {T|undefined}\n   */\n  get (key) {\n    return /** @type {any} */ (typeMapGet(this, key))\n  }\n\n  /**\n   * Returns a boolean indicating whether the specified key exists or not.\n   *\n   * @param {string} key The key to test.\n   * @return {boolean}\n   */\n  has (key) {\n    return typeMapHas(this, key)\n  }\n\n  /**\n   * @param {encoding.Encoder} encoder\n   */\n  _write (encoder) {\n    encoding.writeVarUint(encoder, YMapRefID)\n  }\n}\n\n/**\n * @param {decoding.Decoder} decoder\n *\n * @private\n * @function\n */\nexport const readYMap = decoder => new YMap()\n","\n/**\n * @module YText\n */\n\nimport {\n  YEvent,\n  AbstractType,\n  getItemCleanStart,\n  getState,\n  isVisible,\n  createID,\n  YTextRefID,\n  callTypeObservers,\n  transact,\n  ContentEmbed,\n  GC,\n  ContentFormat,\n  ContentString,\n  splitSnapshotAffectedStructs,\n  iterateDeletedStructs,\n  iterateStructs,\n  ID, Doc, Item, Snapshot, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as decoding from 'lib0/decoding.js' // eslint-disable-line\nimport * as encoding from 'lib0/encoding.js'\nimport * as object from 'lib0/object.js'\nimport * as map from 'lib0/map.js'\n\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\nconst equalAttrs = (a, b) => a === b || (typeof a === 'object' && typeof b === 'object' && a && b && object.equalFlat(a, b))\n\nexport class ItemListPosition {\n  /**\n   * @param {Item|null} left\n   * @param {Item|null} right\n   */\n  constructor (left, right) {\n    this.left = left\n    this.right = right\n  }\n}\n\nexport class ItemTextListPosition extends ItemListPosition {\n  /**\n   * @param {Item|null} left\n   * @param {Item|null} right\n   * @param {Map<string,any>} currentAttributes\n   */\n  constructor (left, right, currentAttributes) {\n    super(left, right)\n    this.currentAttributes = currentAttributes\n  }\n}\n\nexport class ItemInsertionResult extends ItemListPosition {\n  /**\n   * @param {Item|null} left\n   * @param {Item|null} right\n   * @param {Map<string,any>} negatedAttributes\n   */\n  constructor (left, right, negatedAttributes) {\n    super(left, right)\n    this.negatedAttributes = negatedAttributes\n  }\n}\n\n/**\n * @param {Transaction} transaction\n * @param {Map<string,any>} currentAttributes\n * @param {Item|null} left\n * @param {Item|null} right\n * @param {number} count\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst findNextPosition = (transaction, currentAttributes, left, right, count) => {\n  while (right !== null && count > 0) {\n    switch (right.content.constructor) {\n      case ContentEmbed:\n      case ContentString:\n        if (!right.deleted) {\n          if (count < right.length) {\n            // split right\n            getItemCleanStart(transaction, createID(right.id.client, right.id.clock + count))\n          }\n          count -= right.length\n        }\n        break\n      case ContentFormat:\n        if (!right.deleted) {\n          updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (right.content))\n        }\n        break\n    }\n    left = right\n    right = right.right\n  }\n  return new ItemTextListPosition(left, right, currentAttributes)\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {number} index\n * @return {ItemTextListPosition}\n *\n * @private\n * @function\n */\nconst findPosition = (transaction, parent, index) => {\n  const currentAttributes = new Map()\n  const right = parent._start\n  return findNextPosition(transaction, currentAttributes, null, right, index)\n}\n\n/**\n * Negate applied formats\n *\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemListPosition} currPos\n * @param {Map<string,any>} negatedAttributes\n *\n * @private\n * @function\n */\nconst insertNegatedAttributes = (transaction, parent, currPos, negatedAttributes) => {\n  let { left, right } = currPos\n  // check if we really need to remove attributes\n  while (\n    right !== null && (\n      right.deleted === true || (\n        right.content.constructor === ContentFormat &&\n        equalAttrs(negatedAttributes.get(/** @type {ContentFormat} */ (right.content).key), /** @type {ContentFormat} */ (right.content).value)\n      )\n    )\n  ) {\n    if (!right.deleted) {\n      negatedAttributes.delete(/** @type {ContentFormat} */ (right.content).key)\n    }\n    left = right\n    right = right.right\n  }\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  for (const [key, val] of negatedAttributes) {\n    left = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val))\n    left.integrate(transaction, 0)\n  }\n  currPos.left = left\n  currPos.right = right\n}\n\n/**\n * @param {Map<string,any>} currentAttributes\n * @param {ContentFormat} format\n *\n * @private\n * @function\n */\nconst updateCurrentAttributes = (currentAttributes, format) => {\n  const { key, value } = format\n  if (value === null) {\n    currentAttributes.delete(key)\n  } else {\n    currentAttributes.set(key, value)\n  }\n}\n\n/**\n * @param {ItemListPosition} currPos\n * @param {Map<string,any>} currentAttributes\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\nconst minimizeAttributeChanges = (currPos, currentAttributes, attributes) => {\n  // go right while attributes[right.key] === right.value (or right is deleted)\n  let { left, right } = currPos\n  while (true) {\n    if (right === null) {\n      break\n    } else if (right.deleted) {\n      // continue\n    } else if (right.content.constructor === ContentFormat && equalAttrs(attributes[(/** @type {ContentFormat} */ (right.content)).key] || null, /** @type {ContentFormat} */ (right.content).value)) {\n      // found a format, update currentAttributes and continue\n      updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (right.content))\n    } else {\n      break\n    }\n    left = right\n    right = right.right\n  }\n  currPos.left = left\n  currPos.right = right\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemListPosition} currPos\n * @param {Map<string,any>} currentAttributes\n * @param {Object<string,any>} attributes\n * @return {Map<string,any>}\n *\n * @private\n * @function\n **/\nconst insertAttributes = (transaction, parent, currPos, currentAttributes, attributes) => {\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  const negatedAttributes = new Map()\n  // insert format-start items\n  for (const key in attributes) {\n    const val = attributes[key]\n    const currentVal = currentAttributes.get(key) || null\n    if (!equalAttrs(currentVal, val)) {\n      // save negated attribute (set null if currentVal undefined)\n      negatedAttributes.set(key, currentVal)\n      const { left, right } = currPos\n      currPos.left = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentFormat(key, val))\n      currPos.left.integrate(transaction, 0)\n    }\n  }\n  return negatedAttributes\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemListPosition} currPos\n * @param {Map<string,any>} currentAttributes\n * @param {string|object} text\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n **/\nconst insertText = (transaction, parent, currPos, currentAttributes, text, attributes) => {\n  for (const [key] of currentAttributes) {\n    if (attributes[key] === undefined) {\n      attributes[key] = null\n    }\n  }\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  minimizeAttributeChanges(currPos, currentAttributes, attributes)\n  const negatedAttributes = insertAttributes(transaction, parent, currPos, currentAttributes, attributes)\n  // insert content\n  const content = text.constructor === String ? new ContentString(/** @type {string} */ (text)) : new ContentEmbed(text)\n  const { left, right } = currPos\n  currPos.left = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, content)\n  currPos.left.integrate(transaction, 0)\n  return insertNegatedAttributes(transaction, parent, currPos, negatedAttributes)\n}\n\n/**\n * @param {Transaction} transaction\n * @param {AbstractType<any>} parent\n * @param {ItemListPosition} currPos\n * @param {Map<string,any>} currentAttributes\n * @param {number} length\n * @param {Object<string,any>} attributes\n *\n * @private\n * @function\n */\nconst formatText = (transaction, parent, currPos, currentAttributes, length, attributes) => {\n  const doc = transaction.doc\n  const ownClientId = doc.clientID\n  minimizeAttributeChanges(currPos, currentAttributes, attributes)\n  const negatedAttributes = insertAttributes(transaction, parent, currPos, currentAttributes, attributes)\n  let { left, right } = currPos\n  // iterate until first non-format or null is found\n  // delete all formats with attributes[format.key] != null\n  while (length > 0 && right !== null) {\n    if (!right.deleted) {\n      switch (right.content.constructor) {\n        case ContentFormat: {\n          const { key, value } = /** @type {ContentFormat} */ (right.content)\n          const attr = attributes[key]\n          if (attr !== undefined) {\n            if (equalAttrs(attr, value)) {\n              negatedAttributes.delete(key)\n            } else {\n              negatedAttributes.set(key, value)\n            }\n            right.delete(transaction)\n          }\n          updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (right.content))\n          break\n        }\n        case ContentEmbed:\n        case ContentString:\n          if (length < right.length) {\n            getItemCleanStart(transaction, createID(right.id.client, right.id.clock + length))\n          }\n          length -= right.length\n          break\n      }\n    }\n    left = right\n    right = right.right\n  }\n  // Quill just assumes that the editor starts with a newline and that it always\n  // ends with a newline. We only insert that newline when a new newline is\n  // inserted - i.e when length is bigger than type.length\n  if (length > 0) {\n    let newlines = ''\n    for (; length > 0; length--) {\n      newlines += '\\n'\n    }\n    left = new Item(createID(ownClientId, getState(doc.store, ownClientId)), left, left && left.lastId, right, right && right.id, parent, null, new ContentString(newlines))\n    left.integrate(transaction, 0)\n  }\n  currPos.left = left\n  currPos.right = right\n  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes)\n}\n\n/**\n * Call this function after string content has been deleted in order to\n * clean up formatting Items.\n *\n * @param {Transaction} transaction\n * @param {Item} start\n * @param {Item|null} end exclusive end, automatically iterates to the next Content Item\n * @param {Map<string,any>} startAttributes\n * @param {Map<string,any>} endAttributes This attribute is modified!\n * @return {number} The amount of formatting Items deleted.\n *\n * @function\n */\nconst cleanupFormattingGap = (transaction, start, end, startAttributes, endAttributes) => {\n  while (end && end.content.constructor !== ContentString && end.content.constructor !== ContentEmbed) {\n    if (!end.deleted && end.content.constructor === ContentFormat) {\n      updateCurrentAttributes(endAttributes, /** @type {ContentFormat} */ (end.content))\n    }\n    end = end.right\n  }\n  let cleanups = 0\n  while (start !== end) {\n    if (!start.deleted) {\n      const content = start.content\n      switch (content.constructor) {\n        case ContentFormat: {\n          const { key, value } = /** @type {ContentFormat} */ (content)\n          if ((endAttributes.get(key) || null) !== value || (startAttributes.get(key) || null) === value) {\n            // Either this format is overwritten or it is not necessary because the attribute already existed.\n            start.delete(transaction)\n            cleanups++\n          }\n          break\n        }\n      }\n    }\n    start = /** @type {Item} */ (start.right)\n  }\n  return cleanups\n}\n\n/**\n * @param {Transaction} transaction\n * @param {Item | null} item\n */\nconst cleanupContextlessFormattingGap = (transaction, item) => {\n  // iterate until item.right is null or content\n  while (item && item.right && (item.right.deleted || (item.right.content.constructor !== ContentString && item.right.content.constructor !== ContentEmbed))) {\n    item = item.right\n  }\n  const attrs = new Set()\n  // iterate back until a content item is found\n  while (item && (item.deleted || (item.content.constructor !== ContentString && item.content.constructor !== ContentEmbed))) {\n    if (!item.deleted && item.content.constructor === ContentFormat) {\n      const key = /** @type {ContentFormat} */ (item.content).key\n      if (attrs.has(key)) {\n        item.delete(transaction)\n      } else {\n        attrs.add(key)\n      }\n    }\n    item = item.left\n  }\n}\n\n/**\n * This function is experimental and subject to change / be removed.\n *\n * Ideally, we don't need this function at all. Formatting attributes should be cleaned up\n * automatically after each change. This function iterates twice over the complete YText type\n * and removes unnecessary formatting attributes. This is also helpful for testing.\n *\n * This function won't be exported anymore as soon as there is confidence that the YText type works as intended.\n *\n * @param {YText} type\n * @return {number} How many formatting attributes have been cleaned up.\n */\nexport const cleanupYTextFormatting = type => {\n  let res = 0\n  transact(/** @type {Doc} */ (type.doc), transaction => {\n    let start = /** @type {Item} */ (type._start)\n    let end = type._start\n    let startAttributes = map.create()\n    const currentAttributes = map.copy(startAttributes)\n    while (end) {\n      if (end.deleted === false) {\n        switch (end.content.constructor) {\n          case ContentFormat:\n            updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (end.content))\n            break\n          case ContentEmbed:\n          case ContentString:\n            res += cleanupFormattingGap(transaction, start, end, startAttributes, currentAttributes)\n            startAttributes = map.copy(currentAttributes)\n            start = end\n            break\n        }\n      }\n      end = end.right\n    }\n  })\n  return res\n}\n\n/**\n * @param {Transaction} transaction\n * @param {ItemListPosition} currPos\n * @param {Map<string,any>} currentAttributes\n * @param {number} length\n * @return {ItemListPosition}\n *\n * @private\n * @function\n */\nconst deleteText = (transaction, currPos, currentAttributes, length) => {\n  const startAttrs = map.copy(currentAttributes)\n  const start = currPos.right\n  let { left, right } = currPos\n  while (length > 0 && right !== null) {\n    if (right.deleted === false) {\n      switch (right.content.constructor) {\n        case ContentFormat:\n          updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (right.content))\n          break\n        case ContentEmbed:\n        case ContentString:\n          if (length < right.length) {\n            getItemCleanStart(transaction, createID(right.id.client, right.id.clock + length))\n          }\n          length -= right.length\n          right.delete(transaction)\n          break\n      }\n    }\n    left = right\n    right = right.right\n  }\n  if (start) {\n    cleanupFormattingGap(transaction, start, right, startAttrs, map.copy(currentAttributes))\n  }\n  currPos.left = left\n  currPos.right = right\n  return currPos\n}\n\n/**\n * The Quill Delta format represents changes on a text document with\n * formatting information. For mor information visit {@link https://quilljs.com/docs/delta/|Quill Delta}\n *\n * @example\n *   {\n *     ops: [\n *       { insert: 'Gandalf', attributes: { bold: true } },\n *       { insert: ' the ' },\n *       { insert: 'Grey', attributes: { color: '#cccccc' } }\n *     ]\n *   }\n *\n */\n\n/**\n  * Attributes that can be assigned to a selection of text.\n  *\n  * @example\n  *   {\n  *     bold: true,\n  *     font-size: '40px'\n  *   }\n  *\n  * @typedef {Object} TextAttributes\n  */\n\n/**\n * @typedef {Object} DeltaItem\n * @property {number|undefined} DeltaItem.delete\n * @property {number|undefined} DeltaItem.retain\n * @property {string|undefined} DeltaItem.string\n * @property {Object<string,any>} DeltaItem.attributes\n */\n\n/**\n * Event that describes the changes on a YText type.\n */\nexport class YTextEvent extends YEvent {\n  /**\n   * @param {YText} ytext\n   * @param {Transaction} transaction\n   */\n  constructor (ytext, transaction) {\n    super(ytext, transaction)\n    /**\n     * @type {Array<DeltaItem>|null}\n     */\n    this._delta = null\n  }\n\n  /**\n   * Compute the changes in the delta format.\n   * A {@link https://quilljs.com/docs/delta/|Quill Delta}) that represents the changes on the document.\n   *\n   * @type {Array<DeltaItem>}\n   *\n   * @public\n   */\n  get delta () {\n    if (this._delta === null) {\n      const y = /** @type {Doc} */ (this.target.doc)\n      this._delta = []\n      transact(y, transaction => {\n        const delta = /** @type {Array<DeltaItem>} */ (this._delta)\n        const currentAttributes = new Map() // saves all current attributes for insert\n        const oldAttributes = new Map()\n        let item = this.target._start\n        /**\n         * @type {string?}\n         */\n        let action = null\n        /**\n         * @type {Object<string,any>}\n         */\n        const attributes = {} // counts added or removed new attributes for retain\n        /**\n         * @type {string|object}\n         */\n        let insert = ''\n        let retain = 0\n        let deleteLen = 0\n        const addOp = () => {\n          if (action !== null) {\n            /**\n             * @type {any}\n             */\n            let op\n            switch (action) {\n              case 'delete':\n                op = { delete: deleteLen }\n                deleteLen = 0\n                break\n              case 'insert':\n                op = { insert }\n                if (currentAttributes.size > 0) {\n                  op.attributes = {}\n                  for (const [key, value] of currentAttributes) {\n                    if (value !== null) {\n                      op.attributes[key] = value\n                    }\n                  }\n                }\n                insert = ''\n                break\n              case 'retain':\n                op = { retain }\n                if (Object.keys(attributes).length > 0) {\n                  op.attributes = {}\n                  for (const key in attributes) {\n                    op.attributes[key] = attributes[key]\n                  }\n                }\n                retain = 0\n                break\n            }\n            delta.push(op)\n            action = null\n          }\n        }\n        while (item !== null) {\n          switch (item.content.constructor) {\n            case ContentEmbed:\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  addOp()\n                  action = 'insert'\n                  insert = /** @type {ContentEmbed} */ (item.content).embed\n                  addOp()\n                }\n              } else if (this.deletes(item)) {\n                if (action !== 'delete') {\n                  addOp()\n                  action = 'delete'\n                }\n                deleteLen += 1\n              } else if (!item.deleted) {\n                if (action !== 'retain') {\n                  addOp()\n                  action = 'retain'\n                }\n                retain += 1\n              }\n              break\n            case ContentString:\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  if (action !== 'insert') {\n                    addOp()\n                    action = 'insert'\n                  }\n                  insert += /** @type {ContentString} */ (item.content).str\n                }\n              } else if (this.deletes(item)) {\n                if (action !== 'delete') {\n                  addOp()\n                  action = 'delete'\n                }\n                deleteLen += item.length\n              } else if (!item.deleted) {\n                if (action !== 'retain') {\n                  addOp()\n                  action = 'retain'\n                }\n                retain += item.length\n              }\n              break\n            case ContentFormat: {\n              const { key, value } = /** @type {ContentFormat} */ (item.content)\n              if (this.adds(item)) {\n                if (!this.deletes(item)) {\n                  const curVal = currentAttributes.get(key) || null\n                  if (!equalAttrs(curVal, value)) {\n                    if (action === 'retain') {\n                      addOp()\n                    }\n                    if (equalAttrs(value, (oldAttributes.get(key) || null))) {\n                      delete attributes[key]\n                    } else {\n                      attributes[key] = value\n                    }\n                  } else {\n                    item.delete(transaction)\n                  }\n                }\n              } else if (this.deletes(item)) {\n                oldAttributes.set(key, value)\n                const curVal = currentAttributes.get(key) || null\n                if (!equalAttrs(curVal, value)) {\n                  if (action === 'retain') {\n                    addOp()\n                  }\n                  attributes[key] = curVal\n                }\n              } else if (!item.deleted) {\n                oldAttributes.set(key, value)\n                const attr = attributes[key]\n                if (attr !== undefined) {\n                  if (!equalAttrs(attr, value)) {\n                    if (action === 'retain') {\n                      addOp()\n                    }\n                    if (value === null) {\n                      attributes[key] = value\n                    } else {\n                      delete attributes[key]\n                    }\n                  } else {\n                    item.delete(transaction)\n                  }\n                }\n              }\n              if (!item.deleted) {\n                if (action === 'insert') {\n                  addOp()\n                }\n                updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (item.content))\n              }\n              break\n            }\n          }\n          item = item.right\n        }\n        addOp()\n        while (delta.length > 0) {\n          const lastOp = delta[delta.length - 1]\n          if (lastOp.retain !== undefined && lastOp.attributes === undefined) {\n            // retain delta's if they don't assign attributes\n            delta.pop()\n          } else {\n            break\n          }\n        }\n      })\n    }\n    return this._delta\n  }\n}\n\n/**\n * Type that represents text with formatting information.\n *\n * This type replaces y-richtext as this implementation is able to handle\n * block formats (format information on a paragraph), embeds (complex elements\n * like pictures and videos), and text formats (**bold**, *italic*).\n *\n * @extends AbstractType<YTextEvent>\n */\nexport class YText extends AbstractType {\n  /**\n   * @param {String} [string] The initial value of the YText.\n   */\n  constructor (string) {\n    super()\n    /**\n     * Array of pending operations on this type\n     * @type {Array<function():void>?}\n     */\n    this._pending = string !== undefined ? [() => this.insert(0, string)] : []\n  }\n\n  /**\n   * Number of characters of this text type.\n   *\n   * @type {number}\n   */\n  get length () {\n    return this._length\n  }\n\n  /**\n   * @param {Doc} y\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    try {\n      /** @type {Array<function>} */ (this._pending).forEach(f => f())\n    } catch (e) {\n      console.error(e)\n    }\n    this._pending = null\n  }\n\n  _copy () {\n    return new YText()\n  }\n\n  /**\n   * Creates YTextEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    const event = new YTextEvent(this, transaction)\n    const doc = transaction.doc\n    // If a remote change happened, we try to cleanup potential formatting duplicates.\n    if (!transaction.local) {\n      // check if another formatting item was inserted\n      let foundFormattingItem = false\n      for (const [client, afterClock] of transaction.afterState) {\n        const clock = transaction.beforeState.get(client) || 0\n        if (afterClock === clock) {\n          continue\n        }\n        iterateStructs(transaction, /** @type {Array<Item|GC>} */ (doc.store.clients.get(client)), clock, afterClock, item => {\n          // @ts-ignore\n          if (!item.deleted && item.content.constructor === ContentFormat) {\n            foundFormattingItem = true\n          }\n        })\n        if (foundFormattingItem) {\n          break\n        }\n      }\n      transact(doc, t => {\n        if (foundFormattingItem) {\n          // If a formatting item was inserted, we simply clean the whole type.\n          // We need to compute currentAttributes for the current position anyway.\n          cleanupYTextFormatting(this)\n        } else {\n          // If no formatting attribute was inserted, we can make due with contextless\n          // formatting cleanups.\n          // Contextless: it is not necessary to compute currentAttributes for the affected position.\n          iterateDeletedStructs(t, transaction.deleteSet, item => {\n            if (item instanceof GC) {\n              return\n            }\n            if (item.parent === this) {\n              cleanupContextlessFormattingGap(t, item)\n            }\n          })\n        }\n      })\n    }\n    callTypeObservers(this, transaction, event)\n  }\n\n  /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @public\n   */\n  toString () {\n    let str = ''\n    /**\n     * @type {Item|null}\n     */\n    let n = this._start\n    while (n !== null) {\n      if (!n.deleted && n.countable && n.content.constructor === ContentString) {\n        str += /** @type {ContentString} */ (n.content).str\n      }\n      n = n.right\n    }\n    return str\n  }\n\n  /**\n   * Returns the unformatted string representation of this YText type.\n   *\n   * @return {string}\n   * @public\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Apply a {@link Delta} on this shared YText type.\n   *\n   * @param {any} delta The changes to apply on this element.\n   * @param {object}  [opts]\n   * @param {boolean} [opts.sanitize] Sanitize input delta. Removes ending newlines if set to true.\n   *\n   *\n   * @public\n   */\n  applyDelta (delta, { sanitize = true } = {}) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        /**\n         * @type {ItemListPosition}\n         */\n        const currPos = new ItemListPosition(null, this._start)\n        const currentAttributes = new Map()\n        for (let i = 0; i < delta.length; i++) {\n          const op = delta[i]\n          if (op.insert !== undefined) {\n            // Quill assumes that the content starts with an empty paragraph.\n            // Yjs/Y.Text assumes that it starts empty. We always hide that\n            // there is a newline at the end of the content.\n            // If we omit this step, clients will see a different number of\n            // paragraphs, but nothing bad will happen.\n            const ins = (!sanitize && typeof op.insert === 'string' && i === delta.length - 1 && currPos.right === null && op.insert.slice(-1) === '\\n') ? op.insert.slice(0, -1) : op.insert\n            if (typeof ins !== 'string' || ins.length > 0) {\n              insertText(transaction, this, currPos, currentAttributes, ins, op.attributes || {})\n            }\n          } else if (op.retain !== undefined) {\n            formatText(transaction, this, currPos, currentAttributes, op.retain, op.attributes || {})\n          } else if (op.delete !== undefined) {\n            deleteText(transaction, currPos, currentAttributes, op.delete)\n          }\n        }\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.applyDelta(delta))\n    }\n  }\n\n  /**\n   * Returns the Delta representation of this YText type.\n   *\n   * @param {Snapshot} [snapshot]\n   * @param {Snapshot} [prevSnapshot]\n   * @param {function('removed' | 'added', ID):any} [computeYChange]\n   * @return {any} The Delta representation of this type.\n   *\n   * @public\n   */\n  toDelta (snapshot, prevSnapshot, computeYChange) {\n    /**\n     * @type{Array<any>}\n     */\n    const ops = []\n    const currentAttributes = new Map()\n    const doc = /** @type {Doc} */ (this.doc)\n    let str = ''\n    let n = this._start\n    function packStr () {\n      if (str.length > 0) {\n        // pack str with attributes to ops\n        /**\n         * @type {Object<string,any>}\n         */\n        const attributes = {}\n        let addAttributes = false\n        for (const [key, value] of currentAttributes) {\n          addAttributes = true\n          attributes[key] = value\n        }\n        /**\n         * @type {Object<string,any>}\n         */\n        const op = { insert: str }\n        if (addAttributes) {\n          op.attributes = attributes\n        }\n        ops.push(op)\n        str = ''\n      }\n    }\n    // snapshots are merged again after the transaction, so we need to keep the\n    // transalive until we are done\n    transact(doc, transaction => {\n      if (snapshot) {\n        splitSnapshotAffectedStructs(transaction, snapshot)\n      }\n      if (prevSnapshot) {\n        splitSnapshotAffectedStructs(transaction, prevSnapshot)\n      }\n      while (n !== null) {\n        if (isVisible(n, snapshot) || (prevSnapshot !== undefined && isVisible(n, prevSnapshot))) {\n          switch (n.content.constructor) {\n            case ContentString: {\n              const cur = currentAttributes.get('ychange')\n              if (snapshot !== undefined && !isVisible(n, snapshot)) {\n                if (cur === undefined || cur.user !== n.id.client || cur.state !== 'removed') {\n                  packStr()\n                  currentAttributes.set('ychange', computeYChange ? computeYChange('removed', n.id) : { type: 'removed' })\n                }\n              } else if (prevSnapshot !== undefined && !isVisible(n, prevSnapshot)) {\n                if (cur === undefined || cur.user !== n.id.client || cur.state !== 'added') {\n                  packStr()\n                  currentAttributes.set('ychange', computeYChange ? computeYChange('added', n.id) : { type: 'added' })\n                }\n              } else if (cur !== undefined) {\n                packStr()\n                currentAttributes.delete('ychange')\n              }\n              str += /** @type {ContentString} */ (n.content).str\n              break\n            }\n            case ContentEmbed: {\n              packStr()\n              /**\n               * @type {Object<string,any>}\n               */\n              const op = {\n                insert: /** @type {ContentEmbed} */ (n.content).embed\n              }\n              if (currentAttributes.size > 0) {\n                const attrs = /** @type {Object<string,any>} */ ({})\n                op.attributes = attrs\n                for (const [key, value] of currentAttributes) {\n                  attrs[key] = value\n                }\n              }\n              ops.push(op)\n              break\n            }\n            case ContentFormat:\n              if (isVisible(n, snapshot)) {\n                packStr()\n                updateCurrentAttributes(currentAttributes, /** @type {ContentFormat} */ (n.content))\n              }\n              break\n          }\n        }\n        n = n.right\n      }\n      packStr()\n    }, splitSnapshotAffectedStructs)\n    return ops\n  }\n\n  /**\n   * Insert text at a given index.\n   *\n   * @param {number} index The index at which to start inserting.\n   * @param {String} text The text to insert at the specified position.\n   * @param {TextAttributes} [attributes] Optionally define some formatting\n   *                                    information to apply on the inserted\n   *                                    Text.\n   * @public\n   */\n  insert (index, text, attributes) {\n    if (text.length <= 0) {\n      return\n    }\n    const y = this.doc\n    if (y !== null) {\n      transact(y, transaction => {\n        const { left, right, currentAttributes } = findPosition(transaction, this, index)\n        if (!attributes) {\n          attributes = {}\n          // @ts-ignore\n          currentAttributes.forEach((v, k) => { attributes[k] = v })\n        }\n        insertText(transaction, this, new ItemListPosition(left, right), currentAttributes, text, attributes)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.insert(index, text, attributes))\n    }\n  }\n\n  /**\n   * Inserts an embed at a index.\n   *\n   * @param {number} index The index to insert the embed at.\n   * @param {Object} embed The Object that represents the embed.\n   * @param {TextAttributes} attributes Attribute information to apply on the\n   *                                    embed\n   *\n   * @public\n   */\n  insertEmbed (index, embed, attributes = {}) {\n    if (embed.constructor !== Object) {\n      throw new Error('Embed must be an Object')\n    }\n    const y = this.doc\n    if (y !== null) {\n      transact(y, transaction => {\n        const { left, right, currentAttributes } = findPosition(transaction, this, index)\n        insertText(transaction, this, new ItemListPosition(left, right), currentAttributes, embed, attributes)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.insertEmbed(index, embed, attributes))\n    }\n  }\n\n  /**\n   * Deletes text starting from an index.\n   *\n   * @param {number} index Index at which to start deleting.\n   * @param {number} length The number of characters to remove. Defaults to 1.\n   *\n   * @public\n   */\n  delete (index, length) {\n    if (length === 0) {\n      return\n    }\n    const y = this.doc\n    if (y !== null) {\n      transact(y, transaction => {\n        const { left, right, currentAttributes } = findPosition(transaction, this, index)\n        deleteText(transaction, new ItemListPosition(left, right), currentAttributes, length)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.delete(index, length))\n    }\n  }\n\n  /**\n   * Assigns properties to a range of text.\n   *\n   * @param {number} index The position where to start formatting.\n   * @param {number} length The amount of characters to assign properties to.\n   * @param {TextAttributes} attributes Attribute information to apply on the\n   *                                    text.\n   *\n   * @public\n   */\n  format (index, length, attributes) {\n    if (length === 0) {\n      return\n    }\n    const y = this.doc\n    if (y !== null) {\n      transact(y, transaction => {\n        const { left, right, currentAttributes } = findPosition(transaction, this, index)\n        if (right === null) {\n          return\n        }\n        formatText(transaction, this, new ItemListPosition(left, right), currentAttributes, length, attributes)\n      })\n    } else {\n      /** @type {Array<function>} */ (this._pending).push(() => this.format(index, length, attributes))\n    }\n  }\n\n  /**\n   * @param {encoding.Encoder} encoder\n   */\n  _write (encoder) {\n    encoding.writeVarUint(encoder, YTextRefID)\n  }\n}\n\n/**\n * @param {decoding.Decoder} decoder\n * @return {YText}\n *\n * @private\n * @function\n */\nexport const readYText = decoder => new YText()\n","/**\n * @module YXml\n */\n\nimport {\n  YXmlEvent,\n  YXmlElement,\n  AbstractType,\n  typeListMap,\n  typeListForEach,\n  typeListInsertGenerics,\n  typeListDelete,\n  typeListToArray,\n  YXmlFragmentRefID,\n  callTypeObservers,\n  transact,\n  Doc, ContentType, Transaction, Item, YXmlText, YXmlHook, Snapshot // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js' // eslint-disable-line\n\n/**\n * Define the elements to which a set of CSS queries apply.\n * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}\n *\n * @example\n *   query = '.classSelector'\n *   query = 'nodeSelector'\n *   query = '#idSelector'\n *\n * @typedef {string} CSS_Selector\n */\n\n/**\n * Dom filter function.\n *\n * @callback domFilter\n * @param {string} nodeName The nodeName of the element\n * @param {Map} attributes The map of attributes.\n * @return {boolean} Whether to include the Dom node in the YXmlElement.\n */\n\n/**\n * Represents a subset of the nodes of a YXmlElement / YXmlFragment and a\n * position within them.\n *\n * Can be created with {@link YXmlFragment#createTreeWalker}\n *\n * @public\n * @implements {Iterable<YXmlElement|YXmlText|YXmlElement|YXmlHook>}\n */\nexport class YXmlTreeWalker {\n  /**\n   * @param {YXmlFragment | YXmlElement} root\n   * @param {function(AbstractType<any>):boolean} [f]\n   */\n  constructor (root, f = () => true) {\n    this._filter = f\n    this._root = root\n    /**\n     * @type {Item}\n     */\n    this._currentNode = /** @type {Item} */ (root._start)\n    this._firstCall = true\n  }\n\n  [Symbol.iterator] () {\n    return this\n  }\n\n  /**\n   * Get the next node.\n   *\n   * @return {IteratorResult<YXmlElement|YXmlText|YXmlHook>} The next node.\n   *\n   * @public\n   */\n  next () {\n    /**\n     * @type {Item|null}\n     */\n    let n = this._currentNode\n    let type = /** @type {any} */ (n.content).type\n    if (n !== null && (!this._firstCall || n.deleted || !this._filter(type))) { // if first call, we check if we can use the first item\n      do {\n        type = /** @type {any} */ (n.content).type\n        if (!n.deleted && (type.constructor === YXmlElement || type.constructor === YXmlFragment) && type._start !== null) {\n          // walk down in the tree\n          n = type._start\n        } else {\n          // walk right or up in the tree\n          while (n !== null) {\n            if (n.right !== null) {\n              n = n.right\n              break\n            } else if (n.parent === this._root) {\n              n = null\n            } else {\n              n = /** @type {AbstractType<any>} */ (n.parent)._item\n            }\n          }\n        }\n      } while (n !== null && (n.deleted || !this._filter(/** @type {ContentType} */ (n.content).type)))\n    }\n    this._firstCall = false\n    if (n === null) {\n      // @ts-ignore\n      return { value: undefined, done: true }\n    }\n    this._currentNode = n\n    return { value: /** @type {any} */ (n.content).type, done: false }\n  }\n}\n\n/**\n * Represents a list of {@link YXmlElement}.and {@link YXmlText} types.\n * A YxmlFragment is similar to a {@link YXmlElement}, but it does not have a\n * nodeName and it does not have attributes. Though it can be bound to a DOM\n * element - in this case the attributes and the nodeName are not shared.\n *\n * @public\n * @extends AbstractType<YXmlEvent>\n */\nexport class YXmlFragment extends AbstractType {\n  constructor () {\n    super()\n    /**\n     * @type {Array<any>|null}\n     */\n    this._prelimContent = []\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    this.insert(0, /** @type {Array<any>} */ (this._prelimContent))\n    this._prelimContent = null\n  }\n\n  _copy () {\n    return new YXmlFragment()\n  }\n\n  get length () {\n    return this._prelimContent === null ? this._length : this._prelimContent.length\n  }\n\n  /**\n   * Create a subtree of childNodes.\n   *\n   * @example\n   * const walker = elem.createTreeWalker(dom => dom.nodeName === 'div')\n   * for (let node in walker) {\n   *   // `node` is a div node\n   *   nop(node)\n   * }\n   *\n   * @param {function(AbstractType<any>):boolean} filter Function that is called on each child element and\n   *                          returns a Boolean indicating whether the child\n   *                          is to be included in the subtree.\n   * @return {YXmlTreeWalker} A subtree and a position within it.\n   *\n   * @public\n   */\n  createTreeWalker (filter) {\n    return new YXmlTreeWalker(this, filter)\n  }\n\n  /**\n   * Returns the first YXmlElement that matches the query.\n   * Similar to DOM's {@link querySelector}.\n   *\n   * Query support:\n   *   - tagname\n   * TODO:\n   *   - id\n   *   - attribute\n   *\n   * @param {CSS_Selector} query The query on the children.\n   * @return {YXmlElement|YXmlText|YXmlHook|null} The first element that matches the query or null.\n   *\n   * @public\n   */\n  querySelector (query) {\n    query = query.toUpperCase()\n    // @ts-ignore\n    const iterator = new YXmlTreeWalker(this, element => element.nodeName && element.nodeName.toUpperCase() === query)\n    const next = iterator.next()\n    if (next.done) {\n      return null\n    } else {\n      return next.value\n    }\n  }\n\n  /**\n   * Returns all YXmlElements that match the query.\n   * Similar to Dom's {@link querySelectorAll}.\n   *\n   * @todo Does not yet support all queries. Currently only query by tagName.\n   *\n   * @param {CSS_Selector} query The query on the children\n   * @return {Array<YXmlElement|YXmlText|YXmlHook|null>} The elements that match this query.\n   *\n   * @public\n   */\n  querySelectorAll (query) {\n    query = query.toUpperCase()\n    // @ts-ignore\n    return Array.from(new YXmlTreeWalker(this, element => element.nodeName && element.nodeName.toUpperCase() === query))\n  }\n\n  /**\n   * Creates YXmlEvent and calls observers.\n   *\n   * @param {Transaction} transaction\n   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.\n   */\n  _callObserver (transaction, parentSubs) {\n    callTypeObservers(this, transaction, new YXmlEvent(this, parentSubs, transaction))\n  }\n\n  /**\n   * Get the string representation of all the children of this YXmlFragment.\n   *\n   * @return {string} The string representation of all children.\n   */\n  toString () {\n    return typeListMap(this, xml => xml.toString()).join('')\n  }\n\n  /**\n   * @return {string}\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const fragment = _document.createDocumentFragment()\n    if (binding !== undefined) {\n      binding._createAssociation(fragment, this)\n    }\n    typeListForEach(this, xmlType => {\n      fragment.insertBefore(xmlType.toDOM(_document, hooks, binding), null)\n    })\n    return fragment\n  }\n\n  /**\n   * Inserts new content at an index.\n   *\n   * @example\n   *  // Insert character 'a' at position 0\n   *  xml.insert(0, [new Y.XmlText('text')])\n   *\n   * @param {number} index The index to insert content at\n   * @param {Array<YXmlElement|YXmlText>} content The array of content\n   */\n  insert (index, content) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListInsertGenerics(transaction, this, index, content)\n      })\n    } else {\n      // @ts-ignore _prelimContent is defined because this is not yet integrated\n      this._prelimContent.splice(index, 0, ...content)\n    }\n  }\n\n  /**\n   * Deletes elements starting from an index.\n   *\n   * @param {number} index Index at which to start deleting elements\n   * @param {number} [length=1] The number of elements to remove. Defaults to 1.\n   */\n  delete (index, length = 1) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeListDelete(transaction, this, index, length)\n      })\n    } else {\n      // @ts-ignore _prelimContent is defined because this is not yet integrated\n      this._prelimContent.splice(index, length)\n    }\n  }\n\n  /**\n   * Transforms this YArray to a JavaScript Array.\n   *\n   * @return {Array<YXmlElement|YXmlText|YXmlHook>}\n   */\n  toArray () {\n    return typeListToArray(this)\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {encoding.Encoder} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoding.writeVarUint(encoder, YXmlFragmentRefID)\n  }\n}\n\n/**\n * @param {decoding.Decoder} decoder\n * @return {YXmlFragment}\n *\n * @private\n * @function\n */\nexport const readYXmlFragment = decoder => new YXmlFragment()\n","\nimport {\n  YXmlFragment,\n  transact,\n  typeMapDelete,\n  typeMapSet,\n  typeMapGet,\n  typeMapGetAll,\n  typeListForEach,\n  YXmlElementRefID,\n  Snapshot, Doc, Item // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\n\n/**\n * An YXmlElement imitates the behavior of a\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}.\n *\n * * An YXmlElement has attributes (key value pairs)\n * * An YXmlElement has childElements that must inherit from YXmlElement\n */\nexport class YXmlElement extends YXmlFragment {\n  constructor (nodeName = 'UNDEFINED') {\n    super()\n    this.nodeName = nodeName\n    /**\n     * @type {Map<string, any>|null}\n     */\n    this._prelimAttrs = new Map()\n  }\n\n  /**\n   * Integrate this type into the Yjs instance.\n   *\n   * * Save this struct in the os\n   * * This type is sent to other client\n   * * Observer functions are fired\n   *\n   * @param {Doc} y The Yjs instance\n   * @param {Item} item\n   */\n  _integrate (y, item) {\n    super._integrate(y, item)\n    ;(/** @type {Map<string, any>} */ (this._prelimAttrs)).forEach((value, key) => {\n      this.setAttribute(key, value)\n    })\n    this._prelimAttrs = null\n  }\n\n  /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   *\n   * @return {YXmlElement}\n   */\n  _copy () {\n    return new YXmlElement(this.nodeName)\n  }\n\n  /**\n   * Returns the XML serialization of this YXmlElement.\n   * The attributes are ordered by attribute-name, so you can easily use this\n   * method to compare YXmlElements\n   *\n   * @return {string} The string representation of this type.\n   *\n   * @public\n   */\n  toString () {\n    const attrs = this.getAttributes()\n    const stringBuilder = []\n    const keys = []\n    for (const key in attrs) {\n      keys.push(key)\n    }\n    keys.sort()\n    const keysLen = keys.length\n    for (let i = 0; i < keysLen; i++) {\n      const key = keys[i]\n      stringBuilder.push(key + '=\"' + attrs[key] + '\"')\n    }\n    const nodeName = this.nodeName.toLocaleLowerCase()\n    const attrsString = stringBuilder.length > 0 ? ' ' + stringBuilder.join(' ') : ''\n    return `<${nodeName}${attrsString}>${super.toString()}</${nodeName}>`\n  }\n\n  /**\n   * Removes an attribute from this YXmlElement.\n   *\n   * @param {String} attributeName The attribute name that is to be removed.\n   *\n   * @public\n   */\n  removeAttribute (attributeName) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapDelete(transaction, this, attributeName)\n      })\n    } else {\n      /** @type {Map<string,any>} */ (this._prelimAttrs).delete(attributeName)\n    }\n  }\n\n  /**\n   * Sets or updates an attribute.\n   *\n   * @param {String} attributeName The attribute name that is to be set.\n   * @param {String} attributeValue The attribute value that is to be set.\n   *\n   * @public\n   */\n  setAttribute (attributeName, attributeValue) {\n    if (this.doc !== null) {\n      transact(this.doc, transaction => {\n        typeMapSet(transaction, this, attributeName, attributeValue)\n      })\n    } else {\n      /** @type {Map<string, any>} */ (this._prelimAttrs).set(attributeName, attributeValue)\n    }\n  }\n\n  /**\n   * Returns an attribute value that belongs to the attribute name.\n   *\n   * @param {String} attributeName The attribute name that identifies the\n   *                               queried value.\n   * @return {String} The queried attribute value.\n   *\n   * @public\n   */\n  getAttribute (attributeName) {\n    return /** @type {any} */ (typeMapGet(this, attributeName))\n  }\n\n  /**\n   * Returns all attribute name/value pairs in a JSON Object.\n   *\n   * @param {Snapshot} [snapshot]\n   * @return {Object<string, any>} A JSON Object that describes the attributes.\n   *\n   * @public\n   */\n  getAttributes (snapshot) {\n    return typeMapGetAll(this)\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const dom = _document.createElement(this.nodeName)\n    const attrs = this.getAttributes()\n    for (const key in attrs) {\n      dom.setAttribute(key, attrs[key])\n    }\n    typeListForEach(this, yxml => {\n      dom.appendChild(yxml.toDOM(_document, hooks, binding))\n    })\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this)\n    }\n    return dom\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {encoding.Encoder} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    encoding.writeVarUint(encoder, YXmlElementRefID)\n    encoding.writeVarString(encoder, this.nodeName)\n  }\n}\n\n/**\n * @param {decoding.Decoder} decoder\n * @return {YXmlElement}\n *\n * @function\n */\nexport const readYXmlElement = decoder => new YXmlElement(decoding.readVarString(decoder))\n","\nimport {\n  YEvent,\n  YXmlElement, YXmlFragment, Transaction // eslint-disable-line\n} from '../internals.js'\n\n/**\n * An Event that describes changes on a YXml Element or Yxml Fragment\n */\nexport class YXmlEvent extends YEvent {\n  /**\n   * @param {YXmlElement|YXmlFragment} target The target on which the event is created.\n   * @param {Set<string|null>} subs The set of changed attributes. `null` is included if the\n   *                   child list changed.\n   * @param {Transaction} transaction The transaction instance with wich the\n   *                                  change was created.\n   */\n  constructor (target, subs, transaction) {\n    super(target, transaction)\n    /**\n     * Whether the children changed.\n     * @type {Boolean}\n     * @private\n     */\n    this.childListChanged = false\n    /**\n     * Set of all changed attributes.\n     * @type {Set<string|null>}\n     */\n    this.attributesChanged = new Set()\n    subs.forEach((sub) => {\n      if (sub === null) {\n        this.childListChanged = true\n      } else {\n        this.attributesChanged.add(sub)\n      }\n    })\n  }\n}\n","\nimport {\n  YMap,\n  YXmlHookRefID\n} from '../internals.js'\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\n\n/**\n * You can manage binding to a custom type with YXmlHook.\n *\n * @extends {YMap<any>}\n */\nexport class YXmlHook extends YMap {\n  /**\n   * @param {string} hookName nodeName of the Dom Node.\n   */\n  constructor (hookName) {\n    super()\n    /**\n     * @type {string}\n     */\n    this.hookName = hookName\n  }\n\n  /**\n   * Creates an Item with the same effect as this Item (without position effect)\n   */\n  _copy () {\n    return new YXmlHook(this.hookName)\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlElement.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object.<string, any>} [hooks] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type\n   * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks = {}, binding) {\n    const hook = hooks[this.hookName]\n    let dom\n    if (hook !== undefined) {\n      dom = hook.createDom(this)\n    } else {\n      dom = document.createElement(this.hookName)\n    }\n    dom.setAttribute('data-yjs-hook', this.hookName)\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this)\n    }\n    return dom\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {encoding.Encoder} encoder The encoder to write data to.\n   */\n  _write (encoder) {\n    super._write(encoder)\n    encoding.writeVarUint(encoder, YXmlHookRefID)\n    encoding.writeVarString(encoder, this.hookName)\n  }\n}\n\n/**\n * @param {decoding.Decoder} decoder\n * @return {YXmlHook}\n *\n * @private\n * @function\n */\nexport const readYXmlHook = decoder =>\n  new YXmlHook(decoding.readVarString(decoder))\n","\nimport { YText, YXmlTextRefID } from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js' // eslint-disable-line\n\n/**\n * Represents text in a Dom Element. In the future this type will also handle\n * simple formatting information like bold and italic.\n */\nexport class YXmlText extends YText {\n  _copy () {\n    return new YXmlText()\n  }\n\n  /**\n   * Creates a Dom Element that mirrors this YXmlText.\n   *\n   * @param {Document} [_document=document] The document object (you must define\n   *                                        this when calling this method in\n   *                                        nodejs)\n   * @param {Object<string, any>} [hooks] Optional property to customize how hooks\n   *                                             are presented in the DOM\n   * @param {any} [binding] You should not set this property. This is\n   *                               used if DomBinding wants to create a\n   *                               association to the created DOM type.\n   * @return {Text} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}\n   *\n   * @public\n   */\n  toDOM (_document = document, hooks, binding) {\n    const dom = _document.createTextNode(this.toString())\n    if (binding !== undefined) {\n      binding._createAssociation(dom, this)\n    }\n    return dom\n  }\n\n  toString () {\n    // @ts-ignore\n    return this.toDelta().map(delta => {\n      const nestedNodes = []\n      for (const nodeName in delta.attributes) {\n        const attrs = []\n        for (const key in delta.attributes[nodeName]) {\n          attrs.push({ key, value: delta.attributes[nodeName][key] })\n        }\n        // sort attributes to get a unique order\n        attrs.sort((a, b) => a.key < b.key ? -1 : 1)\n        nestedNodes.push({ nodeName, attrs })\n      }\n      // sort node order to get a unique order\n      nestedNodes.sort((a, b) => a.nodeName < b.nodeName ? -1 : 1)\n      // now convert to dom string\n      let str = ''\n      for (let i = 0; i < nestedNodes.length; i++) {\n        const node = nestedNodes[i]\n        str += `<${node.nodeName}`\n        for (let j = 0; j < node.attrs.length; j++) {\n          const attr = node.attrs[j]\n          str += ` ${attr.key}=\"${attr.value}\"`\n        }\n        str += '>'\n      }\n      str += delta.insert\n      for (let i = nestedNodes.length - 1; i >= 0; i--) {\n        str += `</${nestedNodes[i].nodeName}>`\n      }\n      return str\n    }).join('')\n  }\n\n  /**\n   * @return {string}\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * @param {encoding.Encoder} encoder\n   */\n  _write (encoder) {\n    encoding.writeVarUint(encoder, YXmlTextRefID)\n  }\n}\n\n/**\n * @param {decoding.Decoder} decoder\n * @return {YXmlText}\n *\n * @private\n * @function\n */\nexport const readYXmlText = decoder => new YXmlText()\n","\nimport {\n  StructStore, ID, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js' // eslint-disable-line\nimport * as error from 'lib0/error.js'\n\nexport class AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {number} length\n   */\n  constructor (id, length) {\n    this.id = id\n    this.length = length\n    this.deleted = false\n  }\n\n  /**\n   * Merge this struct with the item to the right.\n   * This method is already assuming that `this.id.clock + this.length === this.id.clock`.\n   * Also this method does *not* remove right from StructStore!\n   * @param {AbstractStruct} right\n   * @return {boolean} wether this merged with right\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {encoding.Encoder} encoder The encoder to write data to.\n   * @param {number} offset\n   * @param {number} encodingRef\n   */\n  write (encoder, offset, encodingRef) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    throw error.methodUnimplemented()\n  }\n}\n","\nimport {\n  AbstractStruct,\n  addStruct,\n  StructStore, Transaction, ID // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js'\n\nexport const structGCRefNumber = 0\n\n/**\n * @private\n */\nexport class GC extends AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {number} length\n   */\n  constructor (id, length) {\n    super(id, length)\n    this.deleted = true\n  }\n\n  delete () {}\n\n  /**\n   * @param {GC} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.length += right.length\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    if (offset > 0) {\n      this.id.clock += offset\n      this.length -= offset\n    }\n    addStruct(transaction.doc.store, this)\n  }\n\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoding.writeUint8(encoder, structGCRefNumber)\n    encoding.writeVarUint(encoder, this.length - offset)\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | ID}\n   */\n  getMissing (transaction, store) {\n    return null\n  }\n}\n","import {\n  StructStore, Item, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\nimport * as buffer from 'lib0/buffer.js'\nimport * as error from 'lib0/error.js'\n\nexport class ContentBinary {\n  /**\n   * @param {Uint8Array} content\n   */\n  constructor (content) {\n    this.content = content\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.content]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentBinary}\n   */\n  copy () {\n    return new ContentBinary(this.content)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentBinary}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentBinary} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoding.writeVarUint8Array(encoder, this.content)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 3\n  }\n}\n\n/**\n * @param {decoding.Decoder} decoder\n * @return {ContentBinary}\n */\nexport const readContentBinary = decoder => new ContentBinary(buffer.copyUint8Array(decoding.readVarUint8Array(decoder)))\n","\nimport {\n  addToDeleteSet,\n  StructStore, Item, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\n\nexport class ContentDeleted {\n  /**\n   * @param {number} len\n   */\n  constructor (len) {\n    this.len = len\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.len\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return []\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return false\n  }\n\n  /**\n   * @return {ContentDeleted}\n   */\n  copy () {\n    return new ContentDeleted(this.len)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentDeleted}\n   */\n  splice (offset) {\n    const right = new ContentDeleted(this.len - offset)\n    this.len = offset\n    return right\n  }\n\n  /**\n   * @param {ContentDeleted} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.len += right.len\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    addToDeleteSet(transaction.deleteSet, item.id, this.len)\n    item.deleted = true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoding.writeVarUint(encoder, this.len - offset)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 1\n  }\n}\n\n/**\n * @private\n *\n * @param {decoding.Decoder} decoder\n * @return {ContentDeleted}\n */\nexport const readContentDeleted = decoder => new ContentDeleted(decoding.readVarUint(decoder))\n","\nimport {\n  StructStore, Item, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\nimport * as error from 'lib0/error.js'\n\n/**\n * @private\n */\nexport class ContentEmbed {\n  /**\n   * @param {Object} embed\n   */\n  constructor (embed) {\n    this.embed = embed\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.embed]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentEmbed}\n   */\n  copy () {\n    return new ContentEmbed(this.embed)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentEmbed}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentEmbed} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoding.writeVarString(encoder, JSON.stringify(this.embed))\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 5\n  }\n}\n\n/**\n * @private\n *\n * @param {decoding.Decoder} decoder\n * @return {ContentEmbed}\n */\nexport const readContentEmbed = decoder => new ContentEmbed(JSON.parse(decoding.readVarString(decoder)))\n","\nimport {\n  Item, StructStore, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\nimport * as error from 'lib0/error.js'\n\n/**\n * @private\n */\nexport class ContentFormat {\n  /**\n   * @param {string} key\n   * @param {Object} value\n   */\n  constructor (key, value) {\n    this.key = key\n    this.value = value\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return []\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return false\n  }\n\n  /**\n   * @return {ContentFormat}\n   */\n  copy () {\n    return new ContentFormat(this.key, this.value)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentFormat}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentFormat} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoding.writeVarString(encoder, this.key)\n    encoding.writeVarString(encoder, JSON.stringify(this.value))\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 6\n  }\n}\n\n/**\n * @param {decoding.Decoder} decoder\n * @return {ContentFormat}\n */\nexport const readContentFormat = decoder => new ContentFormat(decoding.readVarString(decoder), JSON.parse(decoding.readVarString(decoder)))\n","import {\n  Transaction, Item, StructStore // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\n\n/**\n * @private\n */\nexport class ContentJSON {\n  /**\n   * @param {Array<any>} arr\n   */\n  constructor (arr) {\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.arr.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.arr\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentJSON}\n   */\n  copy () {\n    return new ContentJSON(this.arr)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentJSON}\n   */\n  splice (offset) {\n    const right = new ContentJSON(this.arr.slice(offset))\n    this.arr = this.arr.slice(0, offset)\n    return right\n  }\n\n  /**\n   * @param {ContentJSON} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.arr = this.arr.concat(right.arr)\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const len = this.arr.length\n    encoding.writeVarUint(encoder, len - offset)\n    for (let i = offset; i < len; i++) {\n      const c = this.arr[i]\n      encoding.writeVarString(encoder, c === undefined ? 'undefined' : JSON.stringify(c))\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 2\n  }\n}\n\n/**\n * @private\n *\n * @param {decoding.Decoder} decoder\n * @return {ContentJSON}\n */\nexport const readContentJSON = decoder => {\n  const len = decoding.readVarUint(decoder)\n  const cs = []\n  for (let i = 0; i < len; i++) {\n    const c = decoding.readVarString(decoder)\n    if (c === 'undefined') {\n      cs.push(undefined)\n    } else {\n      cs.push(JSON.parse(c))\n    }\n  }\n  return new ContentJSON(cs)\n}\n","import {\n  Transaction, Item, StructStore // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\n\nexport class ContentAny {\n  /**\n   * @param {Array<any>} arr\n   */\n  constructor (arr) {\n    /**\n     * @type {Array<any>}\n     */\n    this.arr = arr\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.arr.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.arr\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentAny}\n   */\n  copy () {\n    return new ContentAny(this.arr)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentAny}\n   */\n  splice (offset) {\n    const right = new ContentAny(this.arr.slice(offset))\n    this.arr = this.arr.slice(0, offset)\n    return right\n  }\n\n  /**\n   * @param {ContentAny} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.arr = this.arr.concat(right.arr)\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const len = this.arr.length\n    encoding.writeVarUint(encoder, len - offset)\n    for (let i = offset; i < len; i++) {\n      const c = this.arr[i]\n      encoding.writeAny(encoder, c)\n    }\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 8\n  }\n}\n\n/**\n * @param {decoding.Decoder} decoder\n * @return {ContentAny}\n */\nexport const readContentAny = decoder => {\n  const len = decoding.readVarUint(decoder)\n  const cs = []\n  for (let i = 0; i < len; i++) {\n    cs.push(decoding.readAny(decoder))\n  }\n  return new ContentAny(cs)\n}\n","import {\n  Transaction, Item, StructStore // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\n\n/**\n * @private\n */\nexport class ContentString {\n  /**\n   * @param {string} str\n   */\n  constructor (str) {\n    /**\n     * @type {string}\n     */\n    this.str = str\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return this.str.length\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return this.str.split('')\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentString}\n   */\n  copy () {\n    return new ContentString(this.str)\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentString}\n   */\n  splice (offset) {\n    const right = new ContentString(this.str.slice(offset))\n    this.str = this.str.slice(0, offset)\n    return right\n  }\n\n  /**\n   * @param {ContentString} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    this.str += right.str\n    return true\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {}\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {}\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {}\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    encoding.writeVarString(encoder, offset === 0 ? this.str : this.str.slice(offset))\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 4\n  }\n}\n\n/**\n * @private\n *\n * @param {decoding.Decoder} decoder\n * @return {ContentString}\n */\nexport const readContentString = decoder => new ContentString(decoding.readVarString(decoder))\n","\nimport {\n  readYArray,\n  readYMap,\n  readYText,\n  readYXmlElement,\n  readYXmlFragment,\n  readYXmlHook,\n  readYXmlText,\n  ID, StructStore, Transaction, Item, YEvent, AbstractType // eslint-disable-line\n} from '../internals.js'\n\nimport * as encoding from 'lib0/encoding.js' // eslint-disable-line\nimport * as decoding from 'lib0/decoding.js'\nimport * as error from 'lib0/error.js'\n\n/**\n * @type {Array<function(decoding.Decoder):AbstractType<any>>}\n * @private\n */\nexport const typeRefs = [\n  readYArray,\n  readYMap,\n  readYText,\n  readYXmlElement,\n  readYXmlFragment,\n  readYXmlHook,\n  readYXmlText\n]\n\nexport const YArrayRefID = 0\nexport const YMapRefID = 1\nexport const YTextRefID = 2\nexport const YXmlElementRefID = 3\nexport const YXmlFragmentRefID = 4\nexport const YXmlHookRefID = 5\nexport const YXmlTextRefID = 6\n\n/**\n * @private\n */\nexport class ContentType {\n  /**\n   * @param {AbstractType<YEvent>} type\n   */\n  constructor (type) {\n    /**\n     * @type {AbstractType<any>}\n     */\n    this.type = type\n  }\n\n  /**\n   * @return {number}\n   */\n  getLength () {\n    return 1\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    return [this.type]\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isCountable () {\n    return true\n  }\n\n  /**\n   * @return {ContentType}\n   */\n  copy () {\n    return new ContentType(this.type._copy())\n  }\n\n  /**\n   * @param {number} offset\n   * @return {ContentType}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {ContentType} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    return false\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    this.type._integrate(transaction.doc, item)\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    let item = this.type._start\n    while (item !== null) {\n      if (!item.deleted) {\n        item.delete(transaction)\n      } else {\n        // Whis will be gc'd later and we want to merge it if possible\n        // We try to merge all deleted items after each transaction,\n        // but we have no knowledge about that this needs to be merged\n        // since it is not in transaction.ds. Hence we add it to transaction._mergeStructs\n        transaction._mergeStructs.push(item)\n      }\n      item = item.right\n    }\n    this.type._map.forEach(item => {\n      if (!item.deleted) {\n        item.delete(transaction)\n      } else {\n        // same as above\n        transaction._mergeStructs.push(item)\n      }\n    })\n    transaction.changed.delete(this.type)\n  }\n\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {\n    let item = this.type._start\n    while (item !== null) {\n      item.gc(store, true)\n      item = item.right\n    }\n    this.type._start = null\n    this.type._map.forEach(/** @param {Item | null} item */ (item) => {\n      while (item !== null) {\n        item.gc(store, true)\n        item = item.left\n      }\n    })\n    this.type._map = new Map()\n  }\n\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    this.type._write(encoder)\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    return 7\n  }\n}\n\n/**\n * @private\n *\n * @param {decoding.Decoder} decoder\n * @return {ContentType}\n */\nexport const readContentType = decoder => new ContentType(typeRefs[decoding.readVarUint(decoder)](decoder))\n","\nimport {\n  readID,\n  writeID,\n  GC,\n  getState,\n  AbstractStruct,\n  replaceStruct,\n  addStruct,\n  addToDeleteSet,\n  findRootTypeKey,\n  compareIDs,\n  getItem,\n  getItemCleanEnd,\n  getItemCleanStart,\n  readContentDeleted,\n  readContentBinary,\n  readContentJSON,\n  readContentAny,\n  readContentString,\n  readContentEmbed,\n  createID,\n  readContentFormat,\n  readContentType,\n  addChangedTypeToTransaction,\n  Doc, ContentType, ContentDeleted, StructStore, ID, AbstractType, Transaction // eslint-disable-line\n} from '../internals.js'\n\nimport * as error from 'lib0/error.js'\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\nimport * as maplib from 'lib0/map.js'\nimport * as set from 'lib0/set.js'\nimport * as binary from 'lib0/binary.js'\n\n/**\n * @todo This should return several items\n *\n * @param {StructStore} store\n * @param {ID} id\n * @return {{item:Item, diff:number}}\n */\nexport const followRedone = (store, id) => {\n  /**\n   * @type {ID|null}\n   */\n  let nextID = id\n  let diff = 0\n  let item\n  do {\n    if (diff > 0) {\n      nextID = createID(nextID.client, nextID.clock + diff)\n    }\n    item = getItem(store, nextID)\n    diff = nextID.clock - item.id.clock\n    nextID = item.redone\n  } while (nextID !== null && item instanceof Item)\n  return {\n    item, diff\n  }\n}\n\n/**\n * Make sure that neither item nor any of its parents is ever deleted.\n *\n * This property does not persist when storing it into a database or when\n * sending it to other peers\n *\n * @param {Item|null} item\n * @param {boolean} keep\n */\nexport const keepItem = (item, keep) => {\n  while (item !== null && item.keep !== keep) {\n    item.keep = keep\n    item = /** @type {AbstractType<any>} */ (item.parent)._item\n  }\n}\n\n/**\n * Split leftItem into two items\n * @param {Transaction} transaction\n * @param {Item} leftItem\n * @param {number} diff\n * @return {Item}\n *\n * @function\n * @private\n */\nexport const splitItem = (transaction, leftItem, diff) => {\n  // create rightItem\n  const { client, clock } = leftItem.id\n  const rightItem = new Item(\n    createID(client, clock + diff),\n    leftItem,\n    createID(client, clock + diff - 1),\n    leftItem.right,\n    leftItem.rightOrigin,\n    leftItem.parent,\n    leftItem.parentSub,\n    leftItem.content.splice(diff)\n  )\n  if (leftItem.deleted) {\n    rightItem.deleted = true\n  }\n  if (leftItem.keep) {\n    rightItem.keep = true\n  }\n  if (leftItem.redone !== null) {\n    rightItem.redone = createID(leftItem.redone.client, leftItem.redone.clock + diff)\n  }\n  // update left (do not set leftItem.rightOrigin as it will lead to problems when syncing)\n  leftItem.right = rightItem\n  // update right\n  if (rightItem.right !== null) {\n    rightItem.right.left = rightItem\n  }\n  // right is more specific.\n  transaction._mergeStructs.push(rightItem)\n  // update parent._map\n  if (rightItem.parentSub !== null && rightItem.right === null) {\n    /** @type {AbstractType<any>} */ (rightItem.parent)._map.set(rightItem.parentSub, rightItem)\n  }\n  leftItem.length = diff\n  return rightItem\n}\n\n/**\n * Redoes the effect of this operation.\n *\n * @param {Transaction} transaction The Yjs instance.\n * @param {Item} item\n * @param {Set<Item>} redoitems\n *\n * @return {Item|null}\n *\n * @private\n */\nexport const redoItem = (transaction, item, redoitems) => {\n  const doc = transaction.doc\n  const store = doc.store\n  const ownClientID = doc.clientID\n  const redone = item.redone\n  if (redone !== null) {\n    return getItemCleanStart(transaction, redone)\n  }\n  let parentItem = /** @type {AbstractType<any>} */ (item.parent)._item\n  /**\n   * @type {Item|null}\n   */\n  let left\n  /**\n   * @type {Item|null}\n   */\n  let right\n  if (item.parentSub === null) {\n    // Is an array item. Insert at the old position\n    left = item.left\n    right = item\n  } else {\n    // Is a map item. Insert as current value\n    left = item\n    while (left.right !== null) {\n      left = left.right\n      if (left.id.client !== ownClientID) {\n        // It is not possible to redo this item because it conflicts with a\n        // change from another client\n        return null\n      }\n    }\n    if (left.right !== null) {\n      left = /** @type {Item} */ (/** @type {AbstractType<any>} */ (item.parent)._map.get(item.parentSub))\n    }\n    right = null\n  }\n  // make sure that parent is redone\n  if (parentItem !== null && parentItem.deleted === true && parentItem.redone === null) {\n    // try to undo parent if it will be undone anyway\n    if (!redoitems.has(parentItem) || redoItem(transaction, parentItem, redoitems) === null) {\n      return null\n    }\n  }\n  if (parentItem !== null && parentItem.redone !== null) {\n    while (parentItem.redone !== null) {\n      parentItem = getItemCleanStart(transaction, parentItem.redone)\n    }\n    // find next cloned_redo items\n    while (left !== null) {\n      /**\n       * @type {Item|null}\n       */\n      let leftTrace = left\n      // trace redone until parent matches\n      while (leftTrace !== null && /** @type {AbstractType<any>} */ (leftTrace.parent)._item !== parentItem) {\n        leftTrace = leftTrace.redone === null ? null : getItemCleanStart(transaction, leftTrace.redone)\n      }\n      if (leftTrace !== null && /** @type {AbstractType<any>} */ (leftTrace.parent)._item === parentItem) {\n        left = leftTrace\n        break\n      }\n      left = left.left\n    }\n    while (right !== null) {\n      /**\n       * @type {Item|null}\n       */\n      let rightTrace = right\n      // trace redone until parent matches\n      while (rightTrace !== null && /** @type {AbstractType<any>} */ (rightTrace.parent)._item !== parentItem) {\n        rightTrace = rightTrace.redone === null ? null : getItemCleanStart(transaction, rightTrace.redone)\n      }\n      if (rightTrace !== null && /** @type {AbstractType<any>} */ (rightTrace.parent)._item === parentItem) {\n        right = rightTrace\n        break\n      }\n      right = right.right\n    }\n  }\n  const nextClock = getState(store, ownClientID)\n  const nextId = createID(ownClientID, nextClock)\n  const redoneItem = new Item(\n    nextId,\n    left, left && left.lastId,\n    right, right && right.id,\n    parentItem === null ? item.parent : /** @type {ContentType} */ (parentItem.content).type,\n    item.parentSub,\n    item.content.copy()\n  )\n  item.redone = nextId\n  keepItem(redoneItem, true)\n  redoneItem.integrate(transaction, 0)\n  return redoneItem\n}\n\n/**\n * Abstract class that represents any content.\n */\nexport class Item extends AbstractStruct {\n  /**\n   * @param {ID} id\n   * @param {Item | null} left\n   * @param {ID | null} origin\n   * @param {Item | null} right\n   * @param {ID | null} rightOrigin\n   * @param {AbstractType<any>|ID|null} parent Is a type if integrated, is null if it is possible to copy parent from left or right, is ID before integration to search for it.\n   * @param {string | null} parentSub\n   * @param {AbstractContent} content\n   */\n  constructor (id, left, origin, right, rightOrigin, parent, parentSub, content) {\n    super(id, content.getLength())\n    /**\n     * The item that was originally to the left of this item.\n     * @type {ID | null}\n     */\n    this.origin = origin\n    /**\n     * The item that is currently to the left of this item.\n     * @type {Item | null}\n     */\n    this.left = left\n    /**\n     * The item that is currently to the right of this item.\n     * @type {Item | null}\n     */\n    this.right = right\n    /**\n     * The item that was originally to the right of this item.\n     * @type {ID | null}\n     */\n    this.rightOrigin = rightOrigin\n    /**\n     * @type {AbstractType<any>|ID|null}\n     */\n    this.parent = parent\n    /**\n     * If the parent refers to this item with some kind of key (e.g. YMap, the\n     * key is specified here. The key is then used to refer to the list in which\n     * to insert this item. If `parentSub = null` type._start is the list in\n     * which to insert to. Otherwise it is `parent._map`.\n     * @type {String | null}\n     */\n    this.parentSub = parentSub\n    /**\n     * Whether this item was deleted or not.\n     * @type {Boolean}\n     */\n    this.deleted = false\n    /**\n     * If this type's effect is reundone this type refers to the type that undid\n     * this operation.\n     * @type {ID | null}\n     */\n    this.redone = null\n    /**\n     * @type {AbstractContent}\n     */\n    this.content = content\n    /**\n     * If true, do not garbage collect this Item.\n     */\n    this.keep = false\n  }\n\n  get countable () {\n    return this.content.isCountable()\n  }\n\n  /**\n   * Return missing ids, or define missing items and return null.\n   *\n   * @param {Transaction} transaction\n   * @param {StructStore} store\n   * @return {null | ID}\n   */\n  getMissing (transaction, store) {\n    const origin = this.origin\n    const rightOrigin = this.rightOrigin\n    const parent = /** @type {ID} */ (this.parent)\n\n    if (origin && origin.clock >= getState(store, origin.client)) {\n      return this.origin\n    }\n    if (rightOrigin && rightOrigin.clock >= getState(store, rightOrigin.client)) {\n      return this.rightOrigin\n    }\n    if (parent && parent.constructor === ID && parent.clock >= getState(store, parent.client)) {\n      return parent\n    }\n\n    // We have all missing ids, now find the items\n\n    if (origin) {\n      this.left = getItemCleanEnd(transaction, store, origin)\n      this.origin = this.left.lastId\n    }\n    if (rightOrigin) {\n      this.right = getItemCleanStart(transaction, rightOrigin)\n      this.rightOrigin = this.right.id\n    }\n    if (parent && parent.constructor === ID) {\n      if (parent.clock < getState(store, parent.client)) {\n        const parentItem = getItem(store, parent)\n        if (parentItem.constructor === GC) {\n          this.parent = null\n        } else {\n          this.parent = /** @type {ContentType} */ (parentItem.content).type\n        }\n      } else {\n        return parent\n      }\n    }\n    // only set item if this shouldn't be garbage collected\n    if (!this.parent) {\n      if (this.left && this.left.constructor === Item) {\n        this.parent = this.left.parent\n        this.parentSub = this.left.parentSub\n      }\n      if (this.right && this.right.constructor === Item) {\n        this.parent = this.right.parent\n        this.parentSub = this.right.parentSub\n      }\n    }\n    return null\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {number} offset\n   */\n  integrate (transaction, offset) {\n    const store = transaction.doc.store\n    if (offset > 0) {\n      this.id.clock += offset\n      this.left = getItemCleanEnd(transaction, store, createID(this.id.client, this.id.clock - 1))\n      this.origin = this.left.lastId\n      this.content = this.content.splice(offset)\n      this.length -= offset\n    }\n    const parentSub = this.parentSub\n    const length = this.length\n    const parent = /** @type {AbstractType<any>|null} */ (this.parent)\n\n    if (parent) {\n      /**\n       * @type {Item|null}\n       */\n      let left = this.left\n\n      /**\n       * @type {Item|null}\n       */\n      let o\n      // set o to the first conflicting item\n      if (left !== null) {\n        o = left.right\n      } else if (parentSub !== null) {\n        o = parent._map.get(parentSub) || null\n        while (o !== null && o.left !== null) {\n          o = o.left\n        }\n      } else {\n        o = parent._start\n      }\n      // TODO: use something like DeleteSet here (a tree implementation would be best)\n      // @todo use global set definitions\n      /**\n       * @type {Set<Item>}\n       */\n      const conflictingItems = new Set()\n      /**\n       * @type {Set<Item>}\n       */\n      const itemsBeforeOrigin = new Set()\n      // Let c in conflictingItems, b in itemsBeforeOrigin\n      // ***{origin}bbbb{this}{c,b}{c,b}{o}***\n      // Note that conflictingItems is a subset of itemsBeforeOrigin\n      while (o !== null && o !== this.right) {\n        itemsBeforeOrigin.add(o)\n        conflictingItems.add(o)\n        if (compareIDs(this.origin, o.origin)) {\n          // case 1\n          if (o.id.client < this.id.client) {\n            left = o\n            conflictingItems.clear()\n          }\n        } else if (o.origin !== null && itemsBeforeOrigin.has(getItem(store, o.origin))) {\n          // case 2\n          if (o.origin === null || !conflictingItems.has(getItem(store, o.origin))) {\n            left = o\n            conflictingItems.clear()\n          }\n        } else {\n          break\n        }\n        o = o.right\n      }\n      this.left = left\n      // reconnect left/right + update parent map/start if necessary\n      if (left !== null) {\n        const right = left.right\n        this.right = right\n        left.right = this\n      } else {\n        let r\n        if (parentSub !== null) {\n          r = parent._map.get(parentSub) || null\n          while (r !== null && r.left !== null) {\n            r = r.left\n          }\n        } else {\n          r = parent._start\n          parent._start = this\n        }\n        this.right = r\n      }\n      if (this.right !== null) {\n        this.right.left = this\n      } else if (parentSub !== null) {\n        // set as current parent value if right === null and this is parentSub\n        parent._map.set(parentSub, this)\n        if (left !== null) {\n          // this is the current attribute value of parent. delete right\n          left.delete(transaction)\n        }\n      }\n      // adjust length of parent\n      if (parentSub === null && this.countable && !this.deleted) {\n        parent._length += length\n      }\n      addStruct(store, this)\n      this.content.integrate(transaction, this)\n      // add parent to transaction.changed\n      addChangedTypeToTransaction(transaction, parent, parentSub)\n      if ((parent._item !== null && parent._item.deleted) || (this.right !== null && parentSub !== null)) {\n        // delete if parent is deleted or if this is not the current attribute value of parent\n        this.delete(transaction)\n      }\n    } else {\n      // parent is not defined. Integrate GC struct instead\n      new GC(this.id, this.length).integrate(transaction, 0)\n    }\n  }\n\n  /**\n   * Returns the next non-deleted item\n   */\n  get next () {\n    let n = this.right\n    while (n !== null && n.deleted) {\n      n = n.right\n    }\n    return n\n  }\n\n  /**\n   * Returns the previous non-deleted item\n   */\n  get prev () {\n    let n = this.left\n    while (n !== null && n.deleted) {\n      n = n.left\n    }\n    return n\n  }\n\n  /**\n   * Computes the last content address of this Item.\n   */\n  get lastId () {\n    // allocating ids is pretty costly because of the amount of ids created, so we try to reuse whenever possible\n    return this.length === 1 ? this.id : createID(this.id.client, this.id.clock + this.length - 1)\n  }\n\n  /**\n   * Try to merge two items\n   *\n   * @param {Item} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    if (\n      compareIDs(right.origin, this.lastId) &&\n      this.right === right &&\n      compareIDs(this.rightOrigin, right.rightOrigin) &&\n      this.id.client === right.id.client &&\n      this.id.clock + this.length === right.id.clock &&\n      this.deleted === right.deleted &&\n      this.redone === null &&\n      right.redone === null &&\n      this.content.constructor === right.content.constructor &&\n      this.content.mergeWith(right.content)\n    ) {\n      if (right.keep) {\n        this.keep = true\n      }\n      this.right = right.right\n      if (this.right !== null) {\n        this.right.left = this\n      }\n      this.length += right.length\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Mark this Item as deleted.\n   *\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    if (!this.deleted) {\n      const parent = /** @type {AbstractType<any>} */ (this.parent)\n      // adjust the length of parent\n      if (this.countable && this.parentSub === null) {\n        parent._length -= this.length\n      }\n      this.deleted = true\n      addToDeleteSet(transaction.deleteSet, this.id, this.length)\n      maplib.setIfUndefined(transaction.changed, parent, set.create).add(this.parentSub)\n      this.content.delete(transaction)\n    }\n  }\n\n  /**\n   * @param {StructStore} store\n   * @param {boolean} parentGCd\n   */\n  gc (store, parentGCd) {\n    if (!this.deleted) {\n      throw error.unexpectedCase()\n    }\n    this.content.gc(store)\n    if (parentGCd) {\n      replaceStruct(store, this, new GC(this.id, this.length))\n    } else {\n      this.content = new ContentDeleted(this.length)\n    }\n  }\n\n  /**\n   * Transform the properties of this type to binary and write it to an\n   * BinaryEncoder.\n   *\n   * This is called when this Item is sent to a remote peer.\n   *\n   * @param {encoding.Encoder} encoder The encoder to write data to.\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    const origin = offset > 0 ? createID(this.id.client, this.id.clock + offset - 1) : this.origin\n    const rightOrigin = this.rightOrigin\n    const parentSub = this.parentSub\n    const info = (this.content.getRef() & binary.BITS5) |\n      (origin === null ? 0 : binary.BIT8) | // origin is defined\n      (rightOrigin === null ? 0 : binary.BIT7) | // right origin is defined\n      (parentSub === null ? 0 : binary.BIT6) // parentSub is non-null\n    encoding.writeUint8(encoder, info)\n    if (origin !== null) {\n      writeID(encoder, origin)\n    }\n    if (rightOrigin !== null) {\n      writeID(encoder, rightOrigin)\n    }\n    if (origin === null && rightOrigin === null) {\n      const parent = /** @type {AbstractType<any>} */ (this.parent)\n      const parentItem = parent._item\n      if (parentItem === null) {\n        // parent type on y._map\n        // find the correct key\n        const ykey = findRootTypeKey(parent)\n        encoding.writeVarUint(encoder, 1) // write parentYKey\n        encoding.writeVarString(encoder, ykey)\n      } else {\n        encoding.writeVarUint(encoder, 0) // write parent id\n        writeID(encoder, parentItem.id)\n      }\n      if (parentSub !== null) {\n        encoding.writeVarString(encoder, parentSub)\n      }\n    }\n    this.content.write(encoder, offset)\n  }\n}\n\n/**\n * @param {decoding.Decoder} decoder\n * @param {number} info\n */\nconst readItemContent = (decoder, info) => contentRefs[info & binary.BITS5](decoder)\n\n/**\n * A lookup map for reading Item content.\n *\n * @type {Array<function(decoding.Decoder):AbstractContent>}\n */\nexport const contentRefs = [\n  () => { throw error.unexpectedCase() }, // GC is not ItemContent\n  readContentDeleted,\n  readContentJSON,\n  readContentBinary,\n  readContentString,\n  readContentEmbed,\n  readContentFormat,\n  readContentType,\n  readContentAny\n]\n\n/**\n * Do not implement this class!\n */\nexport class AbstractContent {\n  /**\n   * @return {number}\n   */\n  getLength () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @return {Array<any>}\n   */\n  getContent () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * Should return false if this Item is some kind of meta information\n   * (e.g. format information).\n   *\n   * * Whether this Item should be addressable via `yarray.get(i)`\n   * * Whether this Item should be counted when computing yarray.length\n   *\n   * @return {boolean}\n   */\n  isCountable () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @return {AbstractContent}\n   */\n  copy () {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {number} offset\n   * @return {AbstractContent}\n   */\n  splice (offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {AbstractContent} right\n   * @return {boolean}\n   */\n  mergeWith (right) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {Transaction} transaction\n   * @param {Item} item\n   */\n  integrate (transaction, item) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {Transaction} transaction\n   */\n  delete (transaction) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {StructStore} store\n   */\n  gc (store) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @param {encoding.Encoder} encoder\n   * @param {number} offset\n   */\n  write (encoder, offset) {\n    throw error.methodUnimplemented()\n  }\n\n  /**\n   * @return {number}\n   */\n  getRef () {\n    throw error.methodUnimplemented()\n  }\n}\n\n/**\n * @param {decoding.Decoder} decoder\n * @param {ID} id\n * @param {number} info\n * @param {Doc} doc\n */\nexport const readItem = (decoder, id, info, doc) => {\n  /**\n   * The item that was originally to the left of this item.\n   * @type {ID | null}\n   */\n  const origin = (info & binary.BIT8) === binary.BIT8 ? readID(decoder) : null\n  /**\n   * The item that was originally to the right of this item.\n   * @type {ID | null}\n   */\n  const rightOrigin = (info & binary.BIT7) === binary.BIT7 ? readID(decoder) : null\n  const canCopyParentInfo = (info & (binary.BIT7 | binary.BIT8)) === 0\n  const hasParentYKey = canCopyParentInfo ? decoding.readVarUint(decoder) === 1 : false\n  /**\n   * If parent = null and neither left nor right are defined, then we know that `parent` is child of `y`\n   * and we read the next string as parentYKey.\n   * It indicates how we store/retrieve parent from `y.share`\n   * @type {string|null}\n   */\n  const parentYKey = canCopyParentInfo && hasParentYKey ? decoding.readVarString(decoder) : null\n  /**\n   * The parent type.\n   * @type {ID | AbstractType<any> | null}\n   */\n  const parent = canCopyParentInfo && !hasParentYKey ? readID(decoder) : (parentYKey ? doc.get(parentYKey) : null)\n  /**\n   * If the parent refers to this item with some kind of key (e.g. YMap, the\n   * key is specified here. The key is then used to refer to the list in which\n   * to insert this item. If `parentSub = null` type._start is the list in\n   * which to insert to. Otherwise it is `parent._map`.\n   * @type {String | null}\n   */\n  const parentSub = canCopyParentInfo && (info & binary.BIT6) === binary.BIT6 ? decoding.readVarString(decoder) : null\n\n  /**\n   * @type {AbstractContent}\n   */\n  const content = readItemContent(decoder, info)\n\n  return new Item(id, null, origin, null, rightOrigin, parent, parentSub, content)\n}\n"]},"metadata":{},"sourceType":"module"}