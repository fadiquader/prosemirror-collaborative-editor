{"ast":null,"code":"/**\n * Utility module to work with key-value stores.\n *\n * @module map\n */\n\n/**\n * Creates a new Map instance.\n *\n * @function\n * @return {Map<any, any>}\n *\n * @function\n */\nexport const create = () => new Map();\n/**\n * Copy a Map object into a fresh Map object.\n *\n * @function\n * @template X,Y\n * @param {Map<X,Y>} m\n * @return {Map<X,Y>}\n */\n\nexport const copy = m => {\n  const r = create();\n  m.forEach((v, k) => {\n    r.set(k, v);\n  });\n  return r;\n};\n/**\n * Get map property. Create T if property is undefined and set T on map.\n *\n * ```js\n * const listeners = map.setIfUndefined(events, 'eventName', set.create)\n * listeners.add(listener)\n * ```\n *\n * @function\n * @template T,K\n * @param {Map<K, T>} map\n * @param {K} key\n * @param {function():T} createT\n * @return {T}\n */\n\nexport const setIfUndefined = (map, key, createT) => {\n  let set = map.get(key);\n\n  if (set === undefined) {\n    map.set(key, set = createT());\n  }\n\n  return set;\n};\n/**\n * Creates an Array and populates it with the content of all key-value pairs using the `f(value, key)` function.\n *\n * @function\n * @template K\n * @template V\n * @template R\n * @param {Map<K,V>} m\n * @param {function(V,K):R} f\n * @return {Array<R>}\n */\n\nexport const map = (m, f) => {\n  const res = [];\n\n  for (const [key, value] of m) {\n    res.push(f(value, key));\n  }\n\n  return res;\n};\n/**\n * Tests whether any key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @todo should rename to some - similarly to Array.some\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\n\nexport const any = (m, f) => {\n  for (const [key, value] of m) {\n    if (f(value, key)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Tests whether all key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\n\nexport const all = (m, f) => {\n  for (const [key, value] of m) {\n    if (!f(value, key)) {\n      return false;\n    }\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/Users/meeopp/Development/Others/editor-yjs/client/node_modules/lib0/map.js"],"names":["create","Map","copy","m","r","forEach","v","k","set","setIfUndefined","map","key","createT","get","undefined","f","res","value","push","any","all"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;AAQA,OAAO,MAAMA,MAAM,GAAG,MAAM,IAAIC,GAAJ,EAArB;AAEP;;;;;;;;;AAQA,OAAO,MAAMC,IAAI,GAAGC,CAAC,IAAI;AACvB,QAAMC,CAAC,GAAGJ,MAAM,EAAhB;AACAG,EAAAA,CAAC,CAACE,OAAF,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAAEH,IAAAA,CAAC,CAACI,GAAF,CAAMD,CAAN,EAASD,CAAT;AAAa,GAAnC;AACA,SAAOF,CAAP;AACD,CAJM;AAMP;;;;;;;;;;;;;;;;AAeA,OAAO,MAAMK,cAAc,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAWC,OAAX,KAAuB;AACnD,MAAIJ,GAAG,GAAGE,GAAG,CAACG,GAAJ,CAAQF,GAAR,CAAV;;AACA,MAAIH,GAAG,KAAKM,SAAZ,EAAuB;AACrBJ,IAAAA,GAAG,CAACF,GAAJ,CAAQG,GAAR,EAAaH,GAAG,GAAGI,OAAO,EAA1B;AACD;;AACD,SAAOJ,GAAP;AACD,CANM;AAQP;;;;;;;;;;;;AAWA,OAAO,MAAME,GAAG,GAAG,CAACP,CAAD,EAAIY,CAAJ,KAAU;AAC3B,QAAMC,GAAG,GAAG,EAAZ;;AACA,OAAK,MAAM,CAACL,GAAD,EAAMM,KAAN,CAAX,IAA2Bd,CAA3B,EAA8B;AAC5Ba,IAAAA,GAAG,CAACE,IAAJ,CAASH,CAAC,CAACE,KAAD,EAAQN,GAAR,CAAV;AACD;;AACD,SAAOK,GAAP;AACD,CANM;AAQP;;;;;;;;;;;;;AAYA,OAAO,MAAMG,GAAG,GAAG,CAAChB,CAAD,EAAIY,CAAJ,KAAU;AAC3B,OAAK,MAAM,CAACJ,GAAD,EAAMM,KAAN,CAAX,IAA2Bd,CAA3B,EAA8B;AAC5B,QAAIY,CAAC,CAACE,KAAD,EAAQN,GAAR,CAAL,EAAmB;AACjB,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD,CAPM;AASP;;;;;;;;;;;AAUA,OAAO,MAAMS,GAAG,GAAG,CAACjB,CAAD,EAAIY,CAAJ,KAAU;AAC3B,OAAK,MAAM,CAACJ,GAAD,EAAMM,KAAN,CAAX,IAA2Bd,CAA3B,EAA8B;AAC5B,QAAI,CAACY,CAAC,CAACE,KAAD,EAAQN,GAAR,CAAN,EAAoB;AAClB,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD,CAPM","sourcesContent":["/**\n * Utility module to work with key-value stores.\n *\n * @module map\n */\n\n/**\n * Creates a new Map instance.\n *\n * @function\n * @return {Map<any, any>}\n *\n * @function\n */\nexport const create = () => new Map()\n\n/**\n * Copy a Map object into a fresh Map object.\n *\n * @function\n * @template X,Y\n * @param {Map<X,Y>} m\n * @return {Map<X,Y>}\n */\nexport const copy = m => {\n  const r = create()\n  m.forEach((v, k) => { r.set(k, v) })\n  return r\n}\n\n/**\n * Get map property. Create T if property is undefined and set T on map.\n *\n * ```js\n * const listeners = map.setIfUndefined(events, 'eventName', set.create)\n * listeners.add(listener)\n * ```\n *\n * @function\n * @template T,K\n * @param {Map<K, T>} map\n * @param {K} key\n * @param {function():T} createT\n * @return {T}\n */\nexport const setIfUndefined = (map, key, createT) => {\n  let set = map.get(key)\n  if (set === undefined) {\n    map.set(key, set = createT())\n  }\n  return set\n}\n\n/**\n * Creates an Array and populates it with the content of all key-value pairs using the `f(value, key)` function.\n *\n * @function\n * @template K\n * @template V\n * @template R\n * @param {Map<K,V>} m\n * @param {function(V,K):R} f\n * @return {Array<R>}\n */\nexport const map = (m, f) => {\n  const res = []\n  for (const [key, value] of m) {\n    res.push(f(value, key))\n  }\n  return res\n}\n\n/**\n * Tests whether any key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @todo should rename to some - similarly to Array.some\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nexport const any = (m, f) => {\n  for (const [key, value] of m) {\n    if (f(value, key)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Tests whether all key-value pairs pass the test implemented by `f(value, key)`.\n *\n * @function\n * @template K\n * @template V\n * @param {Map<K,V>} m\n * @param {function(V,K):boolean} f\n * @return {boolean}\n */\nexport const all = (m, f) => {\n  for (const [key, value] of m) {\n    if (!f(value, key)) {\n      return false\n    }\n  }\n  return true\n}\n"]},"metadata":{},"sourceType":"module"}