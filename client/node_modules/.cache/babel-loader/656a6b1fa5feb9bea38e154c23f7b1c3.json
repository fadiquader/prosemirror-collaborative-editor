{"ast":null,"code":"/**\n * Utility module to work with time.\n *\n * @module time\n */\nimport * as metric from './metric.js';\nimport * as math from './math.js';\n/**\n * Return current time.\n *\n * @return {Date}\n */\n\nexport const getDate = () => new Date();\n/**\n * Return current unix time.\n *\n * @return {number}\n */\n\nexport const getUnixTime = Date.now;\n/**\n * Transform time (in ms) to a human readable format. E.g. 1100 => 1.1s. 60s => 1min. .001 => 10μs.\n *\n * @param {number} d duration in milliseconds\n * @return {string} humanized approximation of time\n */\n\nexport const humanizeDuration = d => {\n  if (d < 60000) {\n    const p = metric.prefix(d, -1);\n    return math.round(p.n * 100) / 100 + p.prefix + 's';\n  }\n\n  d = math.floor(d / 1000);\n  const seconds = d % 60;\n  const minutes = math.floor(d / 60) % 60;\n  const hours = math.floor(d / 3600) % 24;\n  const days = math.floor(d / 86400);\n\n  if (days > 0) {\n    return days + 'd' + (hours > 0 || minutes > 30 ? ' ' + (minutes > 30 ? hours + 1 : hours) + 'h' : '');\n  }\n\n  if (hours > 0) {\n    /* istanbul ignore next */\n    return hours + 'h' + (minutes > 0 || seconds > 30 ? ' ' + (seconds > 30 ? minutes + 1 : minutes) + 'min' : '');\n  }\n\n  return minutes + 'min' + (seconds > 0 ? ' ' + seconds + 's' : '');\n};","map":{"version":3,"sources":["/Users/meeopp/Development/Others/editor-yjs/client/node_modules/lib0/time.js"],"names":["metric","math","getDate","Date","getUnixTime","now","humanizeDuration","d","p","prefix","round","n","floor","seconds","minutes","hours","days"],"mappings":"AAAA;;;;;AAMA,OAAO,KAAKA,MAAZ,MAAwB,aAAxB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AAEA;;;;;;AAKA,OAAO,MAAMC,OAAO,GAAG,MAAM,IAAIC,IAAJ,EAAtB;AAEP;;;;;;AAKA,OAAO,MAAMC,WAAW,GAAGD,IAAI,CAACE,GAAzB;AAEP;;;;;;;AAMA,OAAO,MAAMC,gBAAgB,GAAGC,CAAC,IAAI;AACnC,MAAIA,CAAC,GAAG,KAAR,EAAe;AACb,UAAMC,CAAC,GAAGR,MAAM,CAACS,MAAP,CAAcF,CAAd,EAAiB,CAAC,CAAlB,CAAV;AACA,WAAON,IAAI,CAACS,KAAL,CAAWF,CAAC,CAACG,CAAF,GAAM,GAAjB,IAAwB,GAAxB,GAA8BH,CAAC,CAACC,MAAhC,GAAyC,GAAhD;AACD;;AACDF,EAAAA,CAAC,GAAGN,IAAI,CAACW,KAAL,CAAWL,CAAC,GAAG,IAAf,CAAJ;AACA,QAAMM,OAAO,GAAGN,CAAC,GAAG,EAApB;AACA,QAAMO,OAAO,GAAGb,IAAI,CAACW,KAAL,CAAWL,CAAC,GAAG,EAAf,IAAqB,EAArC;AACA,QAAMQ,KAAK,GAAGd,IAAI,CAACW,KAAL,CAAWL,CAAC,GAAG,IAAf,IAAuB,EAArC;AACA,QAAMS,IAAI,GAAGf,IAAI,CAACW,KAAL,CAAWL,CAAC,GAAG,KAAf,CAAb;;AACA,MAAIS,IAAI,GAAG,CAAX,EAAc;AACZ,WAAOA,IAAI,GAAG,GAAP,IAAeD,KAAK,GAAG,CAAR,IAAaD,OAAO,GAAG,EAAxB,GAA8B,OAAOA,OAAO,GAAG,EAAV,GAAeC,KAAK,GAAG,CAAvB,GAA2BA,KAAlC,IAA2C,GAAzE,GAA+E,EAA7F,CAAP;AACD;;AACD,MAAIA,KAAK,GAAG,CAAZ,EAAe;AACb;AACA,WAAOA,KAAK,GAAG,GAAR,IAAgBD,OAAO,GAAG,CAAV,IAAeD,OAAO,GAAG,EAA1B,GAAgC,OAAOA,OAAO,GAAG,EAAV,GAAeC,OAAO,GAAG,CAAzB,GAA6BA,OAApC,IAA+C,KAA/E,GAAuF,EAAtG,CAAP;AACD;;AACD,SAAOA,OAAO,GAAG,KAAV,IAAmBD,OAAO,GAAG,CAAV,GAAc,MAAMA,OAAN,GAAgB,GAA9B,GAAoC,EAAvD,CAAP;AACD,CAlBM","sourcesContent":["/**\n * Utility module to work with time.\n *\n * @module time\n */\n\nimport * as metric from './metric.js'\nimport * as math from './math.js'\n\n/**\n * Return current time.\n *\n * @return {Date}\n */\nexport const getDate = () => new Date()\n\n/**\n * Return current unix time.\n *\n * @return {number}\n */\nexport const getUnixTime = Date.now\n\n/**\n * Transform time (in ms) to a human readable format. E.g. 1100 => 1.1s. 60s => 1min. .001 => 10μs.\n *\n * @param {number} d duration in milliseconds\n * @return {string} humanized approximation of time\n */\nexport const humanizeDuration = d => {\n  if (d < 60000) {\n    const p = metric.prefix(d, -1)\n    return math.round(p.n * 100) / 100 + p.prefix + 's'\n  }\n  d = math.floor(d / 1000)\n  const seconds = d % 60\n  const minutes = math.floor(d / 60) % 60\n  const hours = math.floor(d / 3600) % 24\n  const days = math.floor(d / 86400)\n  if (days > 0) {\n    return days + 'd' + ((hours > 0 || minutes > 30) ? ' ' + (minutes > 30 ? hours + 1 : hours) + 'h' : '')\n  }\n  if (hours > 0) {\n    /* istanbul ignore next */\n    return hours + 'h' + ((minutes > 0 || seconds > 30) ? ' ' + (seconds > 30 ? minutes + 1 : minutes) + 'min' : '')\n  }\n  return minutes + 'min' + (seconds > 0 ? ' ' + seconds + 's' : '')\n}\n"]},"metadata":{},"sourceType":"module"}