{"ast":null,"code":"/**\n * Utility module to work with strings.\n *\n * @module string\n */\nexport const fromCharCode = String.fromCharCode;\nexport const fromCodePoint = String.fromCodePoint;\n/**\n * @param {string} s\n * @return {string}\n */\n\nconst toLowerCase = s => s.toLowerCase();\n\nconst trimLeftRegex = /^\\s*/g;\n/**\n * @param {string} s\n * @return {string}\n */\n\nexport const trimLeft = s => s.replace(trimLeftRegex, '');\nconst fromCamelCaseRegex = /([A-Z])/g;\n/**\n * @param {string} s\n * @param {string} separator\n * @return {string}\n */\n\nexport const fromCamelCase = (s, separator) => trimLeft(s.replace(fromCamelCaseRegex, match => `${separator}${toLowerCase(match)}`));\n/**\n * Compute the utf8ByteLength\n * @param {string} str\n * @return {number}\n */\n\nexport const utf8ByteLength = str => unescape(encodeURIComponent(str)).length;\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\n\nexport const _encodeUtf8Polyfill = str => {\n  const encodedString = unescape(encodeURIComponent(str));\n  const len = encodedString.length;\n  const buf = new Uint8Array(len);\n\n  for (let i = 0; i < len; i++) {\n    buf[i] =\n    /** @type {number} */\n    encodedString.codePointAt(i);\n  }\n\n  return buf;\n};\n/* istanbul ignore next */\n\nexport const utf8TextEncoder =\n/** @type {TextEncoder} */\ntypeof TextEncoder !== 'undefined' ? new TextEncoder() : null;\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\n\nexport const _encodeUtf8Native = str => utf8TextEncoder.encode(str);\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\n\n/* istanbul ignore next */\n\nexport const encodeUtf8 = utf8TextEncoder ? _encodeUtf8Native : _encodeUtf8Polyfill;\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\n\nexport const _decodeUtf8Polyfill = buf => {\n  let remainingLen = buf.length;\n  let encodedString = '';\n  let bufPos = 0;\n\n  while (remainingLen > 0) {\n    const nextLen = remainingLen < 10000 ? remainingLen : 10000;\n    const bytes = buf.subarray(bufPos, bufPos + nextLen);\n    bufPos += nextLen; // Starting with ES5.1 we can supply a generic array-like object as arguments\n\n    encodedString += String.fromCodePoint.apply(null,\n    /** @type {any} */\n    bytes);\n    remainingLen -= nextLen;\n  }\n\n  return decodeURIComponent(escape(encodedString));\n};\n/* istanbul ignore next */\n\nexport let utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8', {\n  fatal: true,\n  ignoreBOM: true\n});\n/* istanbul ignore next */\n\nif (utf8TextDecoder && utf8TextDecoder.decode(new Uint8Array()).length === 1) {\n  // Safari doesn't handle BOM correctly.\n  // This fixes a bug in Safari 13.0.5 where it produces a BOM the first time it is called.\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the first call and\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the second call\n  // Another issue is that from then on no BOM chars are recognized anymore\n\n  /* istanbul ignore next */\n  utf8TextDecoder = null;\n}\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\n\n\nexport const _decodeUtf8Native = buf =>\n/** @type {TextDecoder} */\nutf8TextDecoder.decode(buf);\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\n\n/* istanbul ignore next */\n\nexport const decodeUtf8 = utf8TextDecoder ? _decodeUtf8Native : _decodeUtf8Polyfill;","map":{"version":3,"sources":["/Users/meeopp/Development/Others/editor-yjs/client/node_modules/lib0/string.js"],"names":["fromCharCode","String","fromCodePoint","toLowerCase","s","trimLeftRegex","trimLeft","replace","fromCamelCaseRegex","fromCamelCase","separator","match","utf8ByteLength","str","unescape","encodeURIComponent","length","_encodeUtf8Polyfill","encodedString","len","buf","Uint8Array","i","codePointAt","utf8TextEncoder","TextEncoder","_encodeUtf8Native","encode","encodeUtf8","_decodeUtf8Polyfill","remainingLen","bufPos","nextLen","bytes","subarray","apply","decodeURIComponent","escape","utf8TextDecoder","TextDecoder","fatal","ignoreBOM","decode","_decodeUtf8Native","decodeUtf8"],"mappings":"AAAA;;;;;AAMA,OAAO,MAAMA,YAAY,GAAGC,MAAM,CAACD,YAA5B;AACP,OAAO,MAAME,aAAa,GAAGD,MAAM,CAACC,aAA7B;AAEP;;;;;AAIA,MAAMC,WAAW,GAAGC,CAAC,IAAIA,CAAC,CAACD,WAAF,EAAzB;;AAEA,MAAME,aAAa,GAAG,OAAtB;AAEA;;;;;AAIA,OAAO,MAAMC,QAAQ,GAAGF,CAAC,IAAIA,CAAC,CAACG,OAAF,CAAUF,aAAV,EAAyB,EAAzB,CAAtB;AAEP,MAAMG,kBAAkB,GAAG,UAA3B;AAEA;;;;;;AAKA,OAAO,MAAMC,aAAa,GAAG,CAACL,CAAD,EAAIM,SAAJ,KAAkBJ,QAAQ,CAACF,CAAC,CAACG,OAAF,CAAUC,kBAAV,EAA8BG,KAAK,IAAK,GAAED,SAAU,GAAEP,WAAW,CAACQ,KAAD,CAAQ,EAAzE,CAAD,CAAhD;AAEP;;;;;;AAKA,OAAO,MAAMC,cAAc,GAAGC,GAAG,IAAIC,QAAQ,CAACC,kBAAkB,CAACF,GAAD,CAAnB,CAAR,CAAkCG,MAAhE;AAEP;;;;;AAIA,OAAO,MAAMC,mBAAmB,GAAGJ,GAAG,IAAI;AACxC,QAAMK,aAAa,GAAGJ,QAAQ,CAACC,kBAAkB,CAACF,GAAD,CAAnB,CAA9B;AACA,QAAMM,GAAG,GAAGD,aAAa,CAACF,MAA1B;AACA,QAAMI,GAAG,GAAG,IAAIC,UAAJ,CAAeF,GAAf,CAAZ;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,EAA1B,EAA8B;AAC5BF,IAAAA,GAAG,CAACE,CAAD,CAAH;AAAS;AAAuBJ,IAAAA,aAAa,CAACK,WAAd,CAA0BD,CAA1B,CAAhC;AACD;;AACD,SAAOF,GAAP;AACD,CARM;AAUP;;AACA,OAAO,MAAMI,eAAe;AAAG;AAA4B,OAAOC,WAAP,KAAuB,WAAvB,GAAqC,IAAIA,WAAJ,EAArC,GAAyD,IAA7G;AAEP;;;;;AAIA,OAAO,MAAMC,iBAAiB,GAAGb,GAAG,IAAIW,eAAe,CAACG,MAAhB,CAAuBd,GAAvB,CAAjC;AAEP;;;;;AAIA;;AACA,OAAO,MAAMe,UAAU,GAAGJ,eAAe,GAAGE,iBAAH,GAAuBT,mBAAzD;AAEP;;;;;AAIA,OAAO,MAAMY,mBAAmB,GAAGT,GAAG,IAAI;AACxC,MAAIU,YAAY,GAAGV,GAAG,CAACJ,MAAvB;AACA,MAAIE,aAAa,GAAG,EAApB;AACA,MAAIa,MAAM,GAAG,CAAb;;AACA,SAAOD,YAAY,GAAG,CAAtB,EAAyB;AACvB,UAAME,OAAO,GAAGF,YAAY,GAAG,KAAf,GAAuBA,YAAvB,GAAsC,KAAtD;AACA,UAAMG,KAAK,GAAGb,GAAG,CAACc,QAAJ,CAAaH,MAAb,EAAqBA,MAAM,GAAGC,OAA9B,CAAd;AACAD,IAAAA,MAAM,IAAIC,OAAV,CAHuB,CAIvB;;AACAd,IAAAA,aAAa,IAAIjB,MAAM,CAACC,aAAP,CAAqBiC,KAArB,CAA2B,IAA3B;AAAiC;AAAoBF,IAAAA,KAArD,CAAjB;AACAH,IAAAA,YAAY,IAAIE,OAAhB;AACD;;AACD,SAAOI,kBAAkB,CAACC,MAAM,CAACnB,aAAD,CAAP,CAAzB;AACD,CAbM;AAeP;;AACA,OAAO,IAAIoB,eAAe,GAAG,OAAOC,WAAP,KAAuB,WAAvB,GAAqC,IAArC,GAA4C,IAAIA,WAAJ,CAAgB,OAAhB,EAAyB;AAAEC,EAAAA,KAAK,EAAE,IAAT;AAAeC,EAAAA,SAAS,EAAE;AAA1B,CAAzB,CAAlE;AAEP;;AACA,IAAIH,eAAe,IAAIA,eAAe,CAACI,MAAhB,CAAuB,IAAIrB,UAAJ,EAAvB,EAAyCL,MAAzC,KAAoD,CAA3E,EAA8E;AAC5E;AACA;AACA;AACA;AACA;;AACA;AACAsB,EAAAA,eAAe,GAAG,IAAlB;AACD;AAED;;;;;;AAIA,OAAO,MAAMK,iBAAiB,GAAGvB,GAAG;AAAI;AAA4BkB,eAAD,CAAkBI,MAAlB,CAAyBtB,GAAzB,CAA5D;AAEP;;;;;AAIA;;AACA,OAAO,MAAMwB,UAAU,GAAGN,eAAe,GAAGK,iBAAH,GAAuBd,mBAAzD","sourcesContent":["/**\n * Utility module to work with strings.\n *\n * @module string\n */\n\nexport const fromCharCode = String.fromCharCode\nexport const fromCodePoint = String.fromCodePoint\n\n/**\n * @param {string} s\n * @return {string}\n */\nconst toLowerCase = s => s.toLowerCase()\n\nconst trimLeftRegex = /^\\s*/g\n\n/**\n * @param {string} s\n * @return {string}\n */\nexport const trimLeft = s => s.replace(trimLeftRegex, '')\n\nconst fromCamelCaseRegex = /([A-Z])/g\n\n/**\n * @param {string} s\n * @param {string} separator\n * @return {string}\n */\nexport const fromCamelCase = (s, separator) => trimLeft(s.replace(fromCamelCaseRegex, match => `${separator}${toLowerCase(match)}`))\n\n/**\n * Compute the utf8ByteLength\n * @param {string} str\n * @return {number}\n */\nexport const utf8ByteLength = str => unescape(encodeURIComponent(str)).length\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nexport const _encodeUtf8Polyfill = str => {\n  const encodedString = unescape(encodeURIComponent(str))\n  const len = encodedString.length\n  const buf = new Uint8Array(len)\n  for (let i = 0; i < len; i++) {\n    buf[i] = /** @type {number} */ (encodedString.codePointAt(i))\n  }\n  return buf\n}\n\n/* istanbul ignore next */\nexport const utf8TextEncoder = /** @type {TextEncoder} */ (typeof TextEncoder !== 'undefined' ? new TextEncoder() : null)\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nexport const _encodeUtf8Native = str => utf8TextEncoder.encode(str)\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\n/* istanbul ignore next */\nexport const encodeUtf8 = utf8TextEncoder ? _encodeUtf8Native : _encodeUtf8Polyfill\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\nexport const _decodeUtf8Polyfill = buf => {\n  let remainingLen = buf.length\n  let encodedString = ''\n  let bufPos = 0\n  while (remainingLen > 0) {\n    const nextLen = remainingLen < 10000 ? remainingLen : 10000\n    const bytes = buf.subarray(bufPos, bufPos + nextLen)\n    bufPos += nextLen\n    // Starting with ES5.1 we can supply a generic array-like object as arguments\n    encodedString += String.fromCodePoint.apply(null, /** @type {any} */ (bytes))\n    remainingLen -= nextLen\n  }\n  return decodeURIComponent(escape(encodedString))\n}\n\n/* istanbul ignore next */\nexport let utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8', { fatal: true, ignoreBOM: true })\n\n/* istanbul ignore next */\nif (utf8TextDecoder && utf8TextDecoder.decode(new Uint8Array()).length === 1) {\n  // Safari doesn't handle BOM correctly.\n  // This fixes a bug in Safari 13.0.5 where it produces a BOM the first time it is called.\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the first call and\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the second call\n  // Another issue is that from then on no BOM chars are recognized anymore\n  /* istanbul ignore next */\n  utf8TextDecoder = null\n}\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\nexport const _decodeUtf8Native = buf => /** @type {TextDecoder} */ (utf8TextDecoder).decode(buf)\n\n/**\n * @param {Uint8Array} buf\n * @return {string}\n */\n/* istanbul ignore next */\nexport const decodeUtf8 = utf8TextDecoder ? _decodeUtf8Native : _decodeUtf8Polyfill\n"]},"metadata":{},"sourceType":"module"}