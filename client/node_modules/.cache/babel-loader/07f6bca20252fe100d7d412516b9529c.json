{"ast":null,"code":"/* global localStorage */\n\n/**\n * Isomorphic variable storage.\n *\n * Uses LocalStorage in the browser and falls back to in-memory storage.\n *\n * @module storage\n */\n\n/* istanbul ignore next */\nclass VarStoragePolyfill {\n  constructor() {\n    this.map = new Map();\n  }\n  /**\n   * @param {string} key\n   * @param {any} value\n   */\n\n\n  setItem(key, value) {\n    this.map.set(key, value);\n  }\n  /**\n   * @param {string} key\n   */\n\n\n  getItem(key) {\n    return this.map.get(key);\n  }\n\n}\n/* istanbul ignore next */\n\n/**\n * @type {any}\n */\n\n\nlet _localStorage = new VarStoragePolyfill();\n\ntry {\n  // if the same-origin rule is violated, accessing localStorage might thrown an error\n\n  /* istanbul ignore next */\n  if (typeof localStorage !== 'undefined') {\n    _localStorage = localStorage;\n  }\n} catch (e) {}\n/* istanbul ignore next */\n\n/**\n * This is basically localStorage in browser, or a polyfill in nodejs\n */\n\n\nexport const varStorage = _localStorage;","map":{"version":3,"sources":["/Users/meeopp/Development/Others/editor-yjs/client/node_modules/lib0/storage.js"],"names":["VarStoragePolyfill","constructor","map","Map","setItem","key","value","set","getItem","get","_localStorage","localStorage","e","varStorage"],"mappings":"AAAA;;AAEA;;;;;;;;AAQA;AACA,MAAMA,kBAAN,CAAyB;AACvBC,EAAAA,WAAW,GAAI;AACb,SAAKC,GAAL,GAAW,IAAIC,GAAJ,EAAX;AACD;AAED;;;;;;AAIAC,EAAAA,OAAO,CAAEC,GAAF,EAAOC,KAAP,EAAc;AACnB,SAAKJ,GAAL,CAASK,GAAT,CAAaF,GAAb,EAAkBC,KAAlB;AACD;AAED;;;;;AAGAE,EAAAA,OAAO,CAAEH,GAAF,EAAO;AACZ,WAAO,KAAKH,GAAL,CAASO,GAAT,CAAaJ,GAAb,CAAP;AACD;;AAlBsB;AAqBzB;;AACA;;;;;AAGA,IAAIK,aAAa,GAAG,IAAIV,kBAAJ,EAApB;;AAEA,IAAI;AACF;;AACA;AACA,MAAI,OAAOW,YAAP,KAAwB,WAA5B,EAAyC;AACvCD,IAAAA,aAAa,GAAGC,YAAhB;AACD;AACF,CAND,CAME,OAAOC,CAAP,EAAU,CAAG;AAEf;;AACA;;;;;AAGA,OAAO,MAAMC,UAAU,GAAGH,aAAnB","sourcesContent":["/* global localStorage */\n\n/**\n * Isomorphic variable storage.\n *\n * Uses LocalStorage in the browser and falls back to in-memory storage.\n *\n * @module storage\n */\n\n/* istanbul ignore next */\nclass VarStoragePolyfill {\n  constructor () {\n    this.map = new Map()\n  }\n\n  /**\n   * @param {string} key\n   * @param {any} value\n   */\n  setItem (key, value) {\n    this.map.set(key, value)\n  }\n\n  /**\n   * @param {string} key\n   */\n  getItem (key) {\n    return this.map.get(key)\n  }\n}\n\n/* istanbul ignore next */\n/**\n * @type {any}\n */\nlet _localStorage = new VarStoragePolyfill()\n\ntry {\n  // if the same-origin rule is violated, accessing localStorage might thrown an error\n  /* istanbul ignore next */\n  if (typeof localStorage !== 'undefined') {\n    _localStorage = localStorage\n  }\n} catch (e) { }\n\n/* istanbul ignore next */\n/**\n * This is basically localStorage in browser, or a polyfill in nodejs\n */\nexport const varStorage = _localStorage\n"]},"metadata":{},"sourceType":"module"}