{"ast":null,"code":"import { wrapItem, blockTypeItem, Dropdown, DropdownSubmenu, joinUpItem, liftItem, selectParentNodeItem, undoItem, redoItem, icons, MenuItem } from \"prosemirror-menu\";\nimport { NodeSelection } from \"prosemirror-state\";\nimport { toggleMark } from \"prosemirror-commands\";\nimport { wrapInList } from \"prosemirror-schema-list\";\nimport { TextField, openPrompt } from \"./prompt\"; // Helpers to create specific types of items\n\nfunction canInsert(state, nodeType) {\n  let $from = state.selection.$from;\n\n  for (let d = $from.depth; d >= 0; d--) {\n    let index = $from.index(d);\n    if ($from.node(d).canReplaceWith(index, index, nodeType)) return true;\n  }\n\n  return false;\n}\n\nfunction insertImageItem(nodeType) {\n  return new MenuItem({\n    title: \"Insert image\",\n    label: \"Image\",\n\n    enable(state) {\n      return canInsert(state, nodeType);\n    },\n\n    run(state, _, view) {\n      let {\n        from,\n        to\n      } = state.selection,\n          attrs = null;\n      if (state.selection instanceof NodeSelection && state.selection.node.type == nodeType) attrs = state.selection.node.attrs;\n      openPrompt({\n        title: \"Insert image\",\n        fields: {\n          src: new TextField({\n            label: \"Location\",\n            required: true,\n            value: attrs && attrs.src\n          }),\n          title: new TextField({\n            label: \"Title\",\n            value: attrs && attrs.title\n          }),\n          alt: new TextField({\n            label: \"Description\",\n            value: attrs ? attrs.alt : state.doc.textBetween(from, to, \" \")\n          })\n        },\n\n        callback(attrs) {\n          view.dispatch(view.state.tr.replaceSelectionWith(nodeType.createAndFill(attrs)));\n          view.focus();\n        }\n\n      });\n    }\n\n  });\n}\n\nfunction cmdItem(cmd, options) {\n  let passedOptions = {\n    label: options.title,\n    run: cmd\n  };\n\n  for (let prop in options) passedOptions[prop] = options[prop];\n\n  if ((!options.enable || options.enable === true) && !options.select) passedOptions[options.enable ? \"enable\" : \"select\"] = state => cmd(state);\n  return new MenuItem(passedOptions);\n}\n\nfunction markActive(state, type) {\n  let {\n    from,\n    $from,\n    to,\n    empty\n  } = state.selection;\n  if (empty) return type.isInSet(state.storedMarks || $from.marks());else return state.doc.rangeHasMark(from, to, type);\n}\n\nfunction markItem(markType, options) {\n  let passedOptions = {\n    active(state) {\n      return markActive(state, markType);\n    },\n\n    enable: true\n  };\n\n  for (let prop in options) passedOptions[prop] = options[prop];\n\n  return cmdItem(toggleMark(markType), passedOptions);\n}\n\nfunction linkItem(markType) {\n  return new MenuItem({\n    title: \"Add or remove link\",\n    icon: icons.link,\n\n    active(state) {\n      return markActive(state, markType);\n    },\n\n    enable(state) {\n      return !state.selection.empty;\n    },\n\n    run(state, dispatch, view) {\n      if (markActive(state, markType)) {\n        toggleMark(markType)(state, dispatch);\n        return true;\n      }\n\n      openPrompt({\n        title: \"Create a link\",\n        fields: {\n          href: new TextField({\n            label: \"Link target\",\n            required: true\n          }),\n          title: new TextField({\n            label: \"Title\"\n          })\n        },\n\n        callback(attrs) {\n          toggleMark(markType, attrs)(view.state, view.dispatch);\n          view.focus();\n        }\n\n      });\n    }\n\n  });\n}\n\nfunction wrapListItem(nodeType, options) {\n  return cmdItem(wrapInList(nodeType, options.attrs), options);\n} // :: (Schema) â†’ Object\n// Given a schema, look for default mark and node types in it and\n// return an object with relevant menu items relating to those marks:\n//\n// **`toggleStrong`**`: MenuItem`\n//   : A menu item to toggle the [strong mark](#schema-basic.StrongMark).\n//\n// **`toggleEm`**`: MenuItem`\n//   : A menu item to toggle the [emphasis mark](#schema-basic.EmMark).\n//\n// **`toggleCode`**`: MenuItem`\n//   : A menu item to toggle the [code font mark](#schema-basic.CodeMark).\n//\n// **`toggleLink`**`: MenuItem`\n//   : A menu item to toggle the [link mark](#schema-basic.LinkMark).\n//\n// **`insertImage`**`: MenuItem`\n//   : A menu item to insert an [image](#schema-basic.Image).\n//\n// **`wrapBulletList`**`: MenuItem`\n//   : A menu item to wrap the selection in a [bullet list](#schema-list.BulletList).\n//\n// **`wrapOrderedList`**`: MenuItem`\n//   : A menu item to wrap the selection in an [ordered list](#schema-list.OrderedList).\n//\n// **`wrapBlockQuote`**`: MenuItem`\n//   : A menu item to wrap the selection in a [block quote](#schema-basic.BlockQuote).\n//\n// **`makeParagraph`**`: MenuItem`\n//   : A menu item to set the current textblock to be a normal\n//     [paragraph](#schema-basic.Paragraph).\n//\n// **`makeCodeBlock`**`: MenuItem`\n//   : A menu item to set the current textblock to be a\n//     [code block](#schema-basic.CodeBlock).\n//\n// **`makeHead[N]`**`: MenuItem`\n//   : Where _N_ is 1 to 6. Menu items to set the current textblock to\n//     be a [heading](#schema-basic.Heading) of level _N_.\n//\n// **`insertHorizontalRule`**`: MenuItem`\n//   : A menu item to insert a horizontal rule.\n//\n// The return value also contains some prefabricated menu elements and\n// menus, that you can use instead of composing your own menu from\n// scratch:\n//\n// **`insertMenu`**`: Dropdown`\n//   : A dropdown containing the `insertImage` and\n//     `insertHorizontalRule` items.\n//\n// **`typeMenu`**`: Dropdown`\n//   : A dropdown containing the items for making the current\n//     textblock a paragraph, code block, or heading.\n//\n// **`fullMenu`**`: [[MenuElement]]`\n//   : An array of arrays of menu elements for use as the full menu\n//     for, for example the [menu bar](https://github.com/prosemirror/prosemirror-menu#user-content-menubar).\n\n\nexport function buildMenuItems(schema) {\n  let r = {},\n      type;\n  if (type = schema.marks.strong) r.toggleStrong = markItem(type, {\n    title: \"Toggle strong style\",\n    icon: icons.strong\n  });\n  if (type = schema.marks.em) r.toggleEm = markItem(type, {\n    title: \"Toggle emphasis\",\n    icon: icons.em\n  });\n  if (type = schema.marks.code) r.toggleCode = markItem(type, {\n    title: \"Toggle code font\",\n    icon: icons.code\n  });\n  if (type = schema.marks.link) r.toggleLink = linkItem(type);\n  if (type = schema.nodes.image) r.insertImage = insertImageItem(type);\n  if (type = schema.nodes.bullet_list) r.wrapBulletList = wrapListItem(type, {\n    title: \"Wrap in bullet list\",\n    icon: icons.bulletList\n  });\n  if (type = schema.nodes.ordered_list) r.wrapOrderedList = wrapListItem(type, {\n    title: \"Wrap in ordered list\",\n    icon: icons.orderedList\n  });\n  if (type = schema.nodes.blockquote) r.wrapBlockQuote = wrapItem(type, {\n    title: \"Wrap in block quote\",\n    icon: icons.blockquote\n  });\n  if (type = schema.nodes.paragraph) r.makeParagraph = blockTypeItem(type, {\n    title: \"Change to paragraph\",\n    label: \"Plain\"\n  });\n  if (type = schema.nodes.code_block) r.makeCodeBlock = blockTypeItem(type, {\n    title: \"Change to code block\",\n    label: \"Code\"\n  });\n  if (type = schema.nodes.heading) for (let i = 1; i <= 10; i++) r[\"makeHead\" + i] = blockTypeItem(type, {\n    title: \"Change to heading \" + i,\n    label: \"Level \" + i,\n    attrs: {\n      level: i\n    }\n  });\n\n  if (type = schema.nodes.horizontal_rule) {\n    let hr = type;\n    r.insertHorizontalRule = new MenuItem({\n      title: \"Insert horizontal rule\",\n      label: \"Horizontal rule\",\n\n      enable(state) {\n        return canInsert(state, hr);\n      },\n\n      run(state, dispatch) {\n        dispatch(state.tr.replaceSelectionWith(hr.create()));\n      }\n\n    });\n  }\n\n  let cut = arr => arr.filter(x => x);\n\n  r.insertMenu = new Dropdown(cut([r.insertImage, r.insertHorizontalRule]), {\n    label: \"Insert\"\n  });\n  r.typeMenu = new Dropdown(cut([r.makeParagraph, r.makeCodeBlock, r.makeHead1 && new DropdownSubmenu(cut([r.makeHead1, r.makeHead2, r.makeHead3, r.makeHead4, r.makeHead5, r.makeHead6]), {\n    label: \"Heading\"\n  })]), {\n    label: \"Type...\"\n  });\n  r.inlineMenu = [cut([r.toggleStrong, r.toggleEm, r.toggleCode, r.toggleLink])];\n  r.blockMenu = [cut([r.wrapBulletList, r.wrapOrderedList, r.wrapBlockQuote, joinUpItem, liftItem, selectParentNodeItem])];\n  r.fullMenu = r.inlineMenu.concat([[r.insertMenu, r.typeMenu]], [[undoItem, redoItem]], r.blockMenu);\n  return r;\n}","map":{"version":3,"sources":["/Users/meeopp/Development/Others/editor-yjs/client/src/prosmirror/menu.js"],"names":["wrapItem","blockTypeItem","Dropdown","DropdownSubmenu","joinUpItem","liftItem","selectParentNodeItem","undoItem","redoItem","icons","MenuItem","NodeSelection","toggleMark","wrapInList","TextField","openPrompt","canInsert","state","nodeType","$from","selection","d","depth","index","node","canReplaceWith","insertImageItem","title","label","enable","run","_","view","from","to","attrs","type","fields","src","required","value","alt","doc","textBetween","callback","dispatch","tr","replaceSelectionWith","createAndFill","focus","cmdItem","cmd","options","passedOptions","prop","select","markActive","empty","isInSet","storedMarks","marks","rangeHasMark","markItem","markType","active","linkItem","icon","link","href","wrapListItem","buildMenuItems","schema","r","strong","toggleStrong","em","toggleEm","code","toggleCode","toggleLink","nodes","image","insertImage","bullet_list","wrapBulletList","bulletList","ordered_list","wrapOrderedList","orderedList","blockquote","wrapBlockQuote","paragraph","makeParagraph","code_block","makeCodeBlock","heading","i","level","horizontal_rule","hr","insertHorizontalRule","create","cut","arr","filter","x","insertMenu","typeMenu","makeHead1","makeHead2","makeHead3","makeHead4","makeHead5","makeHead6","inlineMenu","blockMenu","fullMenu","concat"],"mappings":"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","sourcesContent":["import {wrapItem, blockTypeItem, Dropdown, DropdownSubmenu, joinUpItem, liftItem,\n  selectParentNodeItem, undoItem, redoItem, icons, MenuItem} from \"prosemirror-menu\"\nimport {NodeSelection} from \"prosemirror-state\"\nimport {toggleMark} from \"prosemirror-commands\"\nimport {wrapInList} from \"prosemirror-schema-list\"\nimport {TextField, openPrompt} from \"./prompt\"\n\n// Helpers to create specific types of items\n\nfunction canInsert(state, nodeType) {\n  let $from = state.selection.$from\n  for (let d = $from.depth; d >= 0; d--) {\n    let index = $from.index(d)\n    if ($from.node(d).canReplaceWith(index, index, nodeType)) return true\n  }\n  return false\n}\n\nfunction insertImageItem(nodeType) {\n  return new MenuItem({\n    title: \"Insert image\",\n    label: \"Image\",\n    enable(state) { return canInsert(state, nodeType) },\n    run(state, _, view) {\n      let {from, to} = state.selection, attrs = null\n      if (state.selection instanceof NodeSelection && state.selection.node.type == nodeType)\n        attrs = state.selection.node.attrs\n      openPrompt({\n        title: \"Insert image\",\n        fields: {\n          src: new TextField({label: \"Location\", required: true, value: attrs && attrs.src}),\n          title: new TextField({label: \"Title\", value: attrs && attrs.title}),\n          alt: new TextField({label: \"Description\",\n            value: attrs ? attrs.alt : state.doc.textBetween(from, to, \" \")})\n        },\n        callback(attrs) {\n          view.dispatch(view.state.tr.replaceSelectionWith(nodeType.createAndFill(attrs)))\n          view.focus()\n        }\n      })\n    }\n  })\n}\n\nfunction cmdItem(cmd, options) {\n  let passedOptions = {\n    label: options.title,\n    run: cmd\n  }\n  for (let prop in options) passedOptions[prop] = options[prop]\n  if ((!options.enable || options.enable === true) && !options.select)\n    passedOptions[options.enable ? \"enable\" : \"select\"] = state => cmd(state)\n\n  return new MenuItem(passedOptions)\n}\n\nfunction markActive(state, type) {\n  let {from, $from, to, empty} = state.selection\n  if (empty) return type.isInSet(state.storedMarks || $from.marks())\n  else return state.doc.rangeHasMark(from, to, type)\n}\n\nfunction markItem(markType, options) {\n  let passedOptions = {\n    active(state) { return markActive(state, markType) },\n    enable: true\n  }\n  for (let prop in options) passedOptions[prop] = options[prop]\n  return cmdItem(toggleMark(markType), passedOptions)\n}\n\nfunction linkItem(markType) {\n  return new MenuItem({\n    title: \"Add or remove link\",\n    icon: icons.link,\n    active(state) { return markActive(state, markType) },\n    enable(state) { return !state.selection.empty },\n    run(state, dispatch, view) {\n      if (markActive(state, markType)) {\n        toggleMark(markType)(state, dispatch)\n        return true\n      }\n      openPrompt({\n        title: \"Create a link\",\n        fields: {\n          href: new TextField({\n            label: \"Link target\",\n            required: true\n          }),\n          title: new TextField({label: \"Title\"})\n        },\n        callback(attrs) {\n          toggleMark(markType, attrs)(view.state, view.dispatch)\n          view.focus()\n        }\n      })\n    }\n  })\n}\n\nfunction wrapListItem(nodeType, options) {\n  return cmdItem(wrapInList(nodeType, options.attrs), options)\n}\n\n// :: (Schema) â†’ Object\n// Given a schema, look for default mark and node types in it and\n// return an object with relevant menu items relating to those marks:\n//\n// **`toggleStrong`**`: MenuItem`\n//   : A menu item to toggle the [strong mark](#schema-basic.StrongMark).\n//\n// **`toggleEm`**`: MenuItem`\n//   : A menu item to toggle the [emphasis mark](#schema-basic.EmMark).\n//\n// **`toggleCode`**`: MenuItem`\n//   : A menu item to toggle the [code font mark](#schema-basic.CodeMark).\n//\n// **`toggleLink`**`: MenuItem`\n//   : A menu item to toggle the [link mark](#schema-basic.LinkMark).\n//\n// **`insertImage`**`: MenuItem`\n//   : A menu item to insert an [image](#schema-basic.Image).\n//\n// **`wrapBulletList`**`: MenuItem`\n//   : A menu item to wrap the selection in a [bullet list](#schema-list.BulletList).\n//\n// **`wrapOrderedList`**`: MenuItem`\n//   : A menu item to wrap the selection in an [ordered list](#schema-list.OrderedList).\n//\n// **`wrapBlockQuote`**`: MenuItem`\n//   : A menu item to wrap the selection in a [block quote](#schema-basic.BlockQuote).\n//\n// **`makeParagraph`**`: MenuItem`\n//   : A menu item to set the current textblock to be a normal\n//     [paragraph](#schema-basic.Paragraph).\n//\n// **`makeCodeBlock`**`: MenuItem`\n//   : A menu item to set the current textblock to be a\n//     [code block](#schema-basic.CodeBlock).\n//\n// **`makeHead[N]`**`: MenuItem`\n//   : Where _N_ is 1 to 6. Menu items to set the current textblock to\n//     be a [heading](#schema-basic.Heading) of level _N_.\n//\n// **`insertHorizontalRule`**`: MenuItem`\n//   : A menu item to insert a horizontal rule.\n//\n// The return value also contains some prefabricated menu elements and\n// menus, that you can use instead of composing your own menu from\n// scratch:\n//\n// **`insertMenu`**`: Dropdown`\n//   : A dropdown containing the `insertImage` and\n//     `insertHorizontalRule` items.\n//\n// **`typeMenu`**`: Dropdown`\n//   : A dropdown containing the items for making the current\n//     textblock a paragraph, code block, or heading.\n//\n// **`fullMenu`**`: [[MenuElement]]`\n//   : An array of arrays of menu elements for use as the full menu\n//     for, for example the [menu bar](https://github.com/prosemirror/prosemirror-menu#user-content-menubar).\nexport function buildMenuItems(schema) {\n  let r = {}, type\n  if (type = schema.marks.strong)\n    r.toggleStrong = markItem(type, {title: \"Toggle strong style\", icon: icons.strong})\n  if (type = schema.marks.em)\n    r.toggleEm = markItem(type, {title: \"Toggle emphasis\", icon: icons.em})\n  if (type = schema.marks.code)\n    r.toggleCode = markItem(type, {title: \"Toggle code font\", icon: icons.code})\n  if (type = schema.marks.link)\n    r.toggleLink = linkItem(type)\n\n  if (type = schema.nodes.image)\n    r.insertImage = insertImageItem(type)\n  if (type = schema.nodes.bullet_list)\n    r.wrapBulletList = wrapListItem(type, {\n      title: \"Wrap in bullet list\",\n      icon: icons.bulletList\n    })\n  if (type = schema.nodes.ordered_list)\n    r.wrapOrderedList = wrapListItem(type, {\n      title: \"Wrap in ordered list\",\n      icon: icons.orderedList\n    })\n  if (type = schema.nodes.blockquote)\n    r.wrapBlockQuote = wrapItem(type, {\n      title: \"Wrap in block quote\",\n      icon: icons.blockquote\n    })\n  if (type = schema.nodes.paragraph)\n    r.makeParagraph = blockTypeItem(type, {\n      title: \"Change to paragraph\",\n      label: \"Plain\"\n    })\n  if (type = schema.nodes.code_block)\n    r.makeCodeBlock = blockTypeItem(type, {\n      title: \"Change to code block\",\n      label: \"Code\"\n    })\n  if (type = schema.nodes.heading)\n    for (let i = 1; i <= 10; i++)\n      r[\"makeHead\" + i] = blockTypeItem(type, {\n        title: \"Change to heading \" + i,\n        label: \"Level \" + i,\n        attrs: {level: i}\n      })\n  if (type = schema.nodes.horizontal_rule) {\n    let hr = type\n    r.insertHorizontalRule = new MenuItem({\n      title: \"Insert horizontal rule\",\n      label: \"Horizontal rule\",\n      enable(state) { return canInsert(state, hr) },\n      run(state, dispatch) { dispatch(state.tr.replaceSelectionWith(hr.create())) }\n    })\n  }\n\n  let cut = arr => arr.filter(x => x)\n  r.insertMenu = new Dropdown(cut([r.insertImage, r.insertHorizontalRule]), {label: \"Insert\"})\n  r.typeMenu = new Dropdown(cut([r.makeParagraph, r.makeCodeBlock, r.makeHead1 && new DropdownSubmenu(cut([\n    r.makeHead1, r.makeHead2, r.makeHead3, r.makeHead4, r.makeHead5, r.makeHead6\n  ]), {label: \"Heading\"})]), {label: \"Type...\"})\n\n  r.inlineMenu = [cut([r.toggleStrong, r.toggleEm, r.toggleCode, r.toggleLink])]\n  r.blockMenu = [cut([r.wrapBulletList, r.wrapOrderedList, r.wrapBlockQuote, joinUpItem,\n    liftItem, selectParentNodeItem])]\n  r.fullMenu = r.inlineMenu.concat([[r.insertMenu, r.typeMenu]], [[undoItem, redoItem]], r.blockMenu)\n\n  return r\n}\n"]},"metadata":{},"sourceType":"module"}