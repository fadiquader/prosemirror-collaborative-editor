{"ast":null,"code":"/**\n * Utility functions to work with buffers (Uint8Array).\n *\n * @module buffer\n */\nimport * as string from './string.js';\nimport * as env from './environment.js';\nimport * as encoding from './encoding.js';\nimport * as decoding from './decoding.js';\n/**\n * @param {number} len\n */\n\nexport const createUint8ArrayFromLen = len => new Uint8Array(len);\n/**\n * Create Uint8Array with initial content from buffer\n *\n * @param {ArrayBuffer} buffer\n * @param {number} byteOffset\n * @param {number} length\n */\n\nexport const createUint8ArrayViewFromArrayBuffer = (buffer, byteOffset, length) => new Uint8Array(buffer, byteOffset, length);\n/**\n * Create Uint8Array with initial content from buffer\n *\n * @param {ArrayBuffer} buffer\n */\n\nexport const createUint8ArrayFromArrayBuffer = buffer => new Uint8Array(buffer);\n/* istanbul ignore next */\n\n/**\n * @param {Uint8Array} bytes\n * @return {string}\n */\n\nconst toBase64Browser = bytes => {\n  let s = '';\n\n  for (let i = 0; i < bytes.byteLength; i++) {\n    s += string.fromCharCode(bytes[i]);\n  } // eslint-disable-next-line no-undef\n\n\n  return btoa(s);\n};\n/**\n * @param {Uint8Array} bytes\n * @return {string}\n */\n\n\nconst toBase64Node = bytes => Buffer.from(bytes.buffer, bytes.byteOffset, bytes.byteLength).toString('base64');\n/* istanbul ignore next */\n\n/**\n * @param {string} s\n * @return {Uint8Array}\n */\n\n\nconst fromBase64Browser = s => {\n  // eslint-disable-next-line no-undef\n  const a = atob(s);\n  const bytes = createUint8ArrayFromLen(a.length);\n\n  for (let i = 0; i < a.length; i++) {\n    bytes[i] = a.charCodeAt(i);\n  }\n\n  return bytes;\n};\n/**\n * @param {string} s\n */\n\n\nconst fromBase64Node = s => {\n  const buf = Buffer.from(s, 'base64');\n  return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n};\n/* istanbul ignore next */\n\n\nexport const toBase64 = env.isBrowser ? toBase64Browser : toBase64Node;\n/* istanbul ignore next */\n\nexport const fromBase64 = env.isBrowser ? fromBase64Browser : fromBase64Node;\n/**\n * Copy the content of an Uint8Array view to a new ArrayBuffer.\n *\n * @param {Uint8Array} uint8Array\n * @return {Uint8Array}\n */\n\nexport const copyUint8Array = uint8Array => {\n  const newBuf = createUint8ArrayFromLen(uint8Array.byteLength);\n  newBuf.set(uint8Array);\n  return newBuf;\n};\n/**\n * Encode anything as a UInt8Array. It's a pun on typescripts's `any` type.\n * See encoding.writeAny for more information.\n *\n * @param {any} data\n * @return {Uint8Array}\n */\n\nexport const encodeAny = data => {\n  const encoder = encoding.createEncoder();\n  encoding.writeAny(encoder, data);\n  return encoding.toUint8Array(encoder);\n};\n/**\n * Decode an any-encoded value.\n *\n * @param {Uint8Array} buf\n * @return {any}\n */\n\nexport const decodeAny = buf => decoding.readAny(decoding.createDecoder(buf));","map":{"version":3,"sources":["/Users/meeopp/Development/Others/editor-yjs/client/node_modules/lib0/buffer.js"],"names":["string","env","encoding","decoding","createUint8ArrayFromLen","len","Uint8Array","createUint8ArrayViewFromArrayBuffer","buffer","byteOffset","length","createUint8ArrayFromArrayBuffer","toBase64Browser","bytes","s","i","byteLength","fromCharCode","btoa","toBase64Node","Buffer","from","toString","fromBase64Browser","a","atob","charCodeAt","fromBase64Node","buf","toBase64","isBrowser","fromBase64","copyUint8Array","uint8Array","newBuf","set","encodeAny","data","encoder","createEncoder","writeAny","toUint8Array","decodeAny","readAny","createDecoder"],"mappings":"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","sourcesContent":["/**\n * Utility functions to work with buffers (Uint8Array).\n *\n * @module buffer\n */\n\nimport * as string from './string.js'\nimport * as env from './environment.js'\nimport * as encoding from './encoding.js'\nimport * as decoding from './decoding.js'\n\n/**\n * @param {number} len\n */\nexport const createUint8ArrayFromLen = len => new Uint8Array(len)\n\n/**\n * Create Uint8Array with initial content from buffer\n *\n * @param {ArrayBuffer} buffer\n * @param {number} byteOffset\n * @param {number} length\n */\nexport const createUint8ArrayViewFromArrayBuffer = (buffer, byteOffset, length) => new Uint8Array(buffer, byteOffset, length)\n\n/**\n * Create Uint8Array with initial content from buffer\n *\n * @param {ArrayBuffer} buffer\n */\nexport const createUint8ArrayFromArrayBuffer = buffer => new Uint8Array(buffer)\n\n/* istanbul ignore next */\n/**\n * @param {Uint8Array} bytes\n * @return {string}\n */\nconst toBase64Browser = bytes => {\n  let s = ''\n  for (let i = 0; i < bytes.byteLength; i++) {\n    s += string.fromCharCode(bytes[i])\n  }\n  // eslint-disable-next-line no-undef\n  return btoa(s)\n}\n\n/**\n * @param {Uint8Array} bytes\n * @return {string}\n */\nconst toBase64Node = bytes => Buffer.from(bytes.buffer, bytes.byteOffset, bytes.byteLength).toString('base64')\n\n/* istanbul ignore next */\n/**\n * @param {string} s\n * @return {Uint8Array}\n */\nconst fromBase64Browser = s => {\n  // eslint-disable-next-line no-undef\n  const a = atob(s)\n  const bytes = createUint8ArrayFromLen(a.length)\n  for (let i = 0; i < a.length; i++) {\n    bytes[i] = a.charCodeAt(i)\n  }\n  return bytes\n}\n\n/**\n * @param {string} s\n */\nconst fromBase64Node = s => {\n  const buf = Buffer.from(s, 'base64')\n  return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength)\n}\n\n/* istanbul ignore next */\nexport const toBase64 = env.isBrowser ? toBase64Browser : toBase64Node\n\n/* istanbul ignore next */\nexport const fromBase64 = env.isBrowser ? fromBase64Browser : fromBase64Node\n\n/**\n * Copy the content of an Uint8Array view to a new ArrayBuffer.\n *\n * @param {Uint8Array} uint8Array\n * @return {Uint8Array}\n */\nexport const copyUint8Array = uint8Array => {\n  const newBuf = createUint8ArrayFromLen(uint8Array.byteLength)\n  newBuf.set(uint8Array)\n  return newBuf\n}\n\n/**\n * Encode anything as a UInt8Array. It's a pun on typescripts's `any` type.\n * See encoding.writeAny for more information.\n *\n * @param {any} data\n * @return {Uint8Array}\n */\nexport const encodeAny = data => {\n  const encoder = encoding.createEncoder()\n  encoding.writeAny(encoder, data)\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * Decode an any-encoded value.\n *\n * @param {Uint8Array} buf\n * @return {any}\n */\nexport const decodeAny = buf => decoding.readAny(decoding.createDecoder(buf))\n"]},"metadata":{},"sourceType":"module"}