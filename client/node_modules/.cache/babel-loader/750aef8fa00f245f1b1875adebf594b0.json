{"ast":null,"code":"import { Schema } from 'prosemirror-model';\nconst brDOM = ['br'];\n\nconst calcYchangeDomAttrs = (attrs, domAttrs = {}) => {\n  domAttrs = Object.assign({}, domAttrs);\n\n  if (attrs.ychange !== null) {\n    domAttrs.ychange_user = attrs.ychange.user;\n    domAttrs.ychange_state = attrs.ychange.state;\n  }\n\n  return domAttrs;\n}; // :: Object\n// [Specs](#model.NodeSpec) for the nodes defined in this schema.\n\n\nexport const nodes = {\n  // :: NodeSpec The top level document node.\n  doc: {\n    content: 'block+'\n  },\n  // :: NodeSpec A plain paragraph textblock. Represented in the DOM\n  // as a `<p>` element.\n  paragraph: {\n    attrs: {\n      ychange: {\n        default: null\n      }\n    },\n    content: 'inline*',\n    group: 'block',\n    parseDOM: [{\n      tag: 'p'\n    }],\n\n    toDOM(node) {\n      return ['p', calcYchangeDomAttrs(node.attrs), 0];\n    }\n\n  },\n  // :: NodeSpec A blockquote (`<blockquote>`) wrapping one or more blocks.\n  blockquote: {\n    attrs: {\n      ychange: {\n        default: null\n      }\n    },\n    content: 'block+',\n    group: 'block',\n    defining: true,\n    parseDOM: [{\n      tag: 'blockquote'\n    }],\n\n    toDOM(node) {\n      return ['blockquote', calcYchangeDomAttrs(node.attrs), 0];\n    }\n\n  },\n  // :: NodeSpec A horizontal rule (`<hr>`).\n  horizontal_rule: {\n    attrs: {\n      ychange: {\n        default: null\n      }\n    },\n    group: 'block',\n    parseDOM: [{\n      tag: 'hr'\n    }],\n\n    toDOM(node) {\n      return ['hr', calcYchangeDomAttrs(node.attrs)];\n    }\n\n  },\n  // :: NodeSpec A heading textblock, with a `level` attribute that\n  // should hold the number 1 to 6. Parsed and serialized as `<h1>` to\n  // `<h6>` elements.\n  heading: {\n    attrs: {\n      level: {\n        default: 1\n      },\n      ychange: {\n        default: null\n      }\n    },\n    content: 'inline*',\n    group: 'block',\n    defining: true,\n    parseDOM: [{\n      tag: 'h1',\n      attrs: {\n        level: 1\n      }\n    }, {\n      tag: 'h2',\n      attrs: {\n        level: 2\n      }\n    }, {\n      tag: 'h3',\n      attrs: {\n        level: 3\n      }\n    }, {\n      tag: 'h4',\n      attrs: {\n        level: 4\n      }\n    }, {\n      tag: 'h5',\n      attrs: {\n        level: 5\n      }\n    }, {\n      tag: 'h6',\n      attrs: {\n        level: 6\n      }\n    }],\n\n    toDOM(node) {\n      return ['h' + node.attrs.level, calcYchangeDomAttrs(node.attrs), 0];\n    }\n\n  },\n  // :: NodeSpec A code listing. Disallows marks or non-text inline\n  // nodes by default. Represented as a `<pre>` element with a\n  // `<code>` element inside of it.\n  code_block: {\n    attrs: {\n      ychange: {\n        default: null\n      }\n    },\n    content: 'text*',\n    marks: '',\n    group: 'block',\n    code: true,\n    defining: true,\n    parseDOM: [{\n      tag: 'pre',\n      preserveWhitespace: 'full'\n    }],\n\n    toDOM(node) {\n      return ['pre', calcYchangeDomAttrs(node.attrs), ['code', 0]];\n    }\n\n  },\n  // :: NodeSpec The text node.\n  text: {\n    group: 'inline'\n  },\n  // :: NodeSpec An inline image (`<img>`) node. Supports `src`,\n  // `alt`, and `href` attributes. The latter two default to the empty\n  // string.\n  image: {\n    inline: true,\n    attrs: {\n      ychange: {\n        default: null\n      },\n      src: {},\n      alt: {\n        default: null\n      },\n      title: {\n        default: null\n      }\n    },\n    group: 'inline',\n    draggable: true,\n    parseDOM: [{\n      tag: 'img[src]',\n\n      getAttrs(dom) {\n        return {\n          src: dom.getAttribute('src'),\n          title: dom.getAttribute('title'),\n          alt: dom.getAttribute('alt')\n        };\n      }\n\n    }],\n\n    toDOM(node) {\n      const domAttrs = {\n        src: node.attrs.src,\n        title: node.attrs.title,\n        alt: node.attrs.alt\n      };\n      return ['img', calcYchangeDomAttrs(node.attrs, domAttrs)];\n    }\n\n  },\n  // :: NodeSpec A hard line break, represented in the DOM as `<br>`.\n  hard_break: {\n    inline: true,\n    group: 'inline',\n    selectable: false,\n    parseDOM: [{\n      tag: 'br'\n    }],\n\n    toDOM() {\n      return brDOM;\n    }\n\n  }\n};\nconst emDOM = ['em', 0];\nconst strongDOM = ['strong', 0];\nconst codeDOM = ['code', 0]; // :: Object [Specs](#model.MarkSpec) for the marks in the schema.\n\nexport const marks = {\n  // :: MarkSpec A link. Has `href` and `title` attributes. `title`\n  // defaults to the empty string. Rendered and parsed as an `<a>`\n  // element.\n  link: {\n    attrs: {\n      href: {},\n      title: {\n        default: null\n      }\n    },\n    inclusive: false,\n    parseDOM: [{\n      tag: 'a[href]',\n\n      getAttrs(dom) {\n        return {\n          href: dom.getAttribute('href'),\n          title: dom.getAttribute('title')\n        };\n      }\n\n    }],\n\n    toDOM(node) {\n      return ['a', node.attrs, 0];\n    }\n\n  },\n  // :: MarkSpec An emphasis mark. Rendered as an `<em>` element.\n  // Has parse rules that also match `<i>` and `font-style: italic`.\n  em: {\n    parseDOM: [{\n      tag: 'i'\n    }, {\n      tag: 'em'\n    }, {\n      style: 'font-style=italic'\n    }],\n\n    toDOM() {\n      return emDOM;\n    }\n\n  },\n  // :: MarkSpec A strong mark. Rendered as `<strong>`, parse rules\n  // also match `<b>` and `font-weight: bold`.\n  strong: {\n    parseDOM: [{\n      tag: 'strong'\n    }, // This works around a Google Docs misbehavior where\n    // pasted content will be inexplicably wrapped in `<b>`\n    // tags with a font-weight normal.\n    {\n      tag: 'b',\n      getAttrs: node => node.style.fontWeight !== 'normal' && null\n    }, {\n      style: 'font-weight',\n      getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null\n    }],\n\n    toDOM() {\n      return strongDOM;\n    }\n\n  },\n  // :: MarkSpec Code font mark. Represented as a `<code>` element.\n  code: {\n    parseDOM: [{\n      tag: 'code'\n    }],\n\n    toDOM() {\n      return codeDOM;\n    }\n\n  },\n  ychange: {\n    attrs: {\n      user: {\n        default: null\n      },\n      state: {\n        default: null\n      }\n    },\n    inclusive: false,\n    parseDOM: [{\n      tag: 'ychange'\n    }],\n\n    toDOM(node) {\n      return ['ychange', {\n        ychange_user: node.attrs.user,\n        ychange_state: node.attrs.state\n      }, 0];\n    }\n\n  }\n}; // :: Schema\n// This schema rougly corresponds to the document schema used by\n// [CommonMark](http://commonmark.org/), minus the list elements,\n// which are defined in the [`prosemirror-schema-list`](#schema-list)\n// module.\n//\n// To reuse elements from this schema, extend or read from its\n// `spec.nodes` and `spec.marks` [properties](#model.Schema.spec).\n\nexport const schema = new Schema({\n  nodes,\n  marks\n});","map":{"version":3,"sources":["/Users/meeopp/Development/Others/editor-yjs/client/src/prosmirror/schema.js"],"names":["Schema","brDOM","calcYchangeDomAttrs","attrs","domAttrs","Object","assign","ychange","ychange_user","user","ychange_state","state","nodes","doc","content","paragraph","default","group","parseDOM","tag","toDOM","node","blockquote","defining","horizontal_rule","heading","level","code_block","marks","code","preserveWhitespace","text","image","inline","src","alt","title","draggable","getAttrs","dom","getAttribute","hard_break","selectable","emDOM","strongDOM","codeDOM","link","href","inclusive","em","style","strong","fontWeight","value","test","schema"],"mappings":"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","sourcesContent":["import { Schema } from 'prosemirror-model'\n\nconst brDOM = ['br'];\n\nconst calcYchangeDomAttrs = (attrs, domAttrs = {}) => {\n  domAttrs = Object.assign({}, domAttrs);\n  if (attrs.ychange !== null) {\n    domAttrs.ychange_user = attrs.ychange.user;\n    domAttrs.ychange_state = attrs.ychange.state;\n  }\n  return domAttrs;\n};\n\n// :: Object\n// [Specs](#model.NodeSpec) for the nodes defined in this schema.\nexport const nodes = {\n  // :: NodeSpec The top level document node.\n  doc: {\n    content: 'block+'\n  },\n\n  // :: NodeSpec A plain paragraph textblock. Represented in the DOM\n  // as a `<p>` element.\n  paragraph: {\n    attrs: { ychange: { default: null } },\n    content: 'inline*',\n    group: 'block',\n    parseDOM: [{ tag: 'p' }],\n    toDOM (node) { return ['p', calcYchangeDomAttrs(node.attrs), 0] }\n  },\n\n  // :: NodeSpec A blockquote (`<blockquote>`) wrapping one or more blocks.\n  blockquote: {\n    attrs: { ychange: { default: null } },\n    content: 'block+',\n    group: 'block',\n    defining: true,\n    parseDOM: [{ tag: 'blockquote' }],\n    toDOM (node) { return ['blockquote', calcYchangeDomAttrs(node.attrs), 0] }\n  },\n\n  // :: NodeSpec A horizontal rule (`<hr>`).\n  horizontal_rule: {\n    attrs: { ychange: { default: null } },\n    group: 'block',\n    parseDOM: [{ tag: 'hr' }],\n    toDOM (node) {\n      return ['hr', calcYchangeDomAttrs(node.attrs)]\n    }\n  },\n\n  // :: NodeSpec A heading textblock, with a `level` attribute that\n  // should hold the number 1 to 6. Parsed and serialized as `<h1>` to\n  // `<h6>` elements.\n  heading: {\n    attrs: {\n      level: { default: 1 },\n      ychange: { default: null }\n    },\n    content: 'inline*',\n    group: 'block',\n    defining: true,\n    parseDOM: [{ tag: 'h1', attrs: { level: 1 } },\n      { tag: 'h2', attrs: { level: 2 } },\n      { tag: 'h3', attrs: { level: 3 } },\n      { tag: 'h4', attrs: { level: 4 } },\n      { tag: 'h5', attrs: { level: 5 } },\n      { tag: 'h6', attrs: { level: 6 } }],\n    toDOM (node) { return ['h' + node.attrs.level, calcYchangeDomAttrs(node.attrs), 0] }\n  },\n\n  // :: NodeSpec A code listing. Disallows marks or non-text inline\n  // nodes by default. Represented as a `<pre>` element with a\n  // `<code>` element inside of it.\n  code_block: {\n    attrs: { ychange: { default: null } },\n    content: 'text*',\n    marks: '',\n    group: 'block',\n    code: true,\n    defining: true,\n    parseDOM: [{ tag: 'pre', preserveWhitespace: 'full' }],\n    toDOM (node) { return ['pre', calcYchangeDomAttrs(node.attrs), ['code', 0]] }\n  },\n\n  // :: NodeSpec The text node.\n  text: {\n    group: 'inline'\n  },\n\n  // :: NodeSpec An inline image (`<img>`) node. Supports `src`,\n  // `alt`, and `href` attributes. The latter two default to the empty\n  // string.\n  image: {\n    inline: true,\n    attrs: {\n      ychange: { default: null },\n      src: {},\n      alt: { default: null },\n      title: { default: null }\n    },\n    group: 'inline',\n    draggable: true,\n    parseDOM: [{\n      tag: 'img[src]',\n      getAttrs (dom) {\n        return {\n          src: dom.getAttribute('src'),\n          title: dom.getAttribute('title'),\n          alt: dom.getAttribute('alt')\n        }\n      }\n    }],\n    toDOM (node) {\n      const domAttrs = {\n        src: node.attrs.src,\n        title: node.attrs.title,\n        alt: node.attrs.alt\n      }\n      return ['img', calcYchangeDomAttrs(node.attrs, domAttrs)]\n    }\n  },\n\n  // :: NodeSpec A hard line break, represented in the DOM as `<br>`.\n  hard_break: {\n    inline: true,\n    group: 'inline',\n    selectable: false,\n    parseDOM: [{ tag: 'br' }],\n    toDOM () { return brDOM }\n  }\n}\n\nconst emDOM = ['em', 0];\nconst strongDOM = ['strong', 0];\nconst codeDOM = ['code', 0];\n\n// :: Object [Specs](#model.MarkSpec) for the marks in the schema.\nexport const marks = {\n  // :: MarkSpec A link. Has `href` and `title` attributes. `title`\n  // defaults to the empty string. Rendered and parsed as an `<a>`\n  // element.\n  link: {\n    attrs: {\n      href: {},\n      title: { default: null }\n    },\n    inclusive: false,\n    parseDOM: [{\n      tag: 'a[href]',\n      getAttrs (dom) {\n        return { href: dom.getAttribute('href'), title: dom.getAttribute('title') }\n      }\n    }],\n    toDOM (node) { return ['a', node.attrs, 0] }\n  },\n\n  // :: MarkSpec An emphasis mark. Rendered as an `<em>` element.\n  // Has parse rules that also match `<i>` and `font-style: italic`.\n  em: {\n    parseDOM: [{ tag: 'i' }, { tag: 'em' }, { style: 'font-style=italic' }],\n    toDOM () { return emDOM }\n  },\n\n  // :: MarkSpec A strong mark. Rendered as `<strong>`, parse rules\n  // also match `<b>` and `font-weight: bold`.\n  strong: {\n    parseDOM: [{ tag: 'strong' },\n      // This works around a Google Docs misbehavior where\n      // pasted content will be inexplicably wrapped in `<b>`\n      // tags with a font-weight normal.\n      { tag: 'b', getAttrs: node => node.style.fontWeight !== 'normal' && null },\n      { style: 'font-weight', getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null }],\n    toDOM () { return strongDOM }\n  },\n\n  // :: MarkSpec Code font mark. Represented as a `<code>` element.\n  code: {\n    parseDOM: [{ tag: 'code' }],\n    toDOM () { return codeDOM }\n  },\n  ychange: {\n    attrs: {\n      user: { default: null },\n      state: { default: null }\n    },\n    inclusive: false,\n    parseDOM: [{ tag: 'ychange' }],\n    toDOM (node) {\n      return ['ychange', { ychange_user: node.attrs.user, ychange_state: node.attrs.state }, 0]\n    }\n  }\n};\n\n// :: Schema\n// This schema rougly corresponds to the document schema used by\n// [CommonMark](http://commonmark.org/), minus the list elements,\n// which are defined in the [`prosemirror-schema-list`](#schema-list)\n// module.\n//\n// To reuse elements from this schema, extend or read from its\n// `spec.nodes` and `spec.marks` [properties](#model.Schema.spec).\nexport const schema = new Schema({ nodes, marks });\n"]},"metadata":{},"sourceType":"module"}