{"ast":null,"code":"var _jsxFileName = \"/Users/meeopp/Development/Others/editor-yjs/client/src/prosmirror/ProsemirrorEditor.js\";\nimport React, { useEffect, useRef, useCallback, useState } from 'react';\nimport * as Y from \"yjs\";\nimport { WebsocketProvider } from 'y-websocket';\nimport { ySyncPlugin, yCursorPlugin, yUndoPlugin, undo, redo } from 'y-prosemirror';\nimport { EditorState, Plugin, PluginKey } from 'prosemirror-state';\nimport { EditorView } from 'prosemirror-view';\nimport { schema } from './schema';\nimport { keymap } from 'prosemirror-keymap';\nimport { DOMParser, DOMSerializer } from 'prosemirror-model';\nimport { setupEditor } from \"./setup-editor\"; // import {Toolbar} from \"./Toolbar\";\n\nimport './style.css';\n\nfunction useForceUpdate() {\n  const [, forceUpdate] = React.useState();\n  return useCallback(() => {\n    forceUpdate(s => !s);\n  }, []);\n}\n\nconst reactPropsKey = new PluginKey(\"reactProps\");\n\nfunction reactProps(initialProps) {\n  return new Plugin({\n    key: reactPropsKey,\n    state: {\n      init: () => initialProps,\n      apply: (tr, prev) => tr.getMeta(reactPropsKey) || prev\n    }\n  });\n}\n\nconst exportHTML = state => {\n  const jsonState = state.doc.toJSON();\n  console.log(jsonState);\n  const div = document.createElement('div');\n  const fragment = DOMSerializer.fromSchema(schema).serializeFragment(state.doc.content);\n  div.appendChild(fragment);\n  return div.innerHTML;\n};\n\nconst parseHTML = content => {\n  let domNode = document.createElement(\"div\");\n  domNode.innerHTML = content;\n  return DOMParser.fromSchema(schema).parse(domNode);\n};\n\nexport const ProsemirrorEditor = props => {\n  const forceUpdate = useForceUpdate();\n  const editorRef = useRef();\n  const ydoc = useRef();\n  const provider = useRef();\n  const prosemirrorView = useRef();\n  useEffect(() => {\n    ydoc.current = new Y.Doc();\n    provider.current = new WebsocketProvider('ws://localhost:8080', 'prosemirror', ydoc.current);\n    provider.current.connect();\n    const type = ydoc.current.getXmlFragment('prosemirror');\n    const plugins = [ySyncPlugin(type), yCursorPlugin(provider.current.awareness), yUndoPlugin(), keymap({\n      'Mod-z': undo,\n      'Mod-y': redo,\n      'Mod-Shift-z': redo,\n      \"Mod-s\": (state, dispatch) => {\n        const jsonState = state.doc.toJSON();\n        console.log(JSON.stringify(jsonState));\n        console.log(exportHTML(state));\n        return true;\n      }\n    }), reactProps(props)].concat(setupEditor({\n      schema\n    })); // '{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"attrs\":{\"ychange\":null},\"content\":[{\"type\":\"text\",\"text\":\"fadi\"}]}]}'\n\n    {\n      /*<p><strong>fadi</strong> </p><p>qua</p>*/\n    }\n    prosemirrorView.current = new EditorView(editorRef.current, {\n      state: EditorState.create({\n        schema,\n        plugins,\n        // doc: DOMParser.fromSchema(schema).parse()\n        doc: parseHTML('<p><strong>fadi</strong> </p><p>qua</p>')\n      })\n    });\n    forceUpdate();\n    return () => {\n      provider.current.disconnect();\n      prosemirrorView.current.destroy();\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"editor\",\n    ref: editorRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/meeopp/Development/Others/editor-yjs/client/src/prosmirror/ProsemirrorEditor.js"],"names":["React","useEffect","useRef","useCallback","useState","Y","WebsocketProvider","ySyncPlugin","yCursorPlugin","yUndoPlugin","undo","redo","EditorState","Plugin","PluginKey","EditorView","schema","keymap","DOMParser","DOMSerializer","setupEditor","useForceUpdate","forceUpdate","s","reactPropsKey","reactProps","initialProps","key","state","init","apply","tr","prev","getMeta","exportHTML","jsonState","doc","toJSON","console","log","div","document","createElement","fragment","fromSchema","serializeFragment","content","appendChild","innerHTML","parseHTML","domNode","parse","ProsemirrorEditor","props","editorRef","ydoc","provider","prosemirrorView","current","Doc","connect","type","getXmlFragment","plugins","awareness","dispatch","JSON","stringify","concat","create","disconnect","destroy"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useCallback, useState} from 'react'\nimport * as Y from \"yjs\";\nimport {WebsocketProvider} from 'y-websocket'\nimport {ySyncPlugin, yCursorPlugin, yUndoPlugin, undo, redo} from 'y-prosemirror'\nimport {EditorState, Plugin, PluginKey} from 'prosemirror-state'\nimport {EditorView} from 'prosemirror-view'\nimport {schema} from './schema'\nimport {keymap} from 'prosemirror-keymap'\nimport { DOMParser, DOMSerializer } from 'prosemirror-model'\nimport {setupEditor} from \"./setup-editor\";\n// import {Toolbar} from \"./Toolbar\";\nimport './style.css';\n\nfunction useForceUpdate() {\n  const [, forceUpdate] = React.useState();\n\n  return useCallback(() => {\n    forceUpdate(s => !s);\n  }, []);\n}\n\nconst reactPropsKey = new PluginKey(\"reactProps\");\n\nfunction reactProps(initialProps) {\n  return new Plugin({\n    key: reactPropsKey,\n    state: {\n      init: () => initialProps,\n      apply: (tr, prev) => tr.getMeta(reactPropsKey) || prev,\n    },\n  });\n}\n\nconst exportHTML = state => {\n  const jsonState = state.doc.toJSON()\n  console.log(jsonState)\n  const div = document.createElement('div')\n  const fragment = DOMSerializer\n    .fromSchema(schema)\n    .serializeFragment(state.doc.content)\n  div.appendChild(fragment)\n  return div.innerHTML;\n};\nconst parseHTML = content => {\n  let domNode = document.createElement(\"div\");\n  domNode.innerHTML = content;\n  return DOMParser.fromSchema(schema).parse(domNode);\n};\n\nexport const ProsemirrorEditor = props => {\n  const forceUpdate = useForceUpdate();\n  const editorRef = useRef();\n  const ydoc = useRef();\n  const provider = useRef();\n  const prosemirrorView = useRef();\n\n  useEffect(() => {\n    ydoc.current = new Y.Doc();\n    provider.current = new WebsocketProvider('ws://localhost:8080', 'prosemirror', ydoc.current);\n    provider.current.connect();\n\n    const type = ydoc.current.getXmlFragment('prosemirror');\n    const plugins = [\n      ySyncPlugin(type),\n      yCursorPlugin(provider.current.awareness),\n      yUndoPlugin(),\n      keymap({\n        'Mod-z': undo,\n        'Mod-y': redo,\n        'Mod-Shift-z': redo,\n        \"Mod-s\": (state, dispatch) => {\n          const jsonState = state.doc.toJSON()\n          console.log(JSON.stringify(jsonState))\n          console.log(exportHTML(state))\n          return true;\n        },\n      }),\n      reactProps(props)\n    ].concat(setupEditor({ schema }));\n    // '{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"attrs\":{\"ychange\":null},\"content\":[{\"type\":\"text\",\"text\":\"fadi\"}]}]}'\n    {/*<p><strong>fadi</strong> </p><p>qua</p>*/}\n    prosemirrorView.current = new EditorView(editorRef.current, {\n      state: EditorState.create({\n        schema,\n        plugins,\n        // doc: DOMParser.fromSchema(schema).parse()\n        doc: parseHTML('<p><strong>fadi</strong> </p><p>qua</p>')\n      })\n    });\n    forceUpdate();\n    return () => {\n      provider.current.disconnect();\n      prosemirrorView.current.destroy();\n    }\n  }, []);\n\n  return (\n    <div>\n      <div id=\"editor\" ref={editorRef}>\n        {/*<Toolbar*/}\n          {/*editorView={prosemirrorView.current}*/}\n          {/*editorWrapper={editorRef}*/}\n        {/*/>*/}\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}