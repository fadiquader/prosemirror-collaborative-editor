{"ast":null,"code":"/**\n * Utility module to work with Arrays.\n *\n * @module array\n */\n\n/**\n * Return the last element of an array. The element must exist\n *\n * @template L\n * @param {Array<L>} arr\n * @return {L}\n */\nexport const last = arr => arr[arr.length - 1];\n/**\n * @template C\n * @return {Array<C>}\n */\n\nexport const create = () =>\n/** @type {Array<C>} */\n[];\n/**\n * @template D\n * @param {Array<D>} a\n * @return {Array<D>}\n */\n\nexport const copy = a =>\n/** @type {Array<D>} */\na.slice();\n/**\n * Append elements from src to dest\n *\n * @template M\n * @param {Array<M>} dest\n * @param {Array<M>} src\n */\n\nexport const appendTo = (dest, src) => {\n  for (let i = 0; i < src.length; i++) {\n    dest.push(src[i]);\n  }\n};\n/**\n * Transforms something array-like to an actual Array.\n *\n * @function\n * @template T\n * @param {ArrayLike<T>|Iterable<T>} arraylike\n * @return {T}\n */\n\nexport const from = Array.from;\n/**\n * True iff condition holds on every element in the Array.\n *\n * @function\n * @template ITEM\n *\n * @param {Array<ITEM>} arr\n * @param {function(ITEM, number, Array<ITEM>):boolean} f\n * @return {boolean}\n */\n\nexport const every = (arr, f) => arr.every(f);\n/**\n * True iff condition holds on some element in the Array.\n *\n * @function\n * @template S\n * @param {Array<S>} arr\n * @param {function(S, number, Array<S>):boolean} f\n * @return {boolean}\n */\n\nexport const some = (arr, f) => arr.some(f);\n/**\n * @template ELEM\n *\n * @param {Array<ELEM>} a\n * @param {Array<ELEM>} b\n * @return {boolean}\n */\n\nexport const equalFlat = (a, b) => a.length === b.length && every(a, (item, index) => item === b[index]);","map":{"version":3,"sources":["/Users/meeopp/Development/Others/editor-yjs/client/node_modules/lib0/array.js"],"names":["last","arr","length","create","copy","a","slice","appendTo","dest","src","i","push","from","Array","every","f","some","equalFlat","b","item","index"],"mappings":"AAAA;;;;;;AAMA;;;;;;;AAOA,OAAO,MAAMA,IAAI,GAAGC,GAAG,IAAIA,GAAG,CAACA,GAAG,CAACC,MAAJ,GAAa,CAAd,CAAvB;AAEP;;;;;AAIA,OAAO,MAAMC,MAAM,GAAG;AAAM;AAAyB,EAA9C;AAEP;;;;;;AAKA,OAAO,MAAMC,IAAI,GAAGC,CAAC;AAAI;AAAyBA,CAAC,CAACC,KAAF,EAA3C;AAEP;;;;;;;;AAOA,OAAO,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,GAAP,KAAe;AACrC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACP,MAAxB,EAAgCQ,CAAC,EAAjC,EAAqC;AACnCF,IAAAA,IAAI,CAACG,IAAL,CAAUF,GAAG,CAACC,CAAD,CAAb;AACD;AACF,CAJM;AAMP;;;;;;;;;AAQA,OAAO,MAAME,IAAI,GAAGC,KAAK,CAACD,IAAnB;AAEP;;;;;;;;;;;AAUA,OAAO,MAAME,KAAK,GAAG,CAACb,GAAD,EAAMc,CAAN,KAAYd,GAAG,CAACa,KAAJ,CAAUC,CAAV,CAA1B;AAEP;;;;;;;;;;AASA,OAAO,MAAMC,IAAI,GAAG,CAACf,GAAD,EAAMc,CAAN,KAAYd,GAAG,CAACe,IAAJ,CAASD,CAAT,CAAzB;AAEP;;;;;;;;AAOA,OAAO,MAAME,SAAS,GAAG,CAACZ,CAAD,EAAIa,CAAJ,KAAUb,CAAC,CAACH,MAAF,KAAagB,CAAC,CAAChB,MAAf,IAAyBY,KAAK,CAACT,CAAD,EAAI,CAACc,IAAD,EAAOC,KAAP,KAAiBD,IAAI,KAAKD,CAAC,CAACE,KAAD,CAA/B,CAA1D","sourcesContent":["/**\n * Utility module to work with Arrays.\n *\n * @module array\n */\n\n/**\n * Return the last element of an array. The element must exist\n *\n * @template L\n * @param {Array<L>} arr\n * @return {L}\n */\nexport const last = arr => arr[arr.length - 1]\n\n/**\n * @template C\n * @return {Array<C>}\n */\nexport const create = () => /** @type {Array<C>} */ ([])\n\n/**\n * @template D\n * @param {Array<D>} a\n * @return {Array<D>}\n */\nexport const copy = a => /** @type {Array<D>} */ (a.slice())\n\n/**\n * Append elements from src to dest\n *\n * @template M\n * @param {Array<M>} dest\n * @param {Array<M>} src\n */\nexport const appendTo = (dest, src) => {\n  for (let i = 0; i < src.length; i++) {\n    dest.push(src[i])\n  }\n}\n\n/**\n * Transforms something array-like to an actual Array.\n *\n * @function\n * @template T\n * @param {ArrayLike<T>|Iterable<T>} arraylike\n * @return {T}\n */\nexport const from = Array.from\n\n/**\n * True iff condition holds on every element in the Array.\n *\n * @function\n * @template ITEM\n *\n * @param {Array<ITEM>} arr\n * @param {function(ITEM, number, Array<ITEM>):boolean} f\n * @return {boolean}\n */\nexport const every = (arr, f) => arr.every(f)\n\n/**\n * True iff condition holds on some element in the Array.\n *\n * @function\n * @template S\n * @param {Array<S>} arr\n * @param {function(S, number, Array<S>):boolean} f\n * @return {boolean}\n */\nexport const some = (arr, f) => arr.some(f)\n\n/**\n * @template ELEM\n *\n * @param {Array<ELEM>} a\n * @param {Array<ELEM>} b\n * @return {boolean}\n */\nexport const equalFlat = (a, b) => a.length === b.length && every(a, (item, index) => item === b[index])\n"]},"metadata":{},"sourceType":"module"}