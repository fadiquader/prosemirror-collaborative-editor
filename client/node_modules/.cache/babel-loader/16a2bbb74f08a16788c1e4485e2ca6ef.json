{"ast":null,"code":"var _jsxFileName = \"/Users/meeopp/Development/Others/editor-yjs/client/src/prosmirror/Toolbar.js\";\nimport React from 'react';\nimport { schema } from \"./schema\";\nexport const Toolbar = props => {\n  const {\n    editorWrapper,\n    editorView\n  } = props;\n  console.log('editorView ', editorView);\n\n  const markActive = (state, type) => {\n    let {\n      from,\n      $from,\n      to,\n      empty\n    } = state.selection;\n    if (empty) return type.isInSet(state.storedMarks || $from.marks());else return state.doc.rangeHasMark(from, to, type);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, \"Bold\"));\n};","map":{"version":3,"sources":["/Users/meeopp/Development/Others/editor-yjs/client/src/prosmirror/Toolbar.js"],"names":["React","schema","Toolbar","props","editorWrapper","editorView","console","log","markActive","state","type","from","$from","to","empty","selection","isInSet","storedMarks","marks","doc","rangeHasMark"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,OAAO,MAAMC,OAAO,GAAGC,KAAK,IAAI;AAC9B,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAgCF,KAAtC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,UAA3B;;AACA,QAAMG,UAAU,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAClC,QAAI;AAACC,MAAAA,IAAD;AAAOC,MAAAA,KAAP;AAAcC,MAAAA,EAAd;AAAkBC,MAAAA;AAAlB,QAA2BL,KAAK,CAACM,SAArC;AACA,QAAID,KAAJ,EAAW,OAAOJ,IAAI,CAACM,OAAL,CAAaP,KAAK,CAACQ,WAAN,IAAqBL,KAAK,CAACM,KAAN,EAAlC,CAAP,CAAX,KACK,OAAOT,KAAK,CAACU,GAAN,CAAUC,YAAV,CAAuBT,IAAvB,EAA6BE,EAA7B,EAAiCH,IAAjC,CAAP;AACN,GAJD;;AAKA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF;AAKD,CAbM","sourcesContent":["import React from 'react';\nimport { schema } from \"./schema\";\n\nexport const Toolbar = props => {\n  const { editorWrapper, editorView } = props;\n  console.log('editorView ', editorView)\n  const markActive = (state, type) => {\n    let {from, $from, to, empty} = state.selection\n    if (empty) return type.isInSet(state.storedMarks || $from.marks())\n    else return state.doc.rangeHasMark(from, to, type)\n  }\n  return (\n    <div>\n      <span>Bold</span>\n    </div>\n  )\n};\n"]},"metadata":{},"sourceType":"module"}