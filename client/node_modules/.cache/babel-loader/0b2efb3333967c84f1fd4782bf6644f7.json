{"ast":null,"code":"import { keymap } from \"prosemirror-keymap\";\nimport { history } from \"prosemirror-history\";\nimport { baseKeymap } from \"prosemirror-commands\";\nimport { Plugin } from \"prosemirror-state\";\nimport { dropCursor } from \"prosemirror-dropcursor\";\nimport { gapCursor } from \"prosemirror-gapcursor\";\nimport { menuBar } from \"prosemirror-menu\";\nimport { buildMenuItems } from \"./menu\";\nimport { buildKeymap } from \"./keymap\";\nimport { buildInputRules } from \"./inputrules\";\nexport { buildMenuItems, buildKeymap, buildInputRules }; // !! This module exports helper functions for deriving a set of basic\n// menu items, input rules, or key bindings from a schema. These\n// values need to know about the schema for two reasons—they need\n// access to specific instances of node and mark types, and they need\n// to know which of the node and mark types that they know about are\n// actually present in the schema.\n//\n// The `exampleSetup` plugin ties these together into a plugin that\n// will automatically enable this basic functionality in an editor.\n// :: (Object) → [Plugin]\n// A convenience plugin that bundles together a simple menu with basic\n// key bindings, input rules, and styling for the example schema.\n// Probably only useful for quickly setting up a passable\n// editor—you'll need more control over your settings in most\n// real-world situations.\n//\n//   options::- The following options are recognized:\n//\n//     schema:: Schema\n//     The schema to generate key bindings and menu items for.\n//\n//     mapKeys:: ?Object\n//     Can be used to [adjust](#example-setup.buildKeymap) the key bindings created.\n//\n//     menuBar:: ?bool\n//     Set to false to disable the menu bar.\n//\n//     history:: ?bool\n//     Set to false to disable the history plugin.\n//\n//     floatingMenu:: ?bool\n//     Set to false to make the menu bar non-floating.\n//\n//     menuContent:: [[MenuItem]]\n//     Can be used to override the menu content.\n\nexport function setupEditor(options) {\n  let plugins = [buildInputRules(options.schema), keymap(buildKeymap(options.schema, options.mapKeys)), keymap(baseKeymap), dropCursor(), gapCursor()];\n\n  if (options.menuBar !== false) {\n    plugins.push(menuBar({\n      floating: options.floatingMenu !== false,\n      content: options.menuContent || buildMenuItems(options.schema).fullMenu\n    }));\n  }\n\n  if (options.history !== false) {\n    plugins.push(history());\n  }\n\n  return plugins.concat(new Plugin({\n    props: {\n      attributes: {\n        class: \"ProseMirror-example-setup-style\"\n      }\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/meeopp/Development/Others/editor-yjs/client/src/prosmirror/setup-editor.js"],"names":["keymap","history","baseKeymap","Plugin","dropCursor","gapCursor","menuBar","buildMenuItems","buildKeymap","buildInputRules","setupEditor","options","plugins","schema","mapKeys","push","floating","floatingMenu","content","menuContent","fullMenu","concat","props","attributes","class"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,oBAArB;AACA,SAAQC,OAAR,QAAsB,qBAAtB;AACA,SAAQC,UAAR,QAAyB,sBAAzB;AACA,SAAQC,MAAR,QAAqB,mBAArB;AACA,SAAQC,UAAR,QAAyB,wBAAzB;AACA,SAAQC,SAAR,QAAwB,uBAAxB;AACA,SAAQC,OAAR,QAAsB,kBAAtB;AAEA,SAAQC,cAAR,QAA6B,QAA7B;AACA,SAAQC,WAAR,QAA0B,UAA1B;AACA,SAAQC,eAAR,QAA8B,cAA9B;AAEA,SAAQF,cAAR,EAAwBC,WAAxB,EAAqCC,eAArC,G,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,OAArB,EAA8B;AACnC,MAAIC,OAAO,GAAG,CACZH,eAAe,CAACE,OAAO,CAACE,MAAT,CADH,EAEZb,MAAM,CAACQ,WAAW,CAACG,OAAO,CAACE,MAAT,EAAiBF,OAAO,CAACG,OAAzB,CAAZ,CAFM,EAGZd,MAAM,CAACE,UAAD,CAHM,EAIZE,UAAU,EAJE,EAKZC,SAAS,EALG,CAAd;;AAQA,MAAIM,OAAO,CAACL,OAAR,KAAoB,KAAxB,EAA+B;AAC7BM,IAAAA,OAAO,CAACG,IAAR,CAAaT,OAAO,CAAC;AACnBU,MAAAA,QAAQ,EAAEL,OAAO,CAACM,YAAR,KAAyB,KADhB;AAEnBC,MAAAA,OAAO,EAAEP,OAAO,CAACQ,WAAR,IAAuBZ,cAAc,CAACI,OAAO,CAACE,MAAT,CAAd,CAA+BO;AAF5C,KAAD,CAApB;AAID;;AACD,MAAIT,OAAO,CAACV,OAAR,KAAoB,KAAxB,EAA+B;AAC7BW,IAAAA,OAAO,CAACG,IAAR,CAAad,OAAO,EAApB;AACD;;AAGD,SAAOW,OAAO,CAACS,MAAR,CAAe,IAAIlB,MAAJ,CAAW;AAC/BmB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR;AADP;AADwB,GAAX,CAAf,CAAP;AAKD","sourcesContent":["import {keymap} from \"prosemirror-keymap\"\nimport {history} from \"prosemirror-history\"\nimport {baseKeymap} from \"prosemirror-commands\"\nimport {Plugin} from \"prosemirror-state\"\nimport {dropCursor} from \"prosemirror-dropcursor\"\nimport {gapCursor} from \"prosemirror-gapcursor\"\nimport {menuBar} from \"prosemirror-menu\"\n\nimport {buildMenuItems} from \"./menu\"\nimport {buildKeymap} from \"./keymap\"\nimport {buildInputRules} from \"./inputrules\"\n\nexport {buildMenuItems, buildKeymap, buildInputRules}\n\n// !! This module exports helper functions for deriving a set of basic\n// menu items, input rules, or key bindings from a schema. These\n// values need to know about the schema for two reasons—they need\n// access to specific instances of node and mark types, and they need\n// to know which of the node and mark types that they know about are\n// actually present in the schema.\n//\n// The `exampleSetup` plugin ties these together into a plugin that\n// will automatically enable this basic functionality in an editor.\n\n// :: (Object) → [Plugin]\n// A convenience plugin that bundles together a simple menu with basic\n// key bindings, input rules, and styling for the example schema.\n// Probably only useful for quickly setting up a passable\n// editor—you'll need more control over your settings in most\n// real-world situations.\n//\n//   options::- The following options are recognized:\n//\n//     schema:: Schema\n//     The schema to generate key bindings and menu items for.\n//\n//     mapKeys:: ?Object\n//     Can be used to [adjust](#example-setup.buildKeymap) the key bindings created.\n//\n//     menuBar:: ?bool\n//     Set to false to disable the menu bar.\n//\n//     history:: ?bool\n//     Set to false to disable the history plugin.\n//\n//     floatingMenu:: ?bool\n//     Set to false to make the menu bar non-floating.\n//\n//     menuContent:: [[MenuItem]]\n//     Can be used to override the menu content.\nexport function setupEditor(options) {\n  let plugins = [\n    buildInputRules(options.schema),\n    keymap(buildKeymap(options.schema, options.mapKeys)),\n    keymap(baseKeymap),\n    dropCursor(),\n    gapCursor()\n  ];\n\n  if (options.menuBar !== false) {\n    plugins.push(menuBar({\n      floating: options.floatingMenu !== false,\n      content: options.menuContent || buildMenuItems(options.schema).fullMenu\n    }));\n  }\n  if (options.history !== false) {\n    plugins.push(history());\n  }\n\n\n  return plugins.concat(new Plugin({\n    props: {\n      attributes: {class: \"ProseMirror-example-setup-style\"}\n    }\n  }))\n}\n"]},"metadata":{},"sourceType":"module"}