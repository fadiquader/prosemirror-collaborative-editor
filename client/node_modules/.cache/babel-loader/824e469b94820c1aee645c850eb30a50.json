{"ast":null,"code":"import { wrapIn, setBlockType, chainCommands, toggleMark, exitCode, joinUp, joinDown, lift, selectParentNode } from \"prosemirror-commands\";\nimport { wrapInList, splitListItem, liftListItem, sinkListItem } from \"prosemirror-schema-list\";\nimport { undo, redo } from \"prosemirror-history\";\nimport { undoInputRule } from \"prosemirror-inputrules\";\nconst mac = typeof navigator != \"undefined\" ? /Mac/.test(navigator.platform) : false; // :: (Schema, ?Object) → Object\n// Inspect the given schema looking for marks and nodes from the\n// basic schema, and if found, add key bindings related to them.\n// This will add:\n//\n// * **Mod-b** for toggling [strong](#schema-basic.StrongMark)\n// * **Mod-i** for toggling [emphasis](#schema-basic.EmMark)\n// * **Mod-`** for toggling [code font](#schema-basic.CodeMark)\n// * **Ctrl-Shift-0** for making the current textblock a paragraph\n// * **Ctrl-Shift-1** to **Ctrl-Shift-Digit6** for making the current\n//   textblock a heading of the corresponding level\n// * **Ctrl-Shift-Backslash** to make the current textblock a code block\n// * **Ctrl-Shift-8** to wrap the selection in an ordered list\n// * **Ctrl-Shift-9** to wrap the selection in a bullet list\n// * **Ctrl->** to wrap the selection in a block quote\n// * **Enter** to split a non-empty textblock in a list item while at\n//   the same time splitting the list item\n// * **Mod-Enter** to insert a hard break\n// * **Mod-_** to insert a horizontal rule\n// * **Backspace** to undo an input rule\n// * **Alt-ArrowUp** to `joinUp`\n// * **Alt-ArrowDown** to `joinDown`\n// * **Mod-BracketLeft** to `lift`\n// * **Escape** to `selectParentNode`\n//\n// You can suppress or map these bindings by passing a `mapKeys`\n// argument, which maps key names (say `\"Mod-B\"` to either `false`, to\n// remove the binding, or a new key name string.\n\nexport function buildKeymap(schema, mapKeys) {\n  let keys = {},\n      type;\n\n  function bind(key, cmd) {\n    if (mapKeys) {\n      let mapped = mapKeys[key];\n      if (mapped === false) return;\n      if (mapped) key = mapped;\n    }\n\n    keys[key] = cmd;\n  }\n\n  bind(\"Mod-z\", undo);\n  bind(\"Shift-Mod-z\", redo);\n  bind(\"Backspace\", undoInputRule);\n  if (!mac) bind(\"Mod-y\", redo);\n  bind(\"Alt-ArrowUp\", joinUp);\n  bind(\"Alt-ArrowDown\", joinDown);\n  bind(\"Mod-BracketLeft\", lift);\n  bind(\"Escape\", selectParentNode);\n\n  if (type = schema.marks.strong) {\n    bind(\"Mod-b\", toggleMark(type));\n    bind(\"Mod-B\", toggleMark(type));\n  }\n\n  if (type = schema.marks.em) {\n    bind(\"Mod-i\", toggleMark(type));\n    bind(\"Mod-I\", toggleMark(type));\n  }\n\n  if (type = schema.marks.code) bind(\"Mod-`\", toggleMark(type));\n  if (type = schema.nodes.bullet_list) bind(\"Shift-Ctrl-8\", wrapInList(type));\n  if (type = schema.nodes.ordered_list) bind(\"Shift-Ctrl-9\", wrapInList(type));\n  if (type = schema.nodes.blockquote) bind(\"Ctrl->\", wrapIn(type));\n\n  if (type = schema.nodes.hard_break) {\n    let br = type,\n        cmd = chainCommands(exitCode, (state, dispatch) => {\n      dispatch(state.tr.replaceSelectionWith(br.create()).scrollIntoView());\n      return true;\n    });\n    bind(\"Mod-Enter\", cmd);\n    bind(\"Shift-Enter\", cmd);\n    if (mac) bind(\"Ctrl-Enter\", cmd);\n  }\n\n  if (type = schema.nodes.list_item) {\n    bind(\"Enter\", splitListItem(type));\n    bind(\"Mod-[\", liftListItem(type));\n    bind(\"Mod-]\", sinkListItem(type));\n  }\n\n  if (type = schema.nodes.paragraph) bind(\"Shift-Ctrl-0\", setBlockType(type));\n  if (type = schema.nodes.code_block) bind(\"Shift-Ctrl-\\\\\", setBlockType(type));\n  if (type = schema.nodes.heading) for (let i = 1; i <= 6; i++) bind(\"Shift-Ctrl-\" + i, setBlockType(type, {\n    level: i\n  }));\n\n  if (type = schema.nodes.horizontal_rule) {\n    let hr = type;\n    bind(\"Mod-_\", (state, dispatch) => {\n      dispatch(state.tr.replaceSelectionWith(hr.create()).scrollIntoView());\n      return true;\n    });\n  }\n\n  return keys;\n}","map":{"version":3,"sources":["/Users/meeopp/Development/Others/editor-yjs/client/src/prosmirror/keymap.js"],"names":["wrapIn","setBlockType","chainCommands","toggleMark","exitCode","joinUp","joinDown","lift","selectParentNode","wrapInList","splitListItem","liftListItem","sinkListItem","undo","redo","undoInputRule","mac","navigator","test","platform","buildKeymap","schema","mapKeys","keys","type","bind","key","cmd","mapped","marks","strong","em","code","nodes","bullet_list","ordered_list","blockquote","hard_break","br","state","dispatch","tr","replaceSelectionWith","create","scrollIntoView","list_item","paragraph","code_block","heading","i","level","horizontal_rule","hr"],"mappings":"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","sourcesContent":["import {wrapIn, setBlockType, chainCommands, toggleMark, exitCode,\n  joinUp, joinDown, lift, selectParentNode} from \"prosemirror-commands\"\nimport {wrapInList, splitListItem, liftListItem, sinkListItem} from \"prosemirror-schema-list\"\nimport {undo, redo} from \"prosemirror-history\"\nimport {undoInputRule} from \"prosemirror-inputrules\"\n\nconst mac = typeof navigator != \"undefined\" ? /Mac/.test(navigator.platform) : false\n\n// :: (Schema, ?Object) → Object\n// Inspect the given schema looking for marks and nodes from the\n// basic schema, and if found, add key bindings related to them.\n// This will add:\n//\n// * **Mod-b** for toggling [strong](#schema-basic.StrongMark)\n// * **Mod-i** for toggling [emphasis](#schema-basic.EmMark)\n// * **Mod-`** for toggling [code font](#schema-basic.CodeMark)\n// * **Ctrl-Shift-0** for making the current textblock a paragraph\n// * **Ctrl-Shift-1** to **Ctrl-Shift-Digit6** for making the current\n//   textblock a heading of the corresponding level\n// * **Ctrl-Shift-Backslash** to make the current textblock a code block\n// * **Ctrl-Shift-8** to wrap the selection in an ordered list\n// * **Ctrl-Shift-9** to wrap the selection in a bullet list\n// * **Ctrl->** to wrap the selection in a block quote\n// * **Enter** to split a non-empty textblock in a list item while at\n//   the same time splitting the list item\n// * **Mod-Enter** to insert a hard break\n// * **Mod-_** to insert a horizontal rule\n// * **Backspace** to undo an input rule\n// * **Alt-ArrowUp** to `joinUp`\n// * **Alt-ArrowDown** to `joinDown`\n// * **Mod-BracketLeft** to `lift`\n// * **Escape** to `selectParentNode`\n//\n// You can suppress or map these bindings by passing a `mapKeys`\n// argument, which maps key names (say `\"Mod-B\"` to either `false`, to\n// remove the binding, or a new key name string.\nexport function buildKeymap(schema, mapKeys) {\n  let keys = {}, type\n  function bind(key, cmd) {\n    if (mapKeys) {\n      let mapped = mapKeys[key]\n      if (mapped === false) return\n      if (mapped) key = mapped\n    }\n    keys[key] = cmd\n  }\n\n\n  bind(\"Mod-z\", undo)\n  bind(\"Shift-Mod-z\", redo)\n  bind(\"Backspace\", undoInputRule)\n  if (!mac) bind(\"Mod-y\", redo)\n\n  bind(\"Alt-ArrowUp\", joinUp)\n  bind(\"Alt-ArrowDown\", joinDown)\n  bind(\"Mod-BracketLeft\", lift)\n  bind(\"Escape\", selectParentNode)\n\n  if (type = schema.marks.strong) {\n    bind(\"Mod-b\", toggleMark(type))\n    bind(\"Mod-B\", toggleMark(type))\n  }\n  if (type = schema.marks.em) {\n    bind(\"Mod-i\", toggleMark(type))\n    bind(\"Mod-I\", toggleMark(type))\n  }\n  if (type = schema.marks.code)\n    bind(\"Mod-`\", toggleMark(type))\n\n  if (type = schema.nodes.bullet_list)\n    bind(\"Shift-Ctrl-8\", wrapInList(type))\n  if (type = schema.nodes.ordered_list)\n    bind(\"Shift-Ctrl-9\", wrapInList(type))\n  if (type = schema.nodes.blockquote)\n    bind(\"Ctrl->\", wrapIn(type))\n  if (type = schema.nodes.hard_break) {\n    let br = type, cmd = chainCommands(exitCode, (state, dispatch) => {\n      dispatch(state.tr.replaceSelectionWith(br.create()).scrollIntoView())\n      return true\n    })\n    bind(\"Mod-Enter\", cmd)\n    bind(\"Shift-Enter\", cmd)\n    if (mac) bind(\"Ctrl-Enter\", cmd)\n  }\n  if (type = schema.nodes.list_item) {\n    bind(\"Enter\", splitListItem(type))\n    bind(\"Mod-[\", liftListItem(type))\n    bind(\"Mod-]\", sinkListItem(type))\n  }\n  if (type = schema.nodes.paragraph)\n    bind(\"Shift-Ctrl-0\", setBlockType(type))\n  if (type = schema.nodes.code_block)\n    bind(\"Shift-Ctrl-\\\\\", setBlockType(type))\n  if (type = schema.nodes.heading)\n    for (let i = 1; i <= 6; i++) bind(\"Shift-Ctrl-\" + i, setBlockType(type, {level: i}))\n  if (type = schema.nodes.horizontal_rule) {\n    let hr = type\n    bind(\"Mod-_\", (state, dispatch) => {\n      dispatch(state.tr.replaceSelectionWith(hr.create()).scrollIntoView())\n      return true\n    })\n  }\n\n  return keys\n}\n"]},"metadata":{},"sourceType":"module"}