{"ast":null,"code":"/**\n * Efficient diffs.\n *\n * @module diff\n */\nimport { equalityStrict } from './function.js';\n/**\n * A SimpleDiff describes a change on a String.\n *\n * ```js\n * console.log(a) // the old value\n * console.log(b) // the updated value\n * // Apply changes of diff (pseudocode)\n * a.remove(diff.index, diff.remove) // Remove `diff.remove` characters\n * a.insert(diff.index, diff.insert) // Insert `diff.insert`\n * a === b // values match\n * ```\n *\n * @typedef {Object} SimpleDiff\n * @property {Number} index The index where changes were applied\n * @property {Number} remove The number of characters to delete starting\n *                                  at `index`.\n * @property {T} insert The new text to insert at `index` after applying\n *                           `delete`\n *\n * @template T\n */\n\n/**\n * Create a diff between two strings. This diff implementation is highly\n * efficient, but not very sophisticated.\n *\n * @function\n *\n * @param {string} a The old version of the string\n * @param {string} b The updated version of the string\n * @return {SimpleDiff<string>} The diff description.\n */\n\nexport const simpleDiffString = (a, b) => {\n  let left = 0; // number of same characters counting from left\n\n  let right = 0; // number of same characters counting from right\n\n  while (left < a.length && left < b.length && a[left] === b[left]) {\n    left++;\n  }\n\n  if (left !== a.length || left !== b.length) {\n    // Only check right if a !== b\n    while (right + left < a.length && right + left < b.length && a[a.length - right - 1] === b[b.length - right - 1]) {\n      right++;\n    }\n  }\n\n  return {\n    index: left,\n    remove: a.length - left - right,\n    insert: b.slice(left, b.length - right)\n  };\n};\n/**\n * @todo Remove in favor of simpleDiffString\n * @deprecated\n */\n\nexport const simpleDiff = simpleDiffString;\n/**\n * Create a diff between two arrays. This diff implementation is highly\n * efficient, but not very sophisticated.\n *\n * Note: This is basically the same function as above. Another function was created so that the runtime\n * can better optimize these function calls.\n *\n * @function\n * @template T\n *\n * @param {Array<T>} a The old version of the array\n * @param {Array<T>} b The updated version of the array\n * @param {function(T, T):boolean} [compare]\n * @return {SimpleDiff<Array<T>>} The diff description.\n */\n\nexport const simpleDiffArray = (a, b, compare = equalityStrict) => {\n  let left = 0; // number of same characters counting from left\n\n  let right = 0; // number of same characters counting from right\n\n  while (left < a.length && left < b.length && compare(a[left], b[left])) {\n    left++;\n  }\n\n  if (left !== a.length || left !== b.length) {\n    // Only check right if a !== b\n    while (right + left < a.length && right + left < b.length && compare(a[a.length - right - 1], b[b.length - right - 1])) {\n      right++;\n    }\n  }\n\n  return {\n    index: left,\n    remove: a.length - left - right,\n    insert: b.slice(left, b.length - right)\n  };\n};","map":{"version":3,"sources":["/Users/meeopp/Development/Others/editor-yjs/client/node_modules/lib0/diff.js"],"names":["equalityStrict","simpleDiffString","a","b","left","right","length","index","remove","insert","slice","simpleDiff","simpleDiffArray","compare"],"mappings":"AAAA;;;;;AAMA,SAASA,cAAT,QAA+B,eAA/B;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;AAUA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACxC,MAAIC,IAAI,GAAG,CAAX,CADwC,CAC3B;;AACb,MAAIC,KAAK,GAAG,CAAZ,CAFwC,CAE1B;;AACd,SAAOD,IAAI,GAAGF,CAAC,CAACI,MAAT,IAAmBF,IAAI,GAAGD,CAAC,CAACG,MAA5B,IAAsCJ,CAAC,CAACE,IAAD,CAAD,KAAYD,CAAC,CAACC,IAAD,CAA1D,EAAkE;AAChEA,IAAAA,IAAI;AACL;;AACD,MAAIA,IAAI,KAAKF,CAAC,CAACI,MAAX,IAAqBF,IAAI,KAAKD,CAAC,CAACG,MAApC,EAA4C;AAC1C;AACA,WAAOD,KAAK,GAAGD,IAAR,GAAeF,CAAC,CAACI,MAAjB,IAA2BD,KAAK,GAAGD,IAAR,GAAeD,CAAC,CAACG,MAA5C,IAAsDJ,CAAC,CAACA,CAAC,CAACI,MAAF,GAAWD,KAAX,GAAmB,CAApB,CAAD,KAA4BF,CAAC,CAACA,CAAC,CAACG,MAAF,GAAWD,KAAX,GAAmB,CAApB,CAA1F,EAAkH;AAChHA,MAAAA,KAAK;AACN;AACF;;AACD,SAAO;AACLE,IAAAA,KAAK,EAAEH,IADF;AAELI,IAAAA,MAAM,EAAEN,CAAC,CAACI,MAAF,GAAWF,IAAX,GAAkBC,KAFrB;AAGLI,IAAAA,MAAM,EAAEN,CAAC,CAACO,KAAF,CAAQN,IAAR,EAAcD,CAAC,CAACG,MAAF,GAAWD,KAAzB;AAHH,GAAP;AAKD,CAjBM;AAmBP;;;;;AAIA,OAAO,MAAMM,UAAU,GAAGV,gBAAnB;AAEP;;;;;;;;;;;;;;;;AAeA,OAAO,MAAMW,eAAe,GAAG,CAACV,CAAD,EAAIC,CAAJ,EAAOU,OAAO,GAAGb,cAAjB,KAAoC;AACjE,MAAII,IAAI,GAAG,CAAX,CADiE,CACpD;;AACb,MAAIC,KAAK,GAAG,CAAZ,CAFiE,CAEnD;;AACd,SAAOD,IAAI,GAAGF,CAAC,CAACI,MAAT,IAAmBF,IAAI,GAAGD,CAAC,CAACG,MAA5B,IAAsCO,OAAO,CAACX,CAAC,CAACE,IAAD,CAAF,EAAUD,CAAC,CAACC,IAAD,CAAX,CAApD,EAAwE;AACtEA,IAAAA,IAAI;AACL;;AACD,MAAIA,IAAI,KAAKF,CAAC,CAACI,MAAX,IAAqBF,IAAI,KAAKD,CAAC,CAACG,MAApC,EAA4C;AAC1C;AACA,WAAOD,KAAK,GAAGD,IAAR,GAAeF,CAAC,CAACI,MAAjB,IAA2BD,KAAK,GAAGD,IAAR,GAAeD,CAAC,CAACG,MAA5C,IAAsDO,OAAO,CAACX,CAAC,CAACA,CAAC,CAACI,MAAF,GAAWD,KAAX,GAAmB,CAApB,CAAF,EAA0BF,CAAC,CAACA,CAAC,CAACG,MAAF,GAAWD,KAAX,GAAmB,CAApB,CAA3B,CAApE,EAAwH;AACtHA,MAAAA,KAAK;AACN;AACF;;AACD,SAAO;AACLE,IAAAA,KAAK,EAAEH,IADF;AAELI,IAAAA,MAAM,EAAEN,CAAC,CAACI,MAAF,GAAWF,IAAX,GAAkBC,KAFrB;AAGLI,IAAAA,MAAM,EAAEN,CAAC,CAACO,KAAF,CAAQN,IAAR,EAAcD,CAAC,CAACG,MAAF,GAAWD,KAAzB;AAHH,GAAP;AAKD,CAjBM","sourcesContent":["/**\n * Efficient diffs.\n *\n * @module diff\n */\n\nimport { equalityStrict } from './function.js'\n\n/**\n * A SimpleDiff describes a change on a String.\n *\n * ```js\n * console.log(a) // the old value\n * console.log(b) // the updated value\n * // Apply changes of diff (pseudocode)\n * a.remove(diff.index, diff.remove) // Remove `diff.remove` characters\n * a.insert(diff.index, diff.insert) // Insert `diff.insert`\n * a === b // values match\n * ```\n *\n * @typedef {Object} SimpleDiff\n * @property {Number} index The index where changes were applied\n * @property {Number} remove The number of characters to delete starting\n *                                  at `index`.\n * @property {T} insert The new text to insert at `index` after applying\n *                           `delete`\n *\n * @template T\n */\n\n/**\n * Create a diff between two strings. This diff implementation is highly\n * efficient, but not very sophisticated.\n *\n * @function\n *\n * @param {string} a The old version of the string\n * @param {string} b The updated version of the string\n * @return {SimpleDiff<string>} The diff description.\n */\nexport const simpleDiffString = (a, b) => {\n  let left = 0 // number of same characters counting from left\n  let right = 0 // number of same characters counting from right\n  while (left < a.length && left < b.length && a[left] === b[left]) {\n    left++\n  }\n  if (left !== a.length || left !== b.length) {\n    // Only check right if a !== b\n    while (right + left < a.length && right + left < b.length && a[a.length - right - 1] === b[b.length - right - 1]) {\n      right++\n    }\n  }\n  return {\n    index: left,\n    remove: a.length - left - right,\n    insert: b.slice(left, b.length - right)\n  }\n}\n\n/**\n * @todo Remove in favor of simpleDiffString\n * @deprecated\n */\nexport const simpleDiff = simpleDiffString\n\n/**\n * Create a diff between two arrays. This diff implementation is highly\n * efficient, but not very sophisticated.\n *\n * Note: This is basically the same function as above. Another function was created so that the runtime\n * can better optimize these function calls.\n *\n * @function\n * @template T\n *\n * @param {Array<T>} a The old version of the array\n * @param {Array<T>} b The updated version of the array\n * @param {function(T, T):boolean} [compare]\n * @return {SimpleDiff<Array<T>>} The diff description.\n */\nexport const simpleDiffArray = (a, b, compare = equalityStrict) => {\n  let left = 0 // number of same characters counting from left\n  let right = 0 // number of same characters counting from right\n  while (left < a.length && left < b.length && compare(a[left], b[left])) {\n    left++\n  }\n  if (left !== a.length || left !== b.length) {\n    // Only check right if a !== b\n    while (right + left < a.length && right + left < b.length && compare(a[a.length - right - 1], b[b.length - right - 1])) {\n      right++\n    }\n  }\n  return {\n    index: left,\n    remove: a.length - left - right,\n    insert: b.slice(left, b.length - right)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}