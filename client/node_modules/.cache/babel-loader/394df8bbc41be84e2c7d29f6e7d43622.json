{"ast":null,"code":"const prefix = \"ProseMirror-prompt\";\nexport function openPrompt(options) {\n  let wrapper = document.body.appendChild(document.createElement(\"div\"));\n  wrapper.className = prefix;\n\n  let mouseOutside = e => {\n    if (!wrapper.contains(e.target)) close();\n  };\n\n  setTimeout(() => window.addEventListener(\"mousedown\", mouseOutside), 50);\n\n  let close = () => {\n    window.removeEventListener(\"mousedown\", mouseOutside);\n    if (wrapper.parentNode) wrapper.parentNode.removeChild(wrapper);\n  };\n\n  let domFields = [];\n\n  for (let name in options.fields) domFields.push(options.fields[name].render());\n\n  let submitButton = document.createElement(\"button\");\n  submitButton.type = \"submit\";\n  submitButton.className = prefix + \"-submit\";\n  submitButton.textContent = \"OK\";\n  let cancelButton = document.createElement(\"button\");\n  cancelButton.type = \"button\";\n  cancelButton.className = prefix + \"-cancel\";\n  cancelButton.textContent = \"Cancel\";\n  cancelButton.addEventListener(\"click\", close);\n  let form = wrapper.appendChild(document.createElement(\"form\"));\n  if (options.title) form.appendChild(document.createElement(\"h5\")).textContent = options.title;\n  domFields.forEach(field => {\n    form.appendChild(document.createElement(\"div\")).appendChild(field);\n  });\n  let buttons = form.appendChild(document.createElement(\"div\"));\n  buttons.className = prefix + \"-buttons\";\n  buttons.appendChild(submitButton);\n  buttons.appendChild(document.createTextNode(\" \"));\n  buttons.appendChild(cancelButton);\n  let box = wrapper.getBoundingClientRect();\n  wrapper.style.top = (window.innerHeight - box.height) / 2 + \"px\";\n  wrapper.style.left = (window.innerWidth - box.width) / 2 + \"px\";\n\n  let submit = () => {\n    let params = getValues(options.fields, domFields);\n\n    if (params) {\n      close();\n      options.callback(params);\n    }\n  };\n\n  form.addEventListener(\"submit\", e => {\n    e.preventDefault();\n    submit();\n  });\n  form.addEventListener(\"keydown\", e => {\n    if (e.keyCode == 27) {\n      e.preventDefault();\n      close();\n    } else if (e.keyCode == 13 && !(e.ctrlKey || e.metaKey || e.shiftKey)) {\n      e.preventDefault();\n      submit();\n    } else if (e.keyCode == 9) {\n      window.setTimeout(() => {\n        if (!wrapper.contains(document.activeElement)) close();\n      }, 500);\n    }\n  });\n  let input = form.elements[0];\n  if (input) input.focus();\n}\n\nfunction getValues(fields, domFields) {\n  let result = Object.create(null),\n      i = 0;\n\n  for (let name in fields) {\n    let field = fields[name],\n        dom = domFields[i++];\n    let value = field.read(dom),\n        bad = field.validate(value);\n\n    if (bad) {\n      reportInvalid(dom, bad);\n      return null;\n    }\n\n    result[name] = field.clean(value);\n  }\n\n  return result;\n}\n\nfunction reportInvalid(dom, message) {\n  // FIXME this is awful and needs a lot more work\n  let parent = dom.parentNode;\n  let msg = parent.appendChild(document.createElement(\"div\"));\n  msg.style.left = dom.offsetLeft + dom.offsetWidth + 2 + \"px\";\n  msg.style.top = dom.offsetTop - 5 + \"px\";\n  msg.className = \"ProseMirror-invalid\";\n  msg.textContent = message;\n  setTimeout(() => parent.removeChild(msg), 1500);\n} // ::- The type of field that `FieldPrompt` expects to be passed to it.\n\n\nexport class Field {\n  // :: (Object)\n  // Create a field with the given options. Options support by all\n  // field types are:\n  //\n  // **`value`**`: ?any`\n  //   : The starting value for the field.\n  //\n  // **`label`**`: string`\n  //   : The label for the field.\n  //\n  // **`required`**`: ?bool`\n  //   : Whether the field is required.\n  //\n  // **`validate`**`: ?(any) → ?string`\n  //   : A function to validate the given value. Should return an\n  //     error message if it is not valid.\n  constructor(options) {\n    this.options = options;\n  } // render:: (state: EditorState, props: Object) → dom.Node\n  // Render the field to the DOM. Should be implemented by all subclasses.\n  // :: (dom.Node) → any\n  // Read the field's value from its DOM node.\n\n\n  read(dom) {\n    return dom.value;\n  } // :: (any) → ?string\n  // A field-type-specific validation function.\n\n\n  validateType(_value) {}\n\n  validate(value) {\n    if (!value && this.options.required) return \"Required field\";\n    return this.validateType(value) || this.options.validate && this.options.validate(value);\n  }\n\n  clean(value) {\n    return this.options.clean ? this.options.clean(value) : value;\n  }\n\n} // ::- A field class for single-line text fields.\n\nexport class TextField extends Field {\n  render() {\n    let input = document.createElement(\"input\");\n    input.type = \"text\";\n    input.placeholder = this.options.label;\n    input.value = this.options.value || \"\";\n    input.autocomplete = \"off\";\n    return input;\n  }\n\n} // ::- A field class for dropdown fields based on a plain `<select>`\n// tag. Expects an option `options`, which should be an array of\n// `{value: string, label: string}` objects, or a function taking a\n// `ProseMirror` instance and returning such an array.\n\nexport class SelectField extends Field {\n  render() {\n    let select = document.createElement(\"select\");\n    this.options.options.forEach(o => {\n      let opt = select.appendChild(document.createElement(\"option\"));\n      opt.value = o.value;\n      opt.selected = o.value == this.options.value;\n      opt.label = o.label;\n    });\n    return select;\n  }\n\n}","map":{"version":3,"sources":["/Users/meeopp/Development/Others/editor-yjs/client/src/prosmirror/prompt.js"],"names":["prefix","openPrompt","options","wrapper","document","body","appendChild","createElement","className","mouseOutside","e","contains","target","close","setTimeout","window","addEventListener","removeEventListener","parentNode","removeChild","domFields","name","fields","push","render","submitButton","type","textContent","cancelButton","form","title","forEach","field","buttons","createTextNode","box","getBoundingClientRect","style","top","innerHeight","height","left","innerWidth","width","submit","params","getValues","callback","preventDefault","keyCode","ctrlKey","metaKey","shiftKey","activeElement","input","elements","focus","result","Object","create","i","dom","value","read","bad","validate","reportInvalid","clean","message","parent","msg","offsetLeft","offsetWidth","offsetTop","Field","constructor","validateType","_value","required","TextField","placeholder","label","autocomplete","SelectField","select","o","opt","selected"],"mappings":"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","sourcesContent":["const prefix = \"ProseMirror-prompt\"\n\nexport function openPrompt(options) {\n  let wrapper = document.body.appendChild(document.createElement(\"div\"))\n  wrapper.className = prefix\n\n  let mouseOutside = e => { if (!wrapper.contains(e.target)) close() }\n  setTimeout(() => window.addEventListener(\"mousedown\", mouseOutside), 50)\n  let close = () => {\n    window.removeEventListener(\"mousedown\", mouseOutside)\n    if (wrapper.parentNode) wrapper.parentNode.removeChild(wrapper)\n  }\n\n  let domFields = []\n  for (let name in options.fields) domFields.push(options.fields[name].render())\n\n  let submitButton = document.createElement(\"button\")\n  submitButton.type = \"submit\"\n  submitButton.className = prefix + \"-submit\"\n  submitButton.textContent = \"OK\"\n  let cancelButton = document.createElement(\"button\")\n  cancelButton.type = \"button\"\n  cancelButton.className = prefix + \"-cancel\"\n  cancelButton.textContent = \"Cancel\"\n  cancelButton.addEventListener(\"click\", close)\n\n  let form = wrapper.appendChild(document.createElement(\"form\"))\n  if (options.title) form.appendChild(document.createElement(\"h5\")).textContent = options.title\n  domFields.forEach(field => {\n    form.appendChild(document.createElement(\"div\")).appendChild(field)\n  })\n  let buttons = form.appendChild(document.createElement(\"div\"))\n  buttons.className = prefix + \"-buttons\"\n  buttons.appendChild(submitButton)\n  buttons.appendChild(document.createTextNode(\" \"))\n  buttons.appendChild(cancelButton)\n\n  let box = wrapper.getBoundingClientRect()\n  wrapper.style.top = ((window.innerHeight - box.height) / 2) + \"px\"\n  wrapper.style.left = ((window.innerWidth - box.width) / 2) + \"px\"\n\n  let submit = () => {\n    let params = getValues(options.fields, domFields)\n    if (params) {\n      close()\n      options.callback(params)\n    }\n  }\n\n  form.addEventListener(\"submit\", e => {\n    e.preventDefault()\n    submit()\n  })\n\n  form.addEventListener(\"keydown\", e => {\n    if (e.keyCode == 27) {\n      e.preventDefault()\n      close()\n    } else if (e.keyCode == 13 && !(e.ctrlKey || e.metaKey || e.shiftKey)) {\n      e.preventDefault()\n      submit()\n    } else if (e.keyCode == 9) {\n      window.setTimeout(() => {\n        if (!wrapper.contains(document.activeElement)) close()\n      }, 500)\n    }\n  })\n\n  let input = form.elements[0]\n  if (input) input.focus()\n}\n\nfunction getValues(fields, domFields) {\n  let result = Object.create(null), i = 0\n  for (let name in fields) {\n    let field = fields[name], dom = domFields[i++]\n    let value = field.read(dom), bad = field.validate(value)\n    if (bad) {\n      reportInvalid(dom, bad)\n      return null\n    }\n    result[name] = field.clean(value)\n  }\n  return result\n}\n\nfunction reportInvalid(dom, message) {\n  // FIXME this is awful and needs a lot more work\n  let parent = dom.parentNode\n  let msg = parent.appendChild(document.createElement(\"div\"))\n  msg.style.left = (dom.offsetLeft + dom.offsetWidth + 2) + \"px\"\n  msg.style.top = (dom.offsetTop - 5) + \"px\"\n  msg.className = \"ProseMirror-invalid\"\n  msg.textContent = message\n  setTimeout(() => parent.removeChild(msg), 1500)\n}\n\n// ::- The type of field that `FieldPrompt` expects to be passed to it.\nexport class Field {\n  // :: (Object)\n  // Create a field with the given options. Options support by all\n  // field types are:\n  //\n  // **`value`**`: ?any`\n  //   : The starting value for the field.\n  //\n  // **`label`**`: string`\n  //   : The label for the field.\n  //\n  // **`required`**`: ?bool`\n  //   : Whether the field is required.\n  //\n  // **`validate`**`: ?(any) → ?string`\n  //   : A function to validate the given value. Should return an\n  //     error message if it is not valid.\n  constructor(options) { this.options = options }\n\n  // render:: (state: EditorState, props: Object) → dom.Node\n  // Render the field to the DOM. Should be implemented by all subclasses.\n\n  // :: (dom.Node) → any\n  // Read the field's value from its DOM node.\n  read(dom) { return dom.value }\n\n  // :: (any) → ?string\n  // A field-type-specific validation function.\n  validateType(_value) {}\n\n  validate(value) {\n    if (!value && this.options.required)\n      return \"Required field\"\n    return this.validateType(value) || (this.options.validate && this.options.validate(value))\n  }\n\n  clean(value) {\n    return this.options.clean ? this.options.clean(value) : value\n  }\n}\n\n// ::- A field class for single-line text fields.\nexport class TextField extends Field {\n  render() {\n    let input = document.createElement(\"input\")\n    input.type = \"text\"\n    input.placeholder = this.options.label\n    input.value = this.options.value || \"\"\n    input.autocomplete = \"off\"\n    return input\n  }\n}\n\n\n// ::- A field class for dropdown fields based on a plain `<select>`\n// tag. Expects an option `options`, which should be an array of\n// `{value: string, label: string}` objects, or a function taking a\n// `ProseMirror` instance and returning such an array.\nexport class SelectField extends Field {\n  render() {\n    let select = document.createElement(\"select\")\n    this.options.options.forEach(o => {\n      let opt = select.appendChild(document.createElement(\"option\"))\n      opt.value = o.value\n      opt.selected = o.value == this.options.value\n      opt.label = o.label\n    })\n    return select\n  }\n}\n"]},"metadata":{},"sourceType":"module"}